{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/COMPLETE%20HYBRID%20A%20STAR%20ALGORITHM%20-%20IN%20MOULDING)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5*np.pi/180\n",
        "DT=1\n",
        "SPEED=1\n",
        "LENGTH=1\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 1.0\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "closed_A_star=np.array([[free_space for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "cost_map = np.array([[-1 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    for delta in delta_angles:\n",
        "        omega  = SPEED / LENGTH * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + omega * DT)\n",
        "        dX = SPEED * np.cos(theta2) * DT\n",
        "        dY = SPEED * np.sin(theta2) * DT\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2)         \n",
        "        #print(arc_cost)\n",
        "        h2     = euclidean_distance([x2,y2],[goal.x,goal.y])+arc_cost\n",
        "        if(cost_map[idx(x2)][idx(y2)]==-1):\n",
        "          h2+=100\n",
        "        else:\n",
        "          h2+=cost_map[idx(x2)][idx(y2)]\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        #jj=np.arctan2(goal.y-y2,goal.x-x2)\n",
        "        #print(['X: ',x2,'Y: ',y2,'ang_goal',normalize_theta(jj)*180/np.pi,'taken_angle',theta2*180/np.pi,'cost:',arc_cost])\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHK A STAR VEHICLE:\n",
        "def A_vehicle_is_safe(vehicle_point_A,add_value,grid):\n",
        "  vp=vehicle_point_A.input_co_ordinates+add_value\n",
        "  for point in vp:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      #print('False',add_value)\n",
        "      return False\n",
        "  #('True',add_value)\n",
        "  return True\n",
        "    \n",
        "    \n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_x_m and y>=0 and y<grid_y_m)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "\n",
        "### A_STAR SEARCH\n",
        "def A_Star(current_state,goal,grid):\n",
        "  vehicle_point_A=vehicle_points(np.array([[0,2],[0,1],[0,-1],[0,-2],[1,0],[2,0],[-1,0],[-2,0]]),[0,0])\n",
        "  print(\"STARTED A*\")\n",
        "  open_list = []\n",
        "  open_list.append(current_state )\n",
        "  is_goal_attained=False\n",
        "  cost=0\n",
        "  heu=0\n",
        "  closed_A_star[current_state.x][current_state.y]=1\n",
        "  cost_map[current_state.x][current_state.y]=cost\n",
        "  \n",
        "  while(len(open_list)>0):\n",
        "    open_list.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    old_state=open_list.pop(0)\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL REACHED BY A*\")\n",
        "      return is_goal_attained\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and closed_A_star[nxt_node[0]][nxt_node[1]]==0):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            heu=euclidean_distance([nxt_node[0],nxt_node[1]],[goal.x,goal.y])\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,g2+heu,heu,0)\n",
        "            open_list.append(new_state)\n",
        "            closed_A_star[nxt_node[0]][nxt_node[1]]=1\n",
        "            cost_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "            #plt.plot([node[0],nxt_node[0]],[node[1],nxt_node[1]])\n",
        "  return is_goal_attained\n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  print([p.steer for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "2exSViITSeqc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "### PUT OBSTACLES:\n",
        "  def put_obstacles(X_list,Y_list,grid):\n",
        "    if(len(X_list)>0):\n",
        "      for i in  X_list:\n",
        "        x_XO=[]\n",
        "        x_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          x_XO.append(i[0])\n",
        "          x_YO.append(k)\n",
        "          grid[i[0]][k]=1\n",
        "        plt.scatter(x_XO,x_YO)\n",
        "    if(len(Y_list)>0):\n",
        "      for i in Y_list:\n",
        "        y_XO=[]\n",
        "        y_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          y_XO.append(i[0])\n",
        "          y_YO.append(k)\n",
        "          grid[k][i[0]]=1\n",
        "        plt.scatter(y_YO,y_XO)\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZbpDvcJDRw3I",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "START=[20,20]\n",
        "goal_node = goal( 37,3)\n",
        "present_heading=np.pi/2\n",
        "vehicle_pt_obj = vehicle_points( np.array([[21.5,18.5],[21.5,19.5],[21.5,20.5],[21.5,21.5]]),START )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,[vehicle_pt_obj.center[0],vehicle_pt_obj.center[1]],present_heading)\n",
        "#print(vehicle_pt_obj.input_co_ordinates)\n",
        "current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "vJQLZcriX_il",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        },
        "outputId": "6b02aa4d-addc-4086-e7c1-bf33507bb82a"
      },
      "cell_type": "code",
      "source": [
        "put_obstacles([[24,0,30],[30,15,39]],[],GRID_TEST)\n",
        "if(A_Star(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(START[0],START[1]),GRID_TEST)):\n",
        "  process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj)\n",
        "  if(process_further):\n",
        "    show_path(reconstruct_path(ret_val.came_from,START,ret_val.final),START,[goal_node.x,goal_node.y])\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "else:\n",
        "  print(\"GOAL CANT BE REACHED!!\")\n"
      ],
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "STARTED A*\n",
            "GOAL REACHED BY A*\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.392328977585\n",
            "[-0.2617993877991494, 0.0872664625997165, 0.43633231299858244, 0.26179938779914946, -0.08726646259971645, -0.3490658503988659, -0.17453292519943292, 2.7755575615628914e-17, -0.08726646259971645, -0.17453292519943292, -0.08726646259971645, -0.2617993877991494, -0.17453292519943292, -0.5235987755982988, -0.6108652381980153, -0.34906585039886584, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, -0.34906585039886584, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 0.349065850398866, 0.4363323129985825, 0.08726646259971656, -0.17453292519943286, -0.17453292519943286, 8.326672684688674e-17, 0.08726646259971656, 0.349065850398866, 8.326672684688674e-17, -0.34906585039886584, -0.08726646259971639, -0.08726646259971639, 0.08726646259971656, -0.08726646259971639, 0.08726646259971656]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nmZnCERSyHowaEREZh1FuslHRqUd3dyUUCtNOxlGpXEz671sSscaafisf2bnlR43k9tWgqulk1Pe0\nlc/VVsYJ2M5YbWWcAMdaFVVqvl5eXrh165b+65s3b0KlEp4FCwA5OQVVeRuDqVQuyMzMNel7WAox\nx6ouUcPDxQFZAllfdxdHqO+VGLU2W/lcbWWcgO2M1VbGCXCsFW1fniqddn755ZeRkJAAAEhNTYWX\nlxecnZ2r8k+RhDBqRERkHFU68m3ZsiWaNGmCAQMGQCaTYfr06cauiyxUWdToFnJyi+Du4gg/75qM\nGhERVUKVr/mOHz/emHWQRMjt7BAW7I2+nevjTl4xajg78IiXiKiSuKoRVYlDNTm83JVil0FEJEm8\nvSQREZGZsfkSERGZGZsvERGRmbH5EhERmRmbLxERkZmx+RIREZkZmy8REZGZsfkSERGZmUzL1dCJ\niIjMike+REREZsbmS0REZGZsvkRERGbG5ktERGRmbL5ERERmxuZLRERkZpJYz3fevHlITk5GaWkp\nhg0bhqZNm2LChAlQq9VQqVSYP38+7O3tH3rNZ599hjNnzkAmk2Hy5Mlo1qyZSNVXjtBYJ02ahNLS\nUigUCsyfPx8qlUq/fVJSEkaPHo2GDRsCALy9vTFt2jSxyjfYv8e5f/9+pKamws3NDQAQERGBgICA\nh15jLZ/p9u3bkZOTAwC4ffs2WrRogVmzZum337hxIxYtWoTnnnsOANC+fXsMHz5clNoNVVhYiKio\nKGRlZaG4uBgjRoxAo0aNrHI/LW+s1rifCo01ISHB6vZVoXFu2rTJtPup1sIdPXpU++6772q1Wq02\nOztb27lzZ21UVJR2x44dWq1Wq/3888+1P/3000OvSUpK0r733ntarVarTUtL07755pvmLbqKhMY6\nYcIEbXx8vFar1WpjYmK0c+fOfeg1x44d00ZGRpq91ichNM6JEydq9+/fX+5rrOkzfVBUVJT2zJkz\nDz22YcMG7Zw5c8xVolHEx8drly9frtVqtdqrV69qu3btarX7qdBYrXE/1WqFx2qN+6rQOB9kiv3U\n4o9827Rpo/+tydXVFYWFhUhKSsLMmTMBAIGBgVi1ahXCwsL0rzl69CiCg4MBAPXr18edO3eQl5cH\nZ2dn8w+gEoTGOn36dDg4OAAA3N3dkZqaKmaJRiE0TrVa/djXWNNnqlarIZfLcfnyZeTm5lr8UYEh\nunfvrv97eno6atWqZbX7qdBYrXE/BYTHWhEpfq6PG6ep9lOLv+Yrl8uhVCoBAHFxcejUqRMKCwv1\np688PT2RmZn50Gtu3boFd3d3/dceHh6PbGOJhMaqVCohl8uhVquxZs0a9OzZ85HXpaWl4f3338fA\ngQNx5MgRc5ddaULjlMvliImJQXh4OMaOHYvs7OyHXmNNn6lcLgcA/PDDDxg0aJDg644fP46IiAi8\n9dZbOH/+vNnqfVIDBgzA+PHjMXnyZKvdT3UeHKs17qcPenCsAKxyXwUeHSdgwv20ysfMZrZnzx5t\nv379tHfv3tW2a9dO//hff/2lDQ0NfWjbqVOnavfs2aP/esCAAdrLly+brdYn9eBYtVqttrS0VDtu\n3Djt4sWLH9n2xo0b2vj4eK1Go9H+73//03bu3FlbXFxs7pKr5MFx/vLLL9rz589rtVqtdtmyZdqZ\nM2c+tK21fabFxcXaHj16CG6blpamTUxM1Gq1Wu2pU6fK3c5SnT9/XtujRw9t27Zt9Y9Z436q1ZaN\nVaPRWO1+qqMbq7Xvqw9+pqbcTy3+yBcADh8+jKVLl2LFihVwcXGBUqlEUVERACAjIwNeXl4Pbe/l\n5YVbt27pv7558+ZDkx8s2b/HCgCTJk3C888/j5EjRz6yfa1atdC9e3fIZDI899xzqFmzJjIyMsxd\ndqX9e5z+/v7w8fEBAAQFBeHSpUsPbW9tn+mJEyfKPY1Vv359/QQWPz8/ZGdnV3haXmwpKSlIT08H\nAPj4+ECtVsPJyckq91OhsWZnZ1vlfio0Vm9vb6vbV8v7TE25n1p8883NzcW8efOwbNky/ey69u3b\nIyEhAQCwe/dudOzY8aHXvPzyy/rnU1NT4eXlZdHXG3SExrp161ZUq1YNo0aNEnzN1q1bsXLlSgBA\nZmYmsrKyDLouIyahcUZGRuLKlSsA7s8M1c0K1bGmzxQAzp07h0aNGgm+ZsWKFdi+fTsA4NKlS/Dw\n8NCfqrZUJ0+exKpVqwDcP+1YUFBgtfup0FiPHDlidfspIDzW6Ohoq9tXhcbp7u5u0v3U4lc1io2N\nxeLFi1GvXj39Y3PmzMHUqVNRXFyM2rVrY/bs2ahWrRrGjh2L2bNnw9HREQsWLMDJkychk8kwffr0\ncv8HWhKhsV6/fh2urq76b9769etjxowZ+rGWlpZi/PjxuHv3LkpKSjBy5Eh07txZrCEYRGicffr0\nQUxMDKpXrw6lUonZs2fD09PTKj/TuXPnYuXKlWjVqtVDEz2GDx+Ob775Bjdu3MBHH30ErVaL0tJS\nSUQ1ioqKMGXKFKSnp6OoqAgjR46Er68vJk6caHX7qdBYly9fjuLiYqvaTwHhsSqVSsyfP9+q9lWh\ncQYFBWHWrFkm208tvhR5WXAAAABCSURBVPkSERFZG4s/7UxERGRt2HyJiIjMjM2XiIjIzNh8iYiI\nzIzNl4iIyMzYfImIiMyMzZeIiMjM2HyJiIjM7P8B1y6QuU0LIwIAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f068d871150>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "aZmr5dLrWWCh",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "YXABVSV3WWBW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1438
        },
        "outputId": "306afebe-f9a2-441b-9f67-62e49be45d58"
      },
      "cell_type": "code",
      "source": [
        "for i in cost_map:\n",
        "  print(i)"
      ],
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 58 57 56\n",
            " 55 54 53 52 51 50 49 48 47 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 58 57 56 55\n",
            " 54 53 52 51 50 49 48 47 46 47 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 58 57 56 55 54\n",
            " 53 52 51 50 49 48 47 46 45 46 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 46 45 44 45 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 45 44 43 44 45 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 42 43 44 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 39 40 41 42 43 44 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 38 39 40 41 42 43 -1 -1 -1 -1]\n",
            "[-1 -1 11 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n",
            " 31 32 33 34 35 36 37 38 39 40 41 42 -1 -1 -1 -1]\n",
            "[-1 -1 10  9 10 11 12 13 14 15 16 17 18 19 20 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1  9  8  9 10 11 12 13 14 15 16 17 18 19 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1  8  7  8  9 10 11 12 13 14 15 16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1  7  6  7  8  9 10 11 12 13 14 15 16 17 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1  6  5  6  7  8  9 10 11 12 13 14 15 16 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1  5  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n",
            " 25 26 27 28 29 30 31 32 33 34 35 36 37 38 -1 -1]\n",
            "[-1 -1  4  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
            " 24 25 26 27 28 29 30 31 32 33 34 35 36 37 -1 -1]\n",
            "[-1 -1  3  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n",
            " 23 24 25 26 27 28 29 30 31 32 33 34 35 36 -1 -1]\n",
            "[-1 -1  2  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21\n",
            " 22 23 24 25 26 27 28 29 30 31 32 33 34 35 -1 -1]\n",
            "[-1 -1  1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n",
            " 21 22 23 24 25 26 27 28 29 30 31 32 33 34 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "7wfYTJGLXLp2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 132
        },
        "outputId": "58b63831-468a-4b59-f055-379a98e512b0"
      },
      "cell_type": "code",
      "source": [
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 50 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 49 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 48 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 47 48 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 46 47 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 45 46 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 44 45 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 43 44 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 43 42 41 42 43 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 42 41 40 41 42 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 39 40 41 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 36 37 38 39 40 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 35 36 37 38 39 -1 -1]\n",
        "[-1 -1  5  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 -1 -1]\n",
        "[-1 -1  4  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 -1 -1]\n",
        "[-1 -1  3  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 -1 -1]\n",
        "[-1 -1  2  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 -1 -1]\n",
        "[-1 -1  1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]"
      ],
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-159-f431e2cf19df>\"\u001b[0;36m, line \u001b[0;32m20\u001b[0m\n\u001b[0;31m    [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 -1 -1 -1 -1]\u001b[0m\n\u001b[0m                                                                     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "metadata": {
        "id": "quGo83MYePnj",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 58 57 56 55 54 53 52 51 50 49 48 47 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 58 57 56 55 54 53 52 51 50 49 48 47 46 47 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 58 57 56 55 54 53 52 51 50 49 48 47 46 45 46 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 46 45 44 45 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 45 44 43 44 45 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 42 43 44 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 39 40 41 42 43 44 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 38 39 40 41 42 43 -1 -1 -1 -1]\n",
        "[-1 -1 11 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 -1 -1 -1 -1]\n",
        "[-1 -1 10  9 10 11 12 13 14 15 16 17 18 19 20 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1  9  8  9 10 11 12 13 14 15 16 17 18 19 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1  8  7  8  9 10 11 12 13 14 15 16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1  7  6  7  8  9 10 11 12 13 14 15 16 17 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1  6  5  6  7  8  9 10 11 12 13 14 15 16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1  5  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 -1 -1]\n",
        "[-1 -1  4  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 -1 -1]\n",
        "[-1 -1  3  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 -1 -1]\n",
        "[-1 -1  2  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 -1 -1]\n",
        "[-1 -1  1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
        "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "eTYGet7FXRgX",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}