{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/HYB-A_STAR-EFFICIENT%20V1.0)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5.0*np.pi/180\n",
        "LENGTH=4.0\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 0.5\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "value_map = np.array([[1000 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal,speed):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    DT=1.0/speed\n",
        "    for delta in delta_angles:\n",
        "        omega  = (speed / LENGTH) * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + (omega * DT))\n",
        "        dX = speed * np.cos(theta2) * DT\n",
        "        dY = speed * np.sin(theta2) * DT\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2) \n",
        "        h2=value_map[idx(x2)][idx(y2)]+arc_cost\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHK A STAR VEHICLE:\n",
        "def A_vehicle_is_safe(vehicle_point_A,add_value,grid):\n",
        "  vp=vehicle_point_A.input_co_ordinates+add_value\n",
        "  for point in vp:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "    \n",
        "    \n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_on_x and y>=0 and y<grid_on_y)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "### BUILDS THE COST MAP - Here the current state is the goal\n",
        "def build_cost_map(current_state,goal,grid):\n",
        "  expand_grid = [[' ' for x in range(grid_on_x)] for y in range(grid_on_y)]\n",
        "  expand_grid[current_state.x][current_state.y]='*'\n",
        "  open_list = []\n",
        "  is_goal_attained=False\n",
        "  open_list.append(current_state)\n",
        "  #IMPORTANT\n",
        "  value_map[current_state.x][current_state.y]=0\n",
        "  while(len(open_list)>0):\n",
        "    old_state=open_list.pop(0)\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL IS REACHABLE!\")\n",
        "      \n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and expand_grid[nxt_node[0]][nxt_node[1]]!='*'):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,0,0,0)\n",
        "            open_list.append(new_state)\n",
        "            expand_grid[nxt_node[0]][nxt_node[1]]='*'\n",
        "            value_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "  return is_goal_attained\n",
        "            \n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object,speed):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal,speed):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal,vehicle_pt_obj_act):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  Theta=[]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj_act,[X[i],Y[i]], Theta[i])\n",
        "    rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    revI=rev[:4]\n",
        "    revL=rev[4:]\n",
        "    revF=np.concatenate([revI,revL[::-1]])\n",
        "    l=np.append(revF,[revF[0]],axis=0)\n",
        "    for i in l:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "  print([np.round(p.steer*180/np.pi,2) for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()\n",
        "  \n",
        "### PUT OBSTACLES:\n",
        "def put_obstacles(X_list,Y_list,grid):\n",
        "  if(len(X_list)>0):\n",
        "    for i in  X_list:\n",
        "      x_XO=[]\n",
        "      x_YO=[]\n",
        "      for k in range(i[1],i[2]):\n",
        "        x_XO.append(i[0])\n",
        "        x_YO.append(k)\n",
        "        grid[i[0]][k]=1\n",
        "      plt.scatter(x_XO,x_YO)\n",
        "  if(len(Y_list)>0):\n",
        "    for i in Y_list:\n",
        "      y_XO=[]\n",
        "      y_YO=[]\n",
        "      for k in range(i[1],i[2]):\n",
        "        y_XO.append(i[0])\n",
        "        y_YO.append(k)\n",
        "        grid[k][i[0]]=1\n",
        "      plt.scatter(y_YO,y_XO)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "T79sHE8tcsS-",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def search(start,goal_node,present_heading,grid,speed):\n",
        "  vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj_actual,start,present_heading)\n",
        "  current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)\n",
        "  if(build_cost_map(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(start[0],start[1]),grid)):\n",
        "    process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj,speed)\n",
        "    if(process_further):\n",
        "      show_path(reconstruct_path(ret_val.came_from,start,ret_val.final),start,[goal_node.x,goal_node.y],vehicle_pt_obj_actual)\n",
        "    else:\n",
        "      print(\"GOAL CANT BE REACHED!!\")\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "POtpvXrc0z8t",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "outputId": "e9f854d6-6f16-4416-aea9-535e19b96f91"
      },
      "cell_type": "code",
      "source": [
        "put_obstacles([[15,0,15],[10,0,10],[27,0,32],[60,15,35]],[],GRID_TEST)\n",
        "### A STAR VEHICLE POINTS\n",
        "vehicle_point_A=vehicle_points(np.array([[0,2],[0,1],[0,-1],[0,-2],[1,0],[2,0],[-1,0],[-2,0]]),[0,0])\n",
        "### HYBRID VEHICLE POINTS\n",
        "vehicle_pt_obj_actual = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "\n",
        "## CALL SEARCH\n",
        "search([40,40],goal(4,3),np.pi/4,GRID_TEST,60)"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "GOAL IS REACHABLE!\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.611163139343\n",
            "[40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 35.0, 40.0, 40.0, 40.0, 30.0, 10.0, -10.0, -0.0, 20.0, 40.0, 25.0, 5.0, -10.0, -30.0, -40.0, -20.0, -5.0, -25.0, -35.0, -15.0, -5.0, 15.0, 35.0, 35.0, 15.0, -5.0, -5.0, -0.0, -0.0, -0.0, -10.0, 10.0, 5.0, -0.0, -5.0, 10.0, -10.0, -0.0, -0.0, 5.0, -5.0, 5.0, -5.0, 5.0, -10.0, -30.0, -40.0, -25.0, -10.0, 10.0, 30.0, 40.0, 40.0, 40.0, 40.0, 40.0, 20.0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f69cafd5b50>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}