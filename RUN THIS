{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/RUN%20THIS)"
      ]
    },
    {
      "metadata": {
        "id": "fKivnmpsQ1xU",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "NUM_THETA_CELLS =20\n",
        "X = 1\n",
        "_ = 0\n",
        "free_space=0\n",
        "MAZE = [\n",
        "    [_,X,X,_,_,_,_,_,_,_,X,X,_,_,_,_,],\n",
        "    [_,X,X,_,_,_,_,_,_,X,X,_,_,_,_,_,],\n",
        "    [_,X,X,_,_,_,_,_,X,X,_,_,_,_,_,_,],\n",
        "    [_,X,X,_,_,_,_,X,X,_,_,_,X,X,X,_,],\n",
        "    [_,X,X,_,_,_,X,X,_,_,_,X,X,X,_,_,],\n",
        "    [_,X,X,_,_,X,X,_,_,_,X,X,X,_,_,_,],\n",
        "    [_,X,X,_,X,X,_,_,_,X,X,X,_,_,_,_,],\n",
        "    [_,X,X,X,X,_,_,_,X,X,X,_,_,_,_,_,],\n",
        "    [_,X,X,X,_,_,_,X,X,X,_,_,_,_,_,_,],\n",
        "    [_,X,X,_,_,_,X,X,X,_,_,X,X,X,X,X,],\n",
        "    [_,X,_,_,_,X,X,X,_,_,X,X,X,X,X,X,],\n",
        "    [_,_,_,_,X,X,X,_,_,X,X,X,X,X,X,X,],\n",
        "    [_,_,_,X,X,X,_,_,X,X,X,X,X,X,X,X,],\n",
        "    [_,_,X,X,X,_,_,X,X,X,X,X,X,X,X,X,],\n",
        "    [_,X,X,X,_,_,_,_,_,_,_,_,_,_,_,_,],\n",
        "    [X,X,X,_,_,_,_,_,_,_,_,_,_,_,_,_,],\n",
        "]\n",
        "\n",
        "\n",
        "GRID = MAZE # change to MAZE for testing\n",
        "grid_x_m = len(GRID)\n",
        "grid_y_m = len(GRID[0])\n",
        "EMPTY = [[_ for i in range(grid_x_m)] for j in range(grid_y_m)]\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 1.0\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "\n",
        "START = (0.0,0.0,0.0)\n",
        "GOAL = (len(GRID)-1, len(GRID[0])-1)\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "koQlIp8upSEk",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "NUM_THETA_CELLS =20\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "NUMBERS_OF_STEERS=7\n",
        "STEER_OFFSET=5*np.pi/180\n",
        "DT=1\n",
        "SPEED=1\n",
        "LENGTH=1\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 1.0\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "7jsm6I6uP6vF",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "       "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "1MV4Nf2IpjJk",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    for delta in delta_angles:\n",
        "        #delta  = np.pi / 180.0 * delta\n",
        "        omega  = SPEED / LENGTH * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + omega * DT)\n",
        "        dX = SPEED * np.cos(theta2) * DT\n",
        "        dY = SPEED * np.sin(theta2) * DT\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        h2     = euclidean_distance([x2,y2],[goal.x,goal.y])\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), -np.sin(angle_of_rotation)], \n",
        "                                [np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_x_m and y>=0 and y<grid_y_m)\n",
        "\n",
        "##IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "SWsHm2rm6Mhe",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object):\n",
        "  \n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  \n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      print('GOAL REACHED')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      return ret_path\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return ret_path\n",
        "      \n",
        "  \n",
        "  \n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        #print([idx(current.x), idx(current.y)],[idx(start[0]), idx(start[1])])\n",
        "        #print([idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])])\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "def show_path(path, start, goal):\n",
        "  XO=[]\n",
        "  YO=[]\n",
        "  #     for i in range(len(GRID)):\n",
        "  #       for j in range(len(GRID[0])):\n",
        "  #           if(GRID[i][j]!=0):\n",
        "  #             XO.append(i)\n",
        "  #             YO.append(j)\n",
        "  #     plt.scatter(XO,YO,color='red')\n",
        "  for i in range(yg):\n",
        "    XO.append(xg)\n",
        "    YO.append(i)\n",
        "  plt.scatter(XO,YO)\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  #X.append(start[0])\n",
        "  #Y.append(start[1])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()\n",
        "\n",
        "xg,yg=20,25\n",
        "for i in range(yg):\n",
        "  GRID_TEST[xg][i]=1"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "yq2OB3RV6Pdr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "outputId": "d285ce8d-58e9-4268-99e9-aa2c9bf0e45e"
      },
      "cell_type": "code",
      "source": [
        "\n",
        "STA=[3,3]\n",
        "vehicle_pt_obj = vehicle_points( np.array([[3.5,1.5],[3.5,2.5],[3.5,3.5],[3.5,4.5],[4.5,1.5],[4.5,2.5],[4.5,3.5],[4.5,4.5]]),STA )\n",
        "# vehicle_pt_obj = vehicle_points( np.array([[3.5,1.5],[3.5,2.5],[3.5,3.5],[3.5,4.5],[4.5,1.5],[4.5,2.5],[4.5,3.5],[4.5,4.5]]),STA )\n",
        "# vehicle_pt_obj = vehicle_points( np.array([[3.5,1.5],[3.5,2.5],[3.5,3.5],[3.5,4.5],[4.5,1.5],[4.5,2.5],[4.5,3.5],[4.5,4.5]]),STA )\n",
        "# vehicle_pt_obj = vehicle_points( np.array([[3.5,1.5],[3.5,2.5],[3.5,3.5],[3.5,4.5],[4.5,1.5],[4.5,2.5],[4.5,3.5],[4.5,4.5]]),STA )\n",
        "current_state = state(STA[0], STA[1], 0, 0.0, 0.0, 0.0,0.0)\n",
        "goal_node = goal( 23,23)\n",
        "ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj)\n",
        "show_path(reconstruct_path(ret_val.came_from,STA,ret_val.final),STA,[goal_node.x,goal_node.y])\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "              \n",
        "              "
      ],
      "execution_count": 422,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "GOAL REACHED\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nfnFns9kICQmhYcOGNGrU6E/3OcPvX8eOHQkICKBWrVrMmzePN954gzFjxuT5/Y68LdLT09mzZw/j\nxo276r57772XoKAgWrRowd69exkxYgSffvqp/YfMxR//zv7x3Bpne278NS+c7bnhEHu+AFu2bGHO\nnDnExMTg7+//p/ueeOIJypYti6enJ82aNePQoUOGpry2ChUq0L59e9zc3KhSpQrlypUjPj4egPLl\ny5OQkJDzvfHx8X/rcJy9xcXFUa9evatu79atG6VKlcLX15eGDRs67Lb4I19fX1JTU4Hc/93/um3O\nnDlz1R6/owgLC6Nq1aoMGDDgqvuu9fvnKBo1akStWrWA30+k/OvvjzNti127duV5uLlatWo5J5LV\nq1ePxMREh3gr7a9/Z531uZFbXjjbc8Mhwjc5OZmoqCjmzp2bcxbkH+/r3bs36enpwO+/8NlnrDma\nVatWMX/+fOD3w8znzp3LOSu7cuXKpKSk8Ntvv5GZmckXX3xBkyZNTI6bp/j4eEqVKnXVq8KjR48y\ndOhQLMsiMzOTb7/91mG3xR81btyYDRs2ALBx40aaNm36p/ubNGmSc/+BAwcoX748fn5+dp8zP6tW\nrcLLy4tXXnklz/vz+v1zFAMHDuT48ePA7y/w/vr74yzbAmDfvn3ceeedud4XExPD6tWrgd/PlA4K\nCjL+qYDc/s4643Mjt3U443PDIa5qFBsby6xZs7jttttybnvwwQepWbMmbdu2ZfHixXz88ceUKFGC\nu+66i9GjR+Pm5mZw4tylpKQwbNgwLl68SEZGBgMGDODcuXP4+/vTtm1bdu3aRXR0NAAPPfQQvXv3\nNjxx7vbv38/06dN5++23AZg3bx4NGjSgXr16TJ48mR07duDu7k6rVq0c4uMTf7R//34iIyM5ceIE\nnp6eVKhQgejoaEJDQ0lLS6NSpUpERETg5eXF4MGDiYiIwMfHh+joaHbv3o2bmxtjx47N84+qyXWc\nO3eOEiVK5Pzxq1atGuPGjctZR2Zm5lW/f82bN3eoNfTo0YN58+ZRsmRJfH19iYiIoGzZsk63LWbN\nmsWsWbO4//77ad++fc739uvXj7feeovTp08zfPjwnBeqjvARndz+zk6aNIlRo0Y51XMjt3WcPHmS\n0qVLO81zAxwkfEVERIoThzjsLCIiUpwofEVEROxM4SsiImJnCl8RERE7U/iKiIjYmcJXRETEzhS+\nIiIidqbwFRERsbP/BwP2WdTJO4xPAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f25d5fe5250>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "YFEpSyILEouR",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}