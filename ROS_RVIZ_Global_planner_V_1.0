{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/ROS_RVIZ_Global_planner_V_1.0)"
      ]
    },
    {
      "metadata": {
        "id": "9hYpOVJATfuB",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "#!/usr/bin/env python\n",
        "\n",
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "import rospy\n",
        "import tf\n",
        "from geometry_msgs.msg import Twist,PoseStamped,Pose\n",
        "from nav_msgs.msg import OccupancyGrid,MapMetaData,Path\n",
        "\n",
        "cf=[-50.5,-50.5]\n",
        "fv=[0,0]\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5.0*np.pi/180\n",
        "LENGTH=4.0\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n",
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "\n",
        "class values:\n",
        "  def __init__(self,grid_on_x,grid_on_y,GRID_TEST,value_map):\n",
        "    self.grid_on_x=grid_on_x\n",
        "    self.grid_on_y=grid_on_y\n",
        "    self.GRID_TEST=GRID_TEST\n",
        "    self.value_map=value_map\n",
        "    self.is_processing=True\n",
        "    # self.grid_x_m=grid_x_m\n",
        "    # self.grid_y_m=grid_y_m\n",
        "\n",
        "    \n",
        "class twist_commands:\n",
        "  def __init__(self,x,y,theta,steer,speed):\n",
        "    self.vx=speed*np.cos(theta)\n",
        "    self.vy=speed*np.sin(theta)\n",
        "    self.omega= (speed / LENGTH) * np.tan(steer)\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### INITIALIZE INPUTS\n",
        "get_value= values(1,1,np.array([]),np.array([]))\n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal,speed):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    DT=1.0/speed\n",
        "    for delta in delta_angles:\n",
        "        omega  = (speed / LENGTH) * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + (omega * DT))\n",
        "        dX = speed * np.cos(theta2) * DT\n",
        "        dY = speed * np.sin(theta2) * DT\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2) \n",
        "        h2=get_value.value_map[idx(x2)][idx(y2)]+arc_cost\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "\n",
        "### TRANSFORM CO-ORDINATES \n",
        "def transform_co_ordinates(current_frame, frame_to_be_viewed,point_to_be_transformed):\n",
        "    displaced_matrix = np.array([frame_to_be_viewed[0]-current_frame[0],frame_to_be_viewed[1]-current_frame[1]])\n",
        "    transformed_matrix=np.add(np.array(point_to_be_transformed),displaced_matrix)\n",
        "    return transformed_matrix\n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHK A STAR VEHICLE:\n",
        "def A_vehicle_is_safe(vehicle_point_A,add_value,grid):\n",
        "  vp=vehicle_point_A.input_co_ordinates+add_value\n",
        "  for point in vp:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "    \n",
        "    \n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<get_value.grid_on_x and y>=0 and y<get_value.grid_on_y)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "\n",
        "### BUILDS THE COST MAP\n",
        "def build_cost_map(current_state,goal,grid):\n",
        "  print('f',current_state.x,current_state.y)\n",
        "  expand_grid = [[' ' for x in range(get_value.grid_on_x)] for y in range(get_value.grid_on_y)]\n",
        "  print(len(expand_grid))\n",
        "  expand_grid[current_state.x][current_state.y]='*'\n",
        "  \n",
        "  open_list = []\n",
        "  is_goal_attained=False\n",
        "  open_list.append(current_state)\n",
        "  #IMPORTANT\n",
        "  get_value.value_map[current_state.x][current_state.y]=0\n",
        "  while(len(open_list)>0):\n",
        "    old_state=open_list.pop(0)\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL IS REACHABLE!\")\n",
        "      \n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and expand_grid[nxt_node[0]][nxt_node[1]]!='*'):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,0,0,0)\n",
        "            open_list.append(new_state)\n",
        "            expand_grid[nxt_node[0]][nxt_node[1]]='*'\n",
        "            get_value.value_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "  return is_goal_attained\n",
        "            \n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object,speed):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(get_value.grid_on_x)] for y in range(get_value.grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(get_value.grid_on_x)] for y in range(get_value.grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal,speed):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal,vehicle_pt_obj_act):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]#ASTAR\n",
        "  Theta=[]\n",
        "  #path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj_act,[X[i],Y[i]], Theta[i])\n",
        "    rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    revI=rev[:4]\n",
        "    revL=rev[4:]\n",
        "    revF=np.concatenate([revI,revL[::-1]])\n",
        "    l=np.append(revF,[revF[0]],axis=0)\n",
        "    for i in l:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "  print([np.round(p.steer*180/np.pi,2) for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.scatter([0],[0])\n",
        "  plt.scatter([99],[99])\n",
        "  ##############################\n",
        "  s=[]\n",
        "  t=[]\n",
        "  for v in range(len(get_value.GRID_TEST)):\n",
        "    for w in range(len(get_value.GRID_TEST[0])):\n",
        "      if(get_value.GRID_TEST[v][w]==1):\n",
        "        s.append(v)\n",
        "        t.append(w)\n",
        "  plt.scatter(v,w)\n",
        "  plt.show()\n",
        "  \n",
        "### PUT OBSTACLES:\n",
        "def put_obstacles(X_list,Y_list,grid):\n",
        "  if(len(X_list)>0):\n",
        "    for i in  X_list:\n",
        "      x_XO=[]\n",
        "      x_YO=[]\n",
        "      for k in range(i[1],i[2]):\n",
        "        x_XO.append(i[0])\n",
        "        x_YO.append(k)\n",
        "        grid[i[0]][k]=1\n",
        "      plt.scatter(x_XO,x_YO)\n",
        "  if(len(Y_list)>0):\n",
        "    for i in Y_list:\n",
        "      y_XO=[]\n",
        "      y_YO=[]\n",
        "      for k in range(i[1],i[2]):\n",
        "        y_XO.append(i[0])\n",
        "        y_YO.append(k)\n",
        "        grid[k][i[0]]=1\n",
        "      plt.scatter(y_YO,y_XO)\n",
        "      \n",
        "      \n",
        "      \n",
        "def build_commands(path,speed):\n",
        "  ret_list=[]\n",
        "  #ret_list+=[twist_commands(p.x,p.y,p.theta,p.steer,speed) for p in path]\n",
        "  #print('f',len(ret_list))\n",
        "  return ret_list\n",
        "\n",
        "def search(start,goal_node,present_heading,grid,speed):\n",
        "  #print(get_value.grid_on_x)\n",
        "  vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj_actual,start,present_heading)\n",
        "  current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)\n",
        "  if(build_cost_map(state(idx(goal_node.x),idx(goal_node.y),0,0,0,0,0),goal(idx(start[0]),idx(start[1])),grid)):\n",
        "    process_further,ret_val=Hybrid_A_Star(get_value.GRID_TEST,current_state,goal_node,vehicle_pt_obj,speed)\n",
        "    if(process_further):\n",
        "      retrieved_path=reconstruct_path(ret_val.came_from,start,ret_val.final)\n",
        "      retrieved_path.reverse()\n",
        "      print('PATH',len(retrieved_path))\n",
        "      for i in retrieved_path:\n",
        "        print(transform_co_ordinates(fv,cf,[i.x,i.y]))\n",
        "      #ret_val=build_commands(retrieved_path,speed)\n",
        "\n",
        "      show_path(retrieved_path,start,[goal_node.x,goal_node.y],vehicle_pt_obj_actual)\n",
        "      return retrieved_path\n",
        "    else:\n",
        "      print(\"GOAL CANT BE REACHED!!\")\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "\n",
        "#put_obstacles([[24,0,25],[26,0,25],[27,0,25],[60,15,35]],[],GRID_TEST)\n",
        "### A STAR VEHICLE POINTS\n",
        "#vehicle_point_A=vehicle_points(np.array([[0,1],[0,-1],[1,0],[-1,0]]),[0,0])\n",
        "vehicle_point_A=vehicle_points(np.array([[0,2],[0,1],[0,-1],[0,-2],[1,0],[2,0],[-1,0],[-2,0]]),[0,0])\n",
        "### HYBRID VEHICLE POINTS\n",
        "vehicle_pt_obj_actual = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "#vehicle_pt_obj_actual = vehicle_points( np.array([[0.5,1.5],[0.5,2.5],[1.5,1.5],[1.5,2.5]]),[0,2] )\n",
        "\n",
        "## CALL SEARCH\n",
        "\n",
        "#def velocity_control(cmd_list):\n",
        "  \n",
        "  \n",
        "    \n",
        "\n",
        "# def callback():\n",
        "#     #GRID_TEST = np.array(msg.data).reshape((msg.info.height, msg.info.width))\n",
        "    \n",
        "#     comand = search([50,50],goal(57,50),0,GRID_TEST,3)\n",
        "#     print(\"Hello\")\n",
        "#     velocity_control(comand)\n",
        "\n",
        "def feed_map(msg):\n",
        "  if(get_value.is_processing==True):\n",
        "    get_value.is_processing=False\n",
        "    print('Im Feed map')\n",
        "    grid_in=msg.data\n",
        "    grid_x_m=msg.info.width\n",
        "    grid_y_m=msg.info.height\n",
        "    coll_cell_side=msg.info.resolution\n",
        "    get_value.grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side))\n",
        "    print('grid_on_x : ',get_value.grid_on_x)\n",
        "    get_value.grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "    grid_in=np.flipud(np.rot90(np.reshape(grid_in,(grid_x_m,grid_y_m))))\n",
        "    get_value.GRID_TEST = np.remainder(np.abs(grid_in),100)\n",
        "    \n",
        "    get_value.value_map = np.array([[1000 for x in range(get_value.grid_on_x)] for y in range(get_value.grid_on_y)])\n",
        "    rospy.Subscriber('/slam_out_pose', PoseStamped, get_start_point)\n",
        "    # print(GRID_TEST)\n",
        "    # print(value_map)\n",
        "    #print(grid_x_m)\n",
        "    #print(msg.data)\n",
        "\n",
        "    #rospy.logerr(\"Bye\")\n",
        "    #rospy.Subscriber('/slam_out_pose', Twist, feed_start_node)\n",
        "\n",
        "def get_start_point(msg):\n",
        "    #rospy.logerr('hhhhhh')\n",
        "    print('Im get_start_point')\n",
        "    quaternion = (\n",
        "    msg.pose.orientation.x,\n",
        "    msg.pose.orientation.y,\n",
        "    msg.pose.orientation.z,\n",
        "    msg.pose.orientation.w)\n",
        "    euler = tf.transformations.euler_from_quaternion(quaternion)\n",
        "    roll = euler[0]\n",
        "    pitch = euler[1]\n",
        "    yaw = euler[2]\n",
        "    #print(quaternion)\n",
        "    #print(msg.pose.position.x)\n",
        "    #origin=rospy.Subscriber('/map_metadata', MapMetaData, get_origin)\n",
        "    #print(origin)\n",
        "    #x=transform_co_ordinates([])\n",
        "    #print([msg.pose.position.x,msg.pose.position.y,msg.pose.position.z])\n",
        "    transformed_point=transform_co_ordinates(cf,fv,[msg.pose.position.x,msg.pose.position.y])\n",
        "    start_state.x=transformed_point[0]\n",
        "    start_state.y=transformed_point[1]\n",
        "    start_state.theta=yaw\n",
        "    print('start_state',start_state.x,start_state.y,start_state.theta)\n",
        "    goal_point=transform_co_ordinates(cf,fv,[2,-1])\n",
        "    print('goal_point',goal_point)\n",
        "\n",
        "    # ####################################################\n",
        "    s=[]\n",
        "    t=[]\n",
        "    #print(get_value.GRID_TEST)\n",
        "    for v in range(len(get_value.GRID_TEST)):\n",
        "      for w in range(len(get_value.GRID_TEST[0])):\n",
        "        if(get_value.GRID_TEST[v][w]==1):\n",
        "          s.append(v)\n",
        "          t.append(w)\n",
        "    plt.scatter(s,t)\n",
        "    plt.scatter([start_state.x],[start_state.y],color='red')\n",
        "    plt.scatter([goal_point[0]],[goal_point[1]],color='green')\n",
        "    plt.show()\n",
        "    ####################################################\n",
        "    path_returned=search([start_state.x,start_state.y],goal(goal_point[0],goal_point[1]),start_state.theta,get_value.GRID_TEST,3)\n",
        "    print()\n",
        "    path_pub=Path()\n",
        "    path_pub.header.frame_id='map'\n",
        "    for i in range(len(path_returned)):#\n",
        "      new_pose=PoseStamped()\n",
        "      path_now=path_returned[i]\n",
        "      pos_on_map=transform_co_ordinates(fv,cf,[path_now.x,path_now.y])\n",
        "      quaternion_map=tf.transformations.quaternion_from_euler(0.0, 0.0, path_now.theta)\n",
        "      new_pose.header.seq=i+1\n",
        "      new_pose.header.frame_id='map'\n",
        "      new_pose.pose.position.x=pos_on_map[0]\n",
        "      new_pose.pose.position.y=pos_on_map[1]\n",
        "      new_pose.pose.orientation.x=quaternion_map[0]\n",
        "      new_pose.pose.orientation.y=quaternion_map[1]\n",
        "      new_pose.pose.orientation.z=quaternion_map[2]\n",
        "      new_pose.pose.orientation.w=quaternion_map[3]\n",
        "      path_pub.poses.append(new_pose)\n",
        "      #print(pos_on_map[0],pos_on_map[1],quaternion_map[0],quaternion_map[1],quaternion_map[2],quaternion_map[3])\n",
        "    \n",
        "    #return start_state\n",
        "    pub = rospy.Publisher('trajectory_generator', Path, queue_size=50)\n",
        "    rate = rospy.Rate(1)\n",
        "    while not rospy.is_shutdown():\n",
        "        #get_value.is_processing=True\n",
        "        rospy.loginfo('Im publishing')\n",
        "        pub.publish(path_pub)\n",
        "        rate.sleep()\n",
        "  # return \n",
        "\n",
        "\n",
        "start_state=state(0,0,0,0,0,0,0)\n",
        "if __name__== \"__main__\":\n",
        "    rospy.init_node( 'astar')\n",
        "    print('Main')  \n",
        "    \n",
        "    rospy.Subscriber('/map', OccupancyGrid, feed_map)\n",
        "    #print(grid_on_x)\n",
        "    get_value.grid_on_x=1\n",
        "    get_value.grid_on_y=1\n",
        "    get_value.GRID_TEST=np.array([])\n",
        "    get_value.value_map=np.array([])\n",
        "    rospy.spin()\n",
        "    #print(type(sub))\n",
        "    #rospy.spin()\n",
        "    #cmd_list = search([46,56],goal(57,50),np.pi,GRID_TEST,3)\n",
        "    # while not rospy.is_shutdown():\n",
        "    #   for st in cmd_list:\n",
        "    #     print(\"I m Here!!!\")\n",
        "    #     twist = Twist()\n",
        "    #     twist.linear.x = st.vx\n",
        "    #     twist.linear.y = 0\n",
        "    #     twist.linear.z = 0\n",
        "    #     twist.angular.x = 0\n",
        "    #     twist.angular.y = 0\n",
        "    #     twist.angular.z = st.omega\n",
        "    #     print('VX',st.vx)\n",
        "    #     velocity_publisher.publish(twist)\n",
        "    #     rate.sleep()  \n",
        "    #   break\n",
        "    # print('end')\n",
        "    # rospy.spin()\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}