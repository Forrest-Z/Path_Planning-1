{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/COMPLETE%20HYBRID%20A%20STAR%20ALGORITHM)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5*np.pi/180\n",
        "DT=1\n",
        "SPEED=1\n",
        "LENGTH=1\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 1.0\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "closed_A_star=np.array([[free_space for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "cost_map = np.array([[-1 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    for delta in delta_angles:\n",
        "        omega  = SPEED / LENGTH * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + omega * DT)\n",
        "        dX = SPEED * np.cos(current_state.theta) * DT\n",
        "        dY = SPEED * np.sin(current_state.theta) * DT\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2)         \n",
        "        #print(arc_cost)\n",
        "        h2     = euclidean_distance([x2,y2],[goal.x,goal.y])+arc_cost\n",
        "        if(cost_map[idx(x2)][idx(y2)]==-1):\n",
        "          h2+=100\n",
        "        else:\n",
        "          h2+=cost_map[idx(x2)][idx(y2)]\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        #jj=np.arctan2(goal.y-y2,goal.x-x2)\n",
        "        #print(['X: ',x2,'Y: ',y2,'ang_goal',normalize_theta(jj)*180/np.pi,'taken_angle',theta2*180/np.pi,'cost:',arc_cost])\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), -np.sin(angle_of_rotation)], \n",
        "                                [np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_x_m and y>=0 and y<grid_y_m)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "\n",
        "### A_STAR SEARCH\n",
        "def A_Star(current_state,goal,grid):\n",
        "  print(\"STARTED A*\")\n",
        "  open_list = []\n",
        "  open_list.append(current_state )\n",
        "  is_goal_attained=False\n",
        "  cost=0\n",
        "  heu=0\n",
        "  closed_A_star[current_state.x][current_state.y]=1\n",
        "  cost_map[current_state.x][current_state.y]=cost\n",
        "  \n",
        "  while(len(open_list)>0):\n",
        "    open_list.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    old_state=open_list.pop(0)\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL REACHED BY A*\")\n",
        "      return is_goal_attained\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and closed_A_star[nxt_node[0]][nxt_node[1]]==0):\n",
        "          g2=old_state.g+1\n",
        "          heu=euclidean_distance([nxt_node[0],nxt_node[1]],[goal.x,goal.y])\n",
        "          new_state=state(nxt_node[0],nxt_node[1],0,g2,g2+heu,heu,0)\n",
        "          open_list.append(new_state)\n",
        "          closed_A_star[nxt_node[0]][nxt_node[1]]=1\n",
        "          cost_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "          #plt.plot([node[0],nxt_node[0]],[node[1],nxt_node[1]])\n",
        "  return is_goal_attained\n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  print([p.steer for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "2exSViITSeqc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "### PUT OBSTACLES:\n",
        "  def put_obstacles(X_list,Y_list,grid):\n",
        "    if(len(X_list)>0):\n",
        "      for i in  X_list:\n",
        "        x_XO=[]\n",
        "        x_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          x_XO.append(i[0])\n",
        "          x_YO.append(k)\n",
        "          grid[i[0]][k]=1\n",
        "        plt.scatter(x_XO,x_YO)\n",
        "    if(len(Y_list)>0):\n",
        "      for i in Y_list:\n",
        "        y_XO=[]\n",
        "        y_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          y_XO.append(i[0])\n",
        "          y_YO.append(k)\n",
        "          grid[k][i[0]]=1\n",
        "        plt.scatter(y_YO,y_XO)\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZbpDvcJDRw3I",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "START=[20,20]\n",
        "goal_node = goal( 37,3)\n",
        "present_heading=np.pi/2\n",
        "vehicle_pt_obj = vehicle_points( np.array([[21.5,18.5],[21.5,19.5],[21.5,20.5],[21.5,21.5]]),START )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,[vehicle_pt_obj.center[0],vehicle_pt_obj.center[1]],present_heading)\n",
        "#print(vehicle_pt_obj.input_co_ordinates)\n",
        "current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "vJQLZcriX_il",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "outputId": "66f6ac3e-d3d1-4993-b679-e5646b90a881"
      },
      "cell_type": "code",
      "source": [
        "put_obstacles([[30,0,17]],[],GRID_TEST)\n",
        "if(A_Star(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(START[0],START[1]),GRID_TEST)):\n",
        "  process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj)\n",
        "  if(process_further):\n",
        "    show_path(reconstruct_path(ret_val.came_from,START,ret_val.final),START,[goal_node.x,goal_node.y])\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "else:\n",
        "  print(\"GOAL CANT BE REACHED!!\")\n"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "STARTED A*\n",
            "GOAL REACHED BY A*\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.699034929276\n",
            "[-0.3490658503988659, -0.6981317007977318, -0.6981317007977318, -0.34906585039886584, -0.08726646259971639, 8.326672684688674e-17, 0.2617993877991495, 0.5235987755982989, 0.43633231299858244, 0.0872664625997165, 2.7755575615628914e-17, -0.3490658503988659, -0.2617993877991494, -0.3490658503988659, -0.2617993877991494, -0.4363323129985824, -0.08726646259971645, 0.0872664625997165, 2.7755575615628914e-17, 2.7755575615628914e-17, 2.7755575615628914e-17, 2.7755575615628914e-17, 2.7755575615628914e-17, 2.7755575615628914e-17, 2.7755575615628914e-17, 2.7755575615628914e-17, 2.7755575615628914e-17, -0.08726646259971645, 0.0872664625997165, 2.7755575615628914e-17, 0.26179938779914946, 2.7755575615628914e-17]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\niIhIYv8PXX0BNJ2GFyYAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f8c2b945a10>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}