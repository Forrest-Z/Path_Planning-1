{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/HYB_A_STAR-EFF%20V_SIMPLE%20TEST)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5.0*np.pi/180\n",
        "LENGTH=4.0\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 100\n",
        "grid_y_m = 100\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 1\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "grid_in=np.arrayn",
        "### FIT ZEROS\n",
        "grid_in=np.reshape(grid_in,(grid_x_m,grid_y_m))\n",
        "GRID_TEST = np.remainder(np.abs(grid_in),100)\n",
        "\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "value_map = np.array([[1000 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal,speed):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    DT=1.0/speed\n",
        "    for delta in delta_angles:\n",
        "        omega  = (speed / LENGTH) * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + (omega * DT))\n",
        "        dX = speed * np.cos(theta2) * DT\n",
        "        dY = speed * np.sin(theta2) * DT\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2) \n",
        "        h2=value_map[idx(x2)][idx(y2)]+arc_cost\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHK A STAR VEHICLE:\n",
        "def A_vehicle_is_safe(vehicle_point_A,add_value,grid):\n",
        "  vp=vehicle_point_A.input_co_ordinates+add_value\n",
        "  for point in vp:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "    \n",
        "    \n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_on_x and y>=0 and y<grid_on_y)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "### BUILDS THE COST MAP - Here the current state is the goal\n",
        "def build_cost_map(current_state,goal,grid):\n",
        "  expand_grid = [[' ' for x in range(grid_on_x)] for y in range(grid_on_y)]\n",
        "  expand_grid[current_state.x][current_state.y]='*'\n",
        "  open_list = []\n",
        "  is_goal_attained=False\n",
        "  open_list.append(current_state)\n",
        "  #IMPORTANT\n",
        "  value_map[current_state.x][current_state.y]=0\n",
        "  while(len(open_list)>0):\n",
        "    old_state=open_list.pop(0)\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL IS REACHABLE!\")\n",
        "      \n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and expand_grid[nxt_node[0]][nxt_node[1]]!='*'):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,0,0,0)\n",
        "            open_list.append(new_state)\n",
        "            expand_grid[nxt_node[0]][nxt_node[1]]='*'\n",
        "            value_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "  return is_goal_attained\n",
        "            \n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object,speed):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal,speed):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal,vehicle_pt_obj_act):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  Theta=[]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj_act,[X[i],Y[i]], Theta[i])\n",
        "    rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    revI=rev[:4]\n",
        "    revL=rev[4:]\n",
        "    revF=np.concatenate([revI,revL[::-1]])\n",
        "    l=np.append(revF,[revF[0]],axis=0)\n",
        "    for i in l:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "  print([np.round(p.steer*180/np.pi,2) for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()\n",
        "  \n",
        "### PUT OBSTACLES:\n",
        "def put_obstacles(X_list,Y_list,grid):\n",
        "  if(len(X_list)>0):\n",
        "    for i in  X_list:\n",
        "      x_XO=[]\n",
        "      x_YO=[]\n",
        "      for k in range(i[1],i[2]):\n",
        "        x_XO.append(i[0])\n",
        "        x_YO.append(k)\n",
        "        grid[i[0]][k]=1\n",
        "      plt.scatter(x_XO,x_YO)\n",
        "  if(len(Y_list)>0):\n",
        "    for i in Y_list:\n",
        "      y_XO=[]\n",
        "      y_YO=[]\n",
        "      for k in range(i[1],i[2]):\n",
        "        y_XO.append(i[0])\n",
        "        y_YO.append(k)\n",
        "        grid[k][i[0]]=1\n",
        "      plt.scatter(y_YO,y_XO)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "T79sHE8tcsS-",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def search(start,goal_node,present_heading,grid,speed):\n",
        "  vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj_actual,start,present_heading)\n",
        "  current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)\n",
        "  if(build_cost_map(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(start[0],start[1]),grid)):\n",
        "    process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj,speed)\n",
        "    if(process_further):\n",
        "      show_path(reconstruct_path(ret_val.came_from,start,ret_val.final),start,[goal_node.x,goal_node.y],vehicle_pt_obj_actual)\n",
        "    else:\n",
        "      print(\"GOAL CANT BE REACHED!!\")\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "POtpvXrc0z8t",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "aa3eda9e-0947-4bf1-e2cf-7ecd8811f857"
      },
      "cell_type": "code",
      "source": [
        "#put_obstacles([[24,0,25],[26,0,25],[27,0,25],[60,15,35]],[],GRID_TEST)\n",
        "### A STAR VEHICLE POINTS\n",
        "vehicle_point_A=vehicle_points(np.array([[0,2],[0,1],[0,-1],[0,-2],[1,0],[2,0],[-1,0],[-2,0]]),[0,0])\n",
        "### HYBRID VEHICLE POINTS\n",
        "vehicle_pt_obj_actual = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "\n",
        "## CALL SEARCH\n",
        "for i in range(GRID_TEST.shape[1]):\n",
        "  for j in range(GRID_TEST.shape[0]):\n",
        "    if(GRID_TEST[i][j]==1):\n",
        "      plt.scatter([i],[j],color='black')\n",
        "      \n",
        "search([40,50],goal(60,60),np.pi,GRID_TEST,60)\n"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "GOAL IS REACHABLE!\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "2.83069086075\n",
            "[-20.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 25.0, 5.0, -15.0, -15.0, -5.0, -10.0, 10.0, 30.0, 40.0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nxmWXXRblFsWPlStXGt/73vcMwzCMvXv3GmeeeaZx8803G0uWLDEMwzD++7//2/i///u/aDYxbtx/\n//3GJZdcYrzyyivqw37au3evcd555xmtra2G2+02Fi1apD7sp+eff9647777DMMwjNraWuP88883\n5s+fb6xbt84wDMP46U9/aixfvjyaTYxZXq/XmD9/vrFo0SLj+eefNwzDOODnz+v1Guedd57h8XiM\n9vZ2Y+7cuUZTU1PY2jEkStYrV65k9uzZABQXF9PS0kJbW1uUWxUfTj75ZB544AEA0tLSaG9vZ/Xq\n1ZxzzjkAzJo1i5UrV0aziXFhx44dbN++nbPOOgtAfdhPK1euZPr06bhcLnJzc7ntttvUh/2UmZlJ\nc3MzAB6Ph4yMDKqqqvqqherDg0tMTOTJJ58kNze377EDff7WrVvHpEmTSE1NJTk5malTp7JmzZqw\ntWNIDMgNDQ1kZmb2bWdlZVFfXx/FFsUPm82Gw+EAYPHixZxxxhm0t7f3lQazs7PVlyG4++67ufnm\nm/u21Yf9U1lZSUdHBz/4wQ+YN28eK1euVB/209y5c6murubcc89l/vz53HTTTaSlpfU9rz48OLvd\nTnJy8j6PHejz19DQQFZWVt9rwj3WDJnvkL/M0N1A++2dd95h8eLFPPPMM5x33nl9j6svD++1117j\n+OOPp6io6IDPqw9D09zczMMPP0x1dTVXX331Pv2mPjy8119/nfz8fJ5++mk2b97MDTfcQGpqat/z\n6sOBO1jfhbtPh8SAnJubS0NDQ992XV0dOTk5UWxRfFmxYgWPPfYYTz31FKmpqTgcDjo6OkhOTsbt\ndu9TxpGvWr58ORUVFSxfvpza2loSExPVh/2UnZ3NCSecgN1uZ/To0TidTmw2m/qwH9asWcOMGTMA\nmDBhAp2dnfj9/r7n1Yf9c6Df4QONNccff3zYjjkkStann346S5cuBWDjxo3k5ubicrmi3Kr40Nra\nyj333MPjjz9ORkYGAKeddlpffy5btoyZM2dGs4kx73/+53945ZVX+NOf/sSll17KD3/4Q/VhP82Y\nMYNVq1YRDAZpamrC5/OpD/tpzJgxrFu3DoCqqiqcTifFxcV88skngPqwvw70+ZsyZQrr16/H4/Hg\n9XpZs2YNJ510UtiOOWRWe7rvvvv45JNPsFgs3HrrrUyYMCHaTYoLL730Eg899BBjx47te+y3v/0t\nixYtorOzk/z8fO666y4SEhKi2Mr48dBDD1FQUMCMGTNYsGCB+rAfXnzxRRYvXgzA9ddfz6RJk9SH\n/eD1elm4cCGNjY34/X5uvPFGcnJy+NWvfkUwGGTKlCnccsst0W5mTNqwYQN33303VVVV2O128vLy\nuO+++7j55pu/8vl7++23efrpp7FYLMyfP58LL7wwbO0YMgOyiIhIPBsSJWsREZF4pwFZREQkBmhA\nFhERiQEakEVERGKABmQREZEYoAFZREQkBmhAFhERiQEakEVERGLA/wf6M0JiBFyoJgAAAABJRU5E\nrkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f6e45eb3090>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "oXegZ6xeMrl7",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "wed71ctEM4mb",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}