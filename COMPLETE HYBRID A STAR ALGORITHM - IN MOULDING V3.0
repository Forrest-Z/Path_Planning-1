{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/COMPLETE%20HYBRID%20A%20STAR%20ALGORITHM%20-%20IN%20MOULDING%20V3.0)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5.0*np.pi/180\n",
        "LENGTH=4.0\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 0.5\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "closed_A_star=np.array([[free_space for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "cost_map = np.array([[-1 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "policy_map = [[' ' for x in range(grid_on_x)] for y in range(grid_on_y)]\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n",
        "policy_mat=['>',]\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal,speed):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    DT=1.0/speed\n",
        "    for delta in delta_angles:\n",
        "        omega  = (speed / LENGTH) * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + (omega * DT))\n",
        "        dX = speed * np.cos(theta2) * DT\n",
        "        dY = speed * np.sin(theta2) * DT\n",
        "        #i=i+1\n",
        "        #print(i,[SPEED,np.cos(theta2),DT,omega,theta2,dX,dY])\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2)         \n",
        "        #print(arc_cost)\n",
        "        h2     = euclidean_distance([x2,y2],[goal.x,goal.y])+arc_cost\n",
        "        if(cost_map[idx(x2)][idx(y2)]==-1):\n",
        "          h2+=100\n",
        "        else:\n",
        "          h2+=cost_map[idx(x2)][idx(y2)]\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        #jj=np.arctan2(goal.y-y2,goal.x-x2)\n",
        "        #print(['X: ',x2,'Y: ',y2,'ang_goal',normalize_theta(jj)*180/np.pi,'taken_angle',theta2*180/np.pi,'cost:',arc_cost])\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHK A STAR VEHICLE:\n",
        "def A_vehicle_is_safe(vehicle_point_A,add_value,grid):\n",
        "  vp=vehicle_point_A.input_co_ordinates+add_value\n",
        "  for point in vp:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      #print('False',add_value)\n",
        "      return False\n",
        "  #('True',add_value)\n",
        "  return True\n",
        "    \n",
        "    \n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_on_x and y>=0 and y<grid_on_y)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "\n",
        "### A_STAR SEARCH\n",
        "def A_Star(current_state,goal,grid):\n",
        "  vehicle_point_A=vehicle_points(np.array([[0,2],[0,1],[0,-1],[0,-2],[1,0],[2,0],[-1,0],[-2,0]]),[0,0])\n",
        "  print(\"STARTED A*\")\n",
        "  open_list = []\n",
        "  open_list.append(current_state )\n",
        "  is_goal_attained=False\n",
        "  cost=0\n",
        "  heu=0\n",
        "  closed_A_star[current_state.x][current_state.y]=1\n",
        "  cost_map[current_state.x][current_state.y]=cost\n",
        "  \n",
        "  while(len(open_list)>0):\n",
        "    open_list.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    old_state=open_list.pop(0)\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL REACHED BY A*\")\n",
        "      return is_goal_attained\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and closed_A_star[nxt_node[0]][nxt_node[1]]==0):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            heu=euclidean_distance([nxt_node[0],nxt_node[1]],[goal.x,goal.y])\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,g2+heu,heu,0)\n",
        "            open_list.append(new_state)\n",
        "            closed_A_star[nxt_node[0]][nxt_node[1]]=1\n",
        "            cost_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "            #plt.plot([node[0],nxt_node[0]],[node[1],nxt_node[1]])\n",
        "  return is_goal_attained\n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object,speed):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal,speed):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal,vehicle_pt_obj_act):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  Theta=[]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj_act,[X[i],Y[i]], Theta[i])\n",
        "    rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    revI=rev[:4]\n",
        "    revL=rev[4:]\n",
        "    revF=np.concatenate([revI,revL[::-1]])\n",
        "    l=np.append(revF,[revF[0]],axis=0)\n",
        "    #print(l)\n",
        "    for i in l:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "  print([np.round(p.steer*180/np.pi,2) for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "2exSViITSeqc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "### PUT OBSTACLES:\n",
        "  def put_obstacles(X_list,Y_list,grid):\n",
        "    if(len(X_list)>0):\n",
        "      for i in  X_list:\n",
        "        x_XO=[]\n",
        "        x_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          x_XO.append(i[0])\n",
        "          x_YO.append(k)\n",
        "          grid[i[0]][k]=1\n",
        "        plt.scatter(x_XO,x_YO)\n",
        "    if(len(Y_list)>0):\n",
        "      for i in Y_list:\n",
        "        y_XO=[]\n",
        "        y_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          y_XO.append(i[0])\n",
        "          y_YO.append(k)\n",
        "          grid[k][i[0]]=1\n",
        "        plt.scatter(y_YO,y_XO)\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZbpDvcJDRw3I",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "START=[40,40]\n",
        "SPEED=60\n",
        "goal_node = goal( 4,3)\n",
        "present_heading=0\n",
        "vehicle_pt_obj_actual = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,START,present_heading)\n",
        "#print(vehicle_pt_obj.input_co_ordinates)\n",
        "current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "vJQLZcriX_il",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "outputId": "eced34b0-c898-4dd2-f821-07721352f62e"
      },
      "cell_type": "code",
      "source": [
        "put_obstacles([[24,0,25],[26,0,25],[27,0,25],[60,15,35]],[],GRID_TEST)\n",
        "if(A_Star(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(START[0],START[1]),GRID_TEST)):\n",
        "  process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj,SPEED)\n",
        "  if(process_further):\n",
        "    show_path(reconstruct_path(ret_val.came_from,START,ret_val.final),START,[goal_node.x,goal_node.y],vehicle_pt_obj_actual)\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "else:\n",
        "  print(\"GOAL CANT BE REACHED!!\")\n"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "STARTED A*\n",
            "GOAL REACHED BY A*\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.286815881729\n",
            "[-20.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -25.0, -5.0, 5.0, 20.0, 0.0, -20.0, 0.0, 0.0, -5.0, -10.0, -25.0, -40.0, -40.0, -40.0, -35.0, -35.0, -35.0, -15.0, 5.0, 25.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 30.0, 10.0, -5.0, 0.0, 5.0, -5.0, 0.0, 0.0, -20.0, 0.0, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, -5.0, -15.0, 0.0, 0.0, 0.0, 0.0, 5.0, -5.0, 5.0, -5.0, 5.0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fc787c2fc50>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "eTYGet7FXRgX",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}