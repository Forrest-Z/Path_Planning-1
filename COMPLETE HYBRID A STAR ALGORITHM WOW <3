{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/COMPLETE%20HYBRID%20A%20STAR%20ALGORITHM%20WOW%20%3C3)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5*np.pi/180\n",
        "DT=1\n",
        "SPEED=1\n",
        "LENGTH=1\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 1.0\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "closed_A_star=np.array([[free_space for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "cost_map = np.array([[-1 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    for delta in delta_angles:\n",
        "        omega  = SPEED / LENGTH * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + omega * DT)\n",
        "        dX = SPEED * np.cos(current_state.theta) * DT\n",
        "        dY = SPEED * np.sin(current_state.theta) * DT\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2)         \n",
        "        #print(arc_cost)\n",
        "        h2     = euclidean_distance([x2,y2],[goal.x,goal.y])+arc_cost\n",
        "        if(cost_map[idx(x2)][idx(y2)]==-1):\n",
        "          h2+=100\n",
        "        else:\n",
        "          h2+=cost_map[idx(x2)][idx(y2)]\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        #jj=np.arctan2(goal.y-y2,goal.x-x2)\n",
        "        #print(['X: ',x2,'Y: ',y2,'ang_goal',normalize_theta(jj)*180/np.pi,'taken_angle',theta2*180/np.pi,'cost:',arc_cost])\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_x_m and y>=0 and y<grid_y_m)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "\n",
        "### A_STAR SEARCH\n",
        "def A_Star(current_state,goal,grid):\n",
        "  print(\"STARTED A*\")\n",
        "  open_list = []\n",
        "  open_list.append(current_state )\n",
        "  is_goal_attained=False\n",
        "  cost=0\n",
        "  heu=0\n",
        "  closed_A_star[current_state.x][current_state.y]=1\n",
        "  cost_map[current_state.x][current_state.y]=cost\n",
        "  \n",
        "  while(len(open_list)>0):\n",
        "    open_list.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    old_state=open_list.pop(0)\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL REACHED BY A*\")\n",
        "      return is_goal_attained\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and closed_A_star[nxt_node[0]][nxt_node[1]]==0):\n",
        "          g2=old_state.g+1\n",
        "          heu=euclidean_distance([nxt_node[0],nxt_node[1]],[goal.x,goal.y])\n",
        "          new_state=state(nxt_node[0],nxt_node[1],0,g2,g2+heu,heu,0)\n",
        "          open_list.append(new_state)\n",
        "          closed_A_star[nxt_node[0]][nxt_node[1]]=1\n",
        "          cost_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "          #plt.plot([node[0],nxt_node[0]],[node[1],nxt_node[1]])\n",
        "  return is_goal_attained\n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            \n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal):\n",
        "  vehicle_pt_obj = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  Theta=[]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj,[X[i],Y[i]], Theta[i])\n",
        "    rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    revI=rev[:4]\n",
        "    revL=rev[4:]\n",
        "    revF=np.concatenate([revI,revL[::-1]])\n",
        "    l=np.append(revF,[revF[0]],axis=0)\n",
        "    #print(l)\n",
        "    for i in l:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "    #print([X[i],Y[i],Theta[i]])\n",
        "  print([p.steer for p in path])\n",
        "  plt.scatter(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "2exSViITSeqc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "### PUT OBSTACLES:\n",
        "  def put_obstacles(X_list,Y_list,grid):\n",
        "    if(len(X_list)>0):\n",
        "      for i in  X_list:\n",
        "        x_XO=[]\n",
        "        x_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          x_XO.append(i[0])\n",
        "          x_YO.append(k)\n",
        "          grid[i[0]][k]=1\n",
        "        plt.scatter(x_XO,x_YO)\n",
        "    if(len(Y_list)>0):\n",
        "      for i in Y_list:\n",
        "        y_XO=[]\n",
        "        y_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          y_XO.append(i[0])\n",
        "          y_YO.append(k)\n",
        "          grid[k][i[0]]=1\n",
        "        plt.scatter(y_YO,y_XO)\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZbpDvcJDRw3I",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "START=[20,20]\n",
        "goal_node = goal( 3,3)\n",
        "present_heading=np.pi\n",
        "vehicle_pt_obj = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,START,present_heading)\n",
        "#print(vehicle_pt_obj.input_co_ordinates)\n",
        "current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "vJQLZcriX_il",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "outputId": "e7d2588f-e785-40fc-baea-ec68d17aa8a1"
      },
      "cell_type": "code",
      "source": [
        "put_obstacles([[30,0,15]],[],GRID_TEST)\n",
        "if(A_Star(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(START[0],START[1]),GRID_TEST)):\n",
        "  process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj)\n",
        "  if(process_further):\n",
        "    show_path(reconstruct_path(ret_val.came_from,START,ret_val.final),START,[goal_node.x,goal_node.y])\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "else:\n",
        "  print(\"GOAL CANT BE REACHED!!\")\n"
      ],
      "execution_count": 275,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "STARTED A*\n",
            "GOAL REACHED BY A*\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.0312170982361\n",
            "[0.3490658503988659, 0.4363323129985824, 0.08726646259971645, -0.0872664625997165, -2.7755575615628914e-17, -2.7755575615628914e-17, -0.17453292519943298, 0.08726646259971645, 0.08726646259971645, -2.7755575615628914e-17, -2.7755575615628914e-17, -2.7755575615628914e-17, -2.7755575615628914e-17, -0.0872664625997165, 0.17453292519943292, -0.0872664625997165, -2.7755575615628914e-17, 0.08726646259971645, -0.0872664625997165, 0.08726646259971645, -0.0872664625997165, 0.08726646259971645, -0.0872664625997165, 0.08726646259971645]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n+QIAYLD/A+0Xf2NOyIJFAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f76e0ca5890>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "278Gj4JZi0yB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "e4cfd163-5330-4311-9a20-6866ba7623cc"
      },
      "cell_type": "code",
      "source": [
        "vehicle_pt_obj = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,[30, 17], 0)\n",
        "print(vehicle_pt_obj.input_co_ordinates)"
      ],
      "execution_count": 276,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[30.5 15.5]\n",
            " [30.5 16.5]\n",
            " [30.5 17.5]\n",
            " [30.5 18.5]\n",
            " [31.5 15.5]\n",
            " [31.5 16.5]\n",
            " [31.5 17.5]\n",
            " [31.5 18.5]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "6uGmnCJwjFrt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        },
        "outputId": "1ea8353d-b534-41da-9f55-966f2f7060cb"
      },
      "cell_type": "code",
      "source": [
        "Xj=[]\n",
        "Yj=[]\n",
        "rev=vehicle_pt_obj.input_co_ordinates\n",
        "revI=rev[:4]\n",
        "revL=rev[4:]\n",
        "revF=np.concatenate([revI,revL[::-1]])\n",
        "l=np.append(revF,[revF[0]],axis=0)\n",
        "print(l)\n",
        "for i in l:\n",
        "  Xj.append(i[0])\n",
        "  Yj.append(i[1])\n",
        "plt.plot(Xj,Yj)\n",
        "  "
      ],
      "execution_count": 277,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[30.5 15.5]\n",
            " [30.5 16.5]\n",
            " [30.5 17.5]\n",
            " [30.5 18.5]\n",
            " [31.5 18.5]\n",
            " [31.5 17.5]\n",
            " [31.5 16.5]\n",
            " [31.5 15.5]\n",
            " [30.5 15.5]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f76e0ba9b50>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 277
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f76e2cd9ed0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "uq86vznutmtb",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}