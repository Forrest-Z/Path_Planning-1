{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/COMPLETE%20HYBRID%20A%20STAR%20ALGORITHM%20-%20MIND%20BLOWN%20)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5.0*np.pi/180\n",
        "LENGTH=4.0\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 0.5\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "closed_A_star=np.array([[free_space for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "cost_map = np.array([[-1 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "policy_map = [[' ' for x in range(grid_on_x)] for y in range(grid_on_y)]\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n",
        "policy_mat=['>',]\n",
        "jug=[]\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal,speed):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    DT=1.0/speed\n",
        "    for delta in delta_angles:\n",
        "        omega  = (speed / LENGTH) * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + (omega * DT))\n",
        "        dX = speed * np.cos(theta2) * DT\n",
        "        dY = speed * np.sin(theta2) * DT\n",
        "        #i=i+1\n",
        "        #print(i,[SPEED,np.cos(theta2),DT,omega,theta2,dX,dY])\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2)         \n",
        "        #print(arc_cost)\n",
        "        h2     = euclidean_distance([x2,y2],[goal.x,goal.y])+arc_cost\n",
        "        if(cost_map[idx(x2)][idx(y2)]==-1):\n",
        "          h2+=100\n",
        "        else:\n",
        "          h2+=cost_map[idx(x2)][idx(y2)]\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        #jj=np.arctan2(goal.y-y2,goal.x-x2)\n",
        "        #print(['X: ',x2,'Y: ',y2,'ang_goal',normalize_theta(jj)*180/np.pi,'taken_angle',theta2*180/np.pi,'cost:',arc_cost])\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHK A STAR VEHICLE:\n",
        "def A_vehicle_is_safe(vehicle_point_A,add_value,grid):\n",
        "  vp=vehicle_point_A.input_co_ordinates+add_value\n",
        "  for point in vp:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      #print('False',add_value)\n",
        "      return False\n",
        "  #('True',add_value)\n",
        "  return True\n",
        "    \n",
        "    \n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_on_x and y>=0 and y<grid_on_y)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "\n",
        "### A_STAR SEARCH\n",
        "def A_Star(current_state,goal,grid):\n",
        "  vehicle_point_A=vehicle_points(np.array([[0,2],[0,1],[0,-1],[0,-2],[1,0],[2,0],[-1,0],[-2,0]]),[0,0])\n",
        "  print(\"STARTED A*\")\n",
        "  open_list = []\n",
        "  open_list.append(current_state )\n",
        "  is_goal_attained=False\n",
        "  cost=0\n",
        "  heu=0\n",
        "  closed_A_star[current_state.x][current_state.y]=1\n",
        "  cost_map[current_state.x][current_state.y]=cost\n",
        "  \n",
        "  while(len(open_list)>0):\n",
        "    open_list.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    old_state=open_list.pop(0)\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL REACHED BY A*\")\n",
        "      return is_goal_attained\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and closed_A_star[nxt_node[0]][nxt_node[1]]==0):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            heu=euclidean_distance([nxt_node[0],nxt_node[1]],[goal.x,goal.y])\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,g2+heu,heu,0)\n",
        "            open_list.append(new_state)\n",
        "            closed_A_star[nxt_node[0]][nxt_node[1]]=1\n",
        "            cost_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "            #plt.plot([node[0],nxt_node[0]],[node[1],nxt_node[1]])\n",
        "  return is_goal_attained\n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object,speed):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal,speed):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            jug.append([[evry_state.x,evry_state.y],new_vehicle_point_obj])\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  Theta=[]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  \n",
        "  print(X)\n",
        "  print(Y)\n",
        "  print(Theta)\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj,[X[i],Y[i]], Theta[i])\n",
        "    #rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    #revI=rev[:4]\n",
        "    #revL=rev[4:]\n",
        "    #revF=np.concatenate([revI,revL[::-1]])\n",
        "    #l=np.append(revF,[revF[0]],axis=0)\n",
        "    #print(l)\n",
        "    for i in vehicle_pt_obj_now.input_co_ordinates:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "  print([np.round(p.steer*180/np.pi,2) for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "2exSViITSeqc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "### PUT OBSTACLES:\n",
        "  def put_obstacles(X_list,Y_list,grid):\n",
        "    if(len(X_list)>0):\n",
        "      for i in  X_list:\n",
        "        x_XO=[]\n",
        "        x_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          x_XO.append(i[0])\n",
        "          x_YO.append(k)\n",
        "          grid[i[0]][k]=1\n",
        "        plt.scatter(x_XO,x_YO)\n",
        "    if(len(Y_list)>0):\n",
        "      for i in Y_list:\n",
        "        y_XO=[]\n",
        "        y_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          y_XO.append(i[0])\n",
        "          y_YO.append(k)\n",
        "          grid[k][i[0]]=1\n",
        "        plt.scatter(y_YO,y_XO)\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZbpDvcJDRw3I",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 247
        },
        "outputId": "2dd23425-7797-4b8c-d52a-bc8023f40b62"
      },
      "cell_type": "code",
      "source": [
        "START=[40,40]\n",
        "SPEED=60\n",
        "goal_node = goal( 4,3)\n",
        "present_heading=np.pi/2\n",
        "vehicle_pt_obj = vehicle_points( np.array([[0,0],[0,1],[0,2],[1,2],[2,2],[3,2],[4,2],[4,1],[4,0],[3,0],[2,0],[1,0],[0,0]]),[2,1] )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,START,present_heading)\n",
        "print(vehicle_pt_obj.input_co_ordinates)\n",
        "current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)"
      ],
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[41. 38.]\n",
            " [40. 38.]\n",
            " [39. 38.]\n",
            " [39. 39.]\n",
            " [39. 40.]\n",
            " [39. 41.]\n",
            " [39. 42.]\n",
            " [40. 42.]\n",
            " [41. 42.]\n",
            " [41. 41.]\n",
            " [41. 40.]\n",
            " [41. 39.]\n",
            " [41. 38.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "vJQLZcriX_il",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "outputId": "5e27298c-65cc-4930-8003-bd8494241941"
      },
      "cell_type": "code",
      "source": [
        "#put_obstacles([[24,0,25],[26,0,25],[27,0,25],[60,15,35]],[],GRID_TEST)\n",
        "if(A_Star(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(START[0],START[1]),GRID_TEST)):\n",
        "  process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj,SPEED)\n",
        "  if(process_further):\n",
        "    show_path(reconstruct_path(ret_val.came_from,START,ret_val.final),START,[goal_node.x,goal_node.y])\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "else:\n",
        "  print(\"GOAL CANT BE REACHED!!\")\n"
      ],
      "execution_count": 175,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "STARTED A*\n",
            "GOAL REACHED BY A*\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.20638012886\n",
            "[40, 39.909132953820205, 39.6128796456435, 39.12422911652225, 38.4646059433568, 37.662930891717885, 36.754352902964094, 35.778708010886334, 34.77877275571539, 33.79838867346331, 32.880540091190696, 32.06546950606447, 31.388913178232844, 30.82531228003648, 30.298660699402628, 29.735059801206265, 29.171458903009903, 28.60785800481354, 27.990227858927565, 27.389945843887055, 26.82549162026379, 26.261037396640525, 25.69658317301726, 25.132128949393994, 24.64501736364039, 24.177122596991197, 23.651119181235913, 22.98503504148438, 22.270517902174067, 21.571472605091397, 20.960344833240416, 20.40357064666804, 19.846796460095664, 19.290022273523288, 18.733248086950912, 18.140409518454994, 17.58363533188262, 16.9907967633867, 16.434022576814325, 15.895548532908581, 15.414686295667686, 14.914763172007653, 14.357988985435279, 13.801214798862905, 13.24444061229053, 12.687666425718156, 12.130892239145782, 11.574118052573407, 10.999310068832443, 10.442535882260069, 9.885761695687695, 9.32898750911532, 8.790513465209576, 8.233739278637202, 7.658931294896237, 6.992847155144703, 6.310609697332535, 5.678842216085672, 5.191730630332067, 4.764170469639817, 4.3169420005538335]\n",
            "[40, 40.9958630327101, 41.950972438691615, 42.823452043260986, 43.57504852370986, 44.17280860231978, 44.59052386221834, 44.80987983902904, 44.821259007110015, 44.62416245395207, 44.22723175468562, 43.64787008762265, 42.91147920278567, 42.08543197196152, 41.23535073312851, 40.40930350230436, 39.58325627148021, 38.75720904065606, 37.97074034903962, 37.17095193800899, 36.34548756601353, 35.52002319401807, 34.694558822022614, 33.869094450027156, 32.995754709133266, 32.11197052317931, 31.261488067972987, 30.51561145701682, 29.81599352011711, 29.100916130860114, 28.309384169109702, 27.47872027488613, 26.648056380662556, 25.817392486438983, 24.98672859221541, 24.18140727019313, 23.350743375969557, 22.545422053947277, 21.714758159723704, 20.872116062484434, 19.995319900998947, 19.1292501171882, 18.298586222964627, 17.467922328741054, 16.63725843451748, 15.806594540293908, 14.975930646070335, 14.145266751846762, 13.32697842746003, 12.496314533236458, 11.665650639012885, 10.834986744789312, 9.992344647550041, 9.161680753326468, 8.343392428939737, 7.597515817983569, 6.866385151715226, 6.0912272003021, 5.217887459408209, 4.313900562938566, 3.4194808088862487]\n",
            "[1.661788885361447, 1.8715637931557672, 2.081338700950087, 2.291113608744407, 2.500888516538727, 2.710663424333047, 2.9204383321273673, 3.1302132399216873, 3.3399881477160074, 3.5497630555103274, 3.7595379633046475, 3.9693128710989676, 4.113650438396374, 4.15773218357349, 4.113650438396374, 4.113650438396374, 4.113650438396374, 4.046663140288594, 4.068535306170075, 4.112617051347191, 4.112617051347191, 4.112617051347191, 4.112617051347191, 4.203609609913741, 4.225481775795222, 4.158494477687442, 3.983442593135014, 3.9164552950272333, 3.9383274609087144, 4.054904375447464, 4.121891673555244, 4.121891673555244, 4.121891673555244, 4.121891673555244, 4.077809928378128, 4.121891673555244, 4.077809928378128, 4.121891673555244, 4.143763839436725, 4.210751137544506, 4.188878971663025, 4.121891673555244, 4.121891673555244, 4.121891673555244, 4.121891673555244, 4.121891673555244, 4.121891673555244, 4.100019507673763, 4.121891673555244, 4.121891673555244, 4.121891673555244, 4.143763839436725, 4.121891673555244, 4.100019507673763, 3.9834425931350133, 3.961570427253532, 4.0285577253613125, 4.20360960991374, 4.2705969080215205, 4.248724742140039]\n",
            "[20.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 30.0, 10.0, -10.0, -0.0, -0.0, -15.0, 5.0, 10.0, -0.0, -0.0, -0.0, 20.0, 5.0, -15.0, -35.0, -15.0, 5.0, 25.0, 15.0, -0.0, -0.0, -0.0, -10.0, 10.0, -10.0, 10.0, 5.0, 15.0, -5.0, -15.0, -0.0, -0.0, -0.0, -0.0, -0.0, -5.0, 5.0, -0.0, -0.0, 5.0, -5.0, -5.0, -25.0, -5.0, 15.0, 35.0, 15.0, -5.0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f41dee7b1d0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "Qjsr4KbiPLX9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "outputId": "dd99e06f-03cc-4a9e-95f6-bf74728bf9d0"
      },
      "cell_type": "code",
      "source": [
        "START=[40,40]\n",
        "SPEED=60\n",
        "goal_node = goal( 4,3)\n",
        "present_heading=np.pi/2\n",
        "vehicle_pt_obj = vehicle_points( np.array([[0,0],[0,1],[0,2],[1,2],[2,2],[3,2],[4,2],[4,1],[4,0],[3,0],[2,0],[1,0],[0,0]]),[2,1] )\n",
        "#plt.plot()\n",
        "\n",
        "fk(vehicle_pt_obj,'black')\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,START,present_heading)\n",
        "#print(vehicle_pt_obj.input_co_ordinates)\n",
        "print(vehicle_pt_obj.center)\n",
        "fk(vehicle_pt_obj,'red')\n",
        "#fk(transform_vehicle_co_ordinates(vehicle_pt_obj,START,np.pi/2),'green')"
      ],
      "execution_count": 177,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[40, 40]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n0ZH7778/999/f7VHmnP6+vpy7733Zvny5WPHHn/88bS3t2fHjh25+OKL09nZWcUJ54433ngj77//\nfjo6OvLcc8/lgQcesIsqeO2117Js2bI8//zzefTRR/Pggw/aQ5U9+eSTOf/885PU7r+fZlR89+zZ\nk9WrVydJLrnkknz66ac5fvx4laeaWxobG/Pss8+mpaVl7NjevXuzatWqJMnKlSuzZ8+eao03p1x7\n7bV57LHHkiTnnXde+vv77aIKbrrpptx6661Jkq6urixevNgequjAgQP54IMPcsMNNySp3X8/zaj4\nHj16NAsXLhx7feGFF6anp6eKE809DQ0NaWpqOulYf3//2GOcRYsW2Ukh9fX1aW5uTpJ0dnbm+uuv\nt4sqWrduXe64445s2rTJHqpo69at2bhx49jrWt3FjHvP9/N8MmbtsZPyXn311XR2dmb79u258cYb\nx47bRVkvvPBC3n333dx5550n/dnbQzkvvvhirr766lx00UXjnq+lXcyo+La0tOTo0aNjrz/++ONU\nKpUqTkSSNDc3Z2BgIE1NTenu7j7pkTTT6/XXX89TTz2V5557LgsWLLCLKti/f38WLVqUr3/967n8\n8sszPDycc8891x6qYPfu3Tl48GB2796dI0eOpLGxsWb/PzGjHjtfd9112blzZ5LknXfeSUtLS+bP\nn1/lqVixYsXYXnbt2pW2trYqTzQ3HDt2LNu2bcvTTz+dCy64IIldVMO+ffuyffv2JJ+9NdbX12cP\nVfLoo4/m97//fX73u9/l5ptvzvr162t2FzPupxo9/PDD2bdvX+rq6nLPPffksssuq/ZIc8r+/fuz\ndevWHDp0KA0NDVm8eHEefvjhbNy4MYODg2ltbc2vf/3rfOUrX6n2qLNeR0dHnnjiiXzjG98YO/bg\ngw9m8+bNdlHQwMBA7r777nR1dWVgYCA///nPs2zZsmzYsMEequiJJ57IkiVL8t3vfrcmdzHj4gsA\nM92MeuwMALOB+AJAYeILAIWJLwAUJr4AUJj4AkBh4gsAhYkvABT2/wAzFZAtBgYT4gAAAABJRU5E\nrkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f41deea36d0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "f9qAQqkUENuZ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def fk(obj,c):\n",
        "  X=[point[0] for point in obj.input_co_ordinates]\n",
        "  Y=[point[1] for point in obj.input_co_ordinates]\n",
        "  plt.scatter(X[7],Y[7])\n",
        "  plt.plot(X,Y,color=c)\n",
        "  plt.scatter(obj.center[0],obj.center[1],color='black')\n",
        "  \n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "2YWGowm1Ig1n",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}