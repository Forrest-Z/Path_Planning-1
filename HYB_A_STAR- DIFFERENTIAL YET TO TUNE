{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/HYB_A_STAR-%20DIFFERENTIAL%20YET%20TO%20TUNE)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1.0\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5.0*np.pi/180\n",
        "LENGTH=4.0\n",
        "NUM_THETA_CELLS =60\n",
        "RADIUS_OF_WHEEL=1\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 0.5\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "value_map = np.array([[1000 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer,w):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    self.w=w\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "### Angular velocity augmentation\n",
        "def angular_velocity_augmentation(delta,numbers, offset,high,low):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < high:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > low:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal,speed):\n",
        "    next_states = []\n",
        "    velocity_list = angular_velocity_augmentation(0, 10,np.deg2rad(5),np.deg2rad(40),np.deg2rad(-40))\n",
        "    #delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    DT=1.0/speed\n",
        "    for delta in velocity_list:\n",
        "        VR=(2*speed + delta*LENGTH)/2*RADIUS_OF_WHEEL\n",
        "        VL=(2*speed - delta*LENGTH)/2*RADIUS_OF_WHEEL\n",
        "        #omega=RADIUS_OF_WHEEL/LENGTH*(VR-VL)\n",
        "        theta2 = normalize_theta(current_state.theta + (delta * DT))\n",
        "        dX = (RADIUS_OF_WHEEL/2.0)*(VR+VL) * np.cos(theta2) * DT\n",
        "        dY = (RADIUS_OF_WHEEL/2.0)*(VR+VL) * np.sin(theta2) * DT\n",
        "        #print(dX,dY)\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2) \n",
        "        h2=value_map[idx(x2)][idx(y2)]+arc_cost\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta,delta)\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHK A STAR VEHICLE:\n",
        "def A_vehicle_is_safe(vehicle_point_A,add_value,grid):\n",
        "  vp=vehicle_point_A.input_co_ordinates+add_value\n",
        "  for point in vp:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "    \n",
        "    \n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_on_x and y>=0 and y<grid_on_y)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "### BUILDS THE COST MAP - Here the current state is the goal\n",
        "def build_cost_map(current_state,goal,grid):\n",
        "  expand_grid = [[' ' for x in range(grid_on_x)] for y in range(grid_on_y)]\n",
        "  expand_grid[current_state.x][current_state.y]='*'\n",
        "  open_list = []\n",
        "  is_goal_attained=False\n",
        "  open_list.append(current_state)\n",
        "  #IMPORTANT\n",
        "  value_map[current_state.x][current_state.y]=0\n",
        "  while(len(open_list)>0):\n",
        "    old_state=open_list.pop(0)\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL IS REACHABLE!\")\n",
        "      \n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and expand_grid[nxt_node[0]][nxt_node[1]]!='*'):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,0,0,0,0)\n",
        "            open_list.append(new_state)\n",
        "            expand_grid[nxt_node[0]][nxt_node[1]]='*'\n",
        "            value_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "  return is_goal_attained\n",
        "            \n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object,speed):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    #print('1')\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal,speed):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      #print('im here')\n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal,vehicle_pt_obj_act):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  Theta=[]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj_act,[X[i],Y[i]], Theta[i])\n",
        "    rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    revI=rev[:4]\n",
        "    revL=rev[4:]\n",
        "    revF=np.concatenate([revI,revL[::-1]])\n",
        "    l=np.append(revF,[revF[0]],axis=0)\n",
        "    for i in l:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "  print([np.round(p.steer*180/np.pi,2) for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()\n",
        "  \n",
        "### PUT OBSTACLES:\n",
        "def put_obstacles(X_list,Y_list,grid):\n",
        "  if(len(X_list)>0):\n",
        "    for i in  X_list:\n",
        "      x_XO=[]\n",
        "      x_YO=[]\n",
        "      for k in range(i[1],i[2]):\n",
        "        x_XO.append(i[0])\n",
        "        x_YO.append(k)\n",
        "        grid[i[0]][k]=1\n",
        "      plt.scatter(x_XO,x_YO)\n",
        "  if(len(Y_list)>0):\n",
        "    for i in Y_list:\n",
        "      y_XO=[]\n",
        "      y_YO=[]\n",
        "      for k in range(i[1],i[2]):\n",
        "        y_XO.append(i[0])\n",
        "        y_YO.append(k)\n",
        "        grid[k][i[0]]=1\n",
        "      plt.scatter(y_YO,y_XO)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "T79sHE8tcsS-",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def search(start,goal_node,present_heading,grid,speed):\n",
        "  vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj_actual,start,present_heading)\n",
        "  current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0,0.0)\n",
        "  if(build_cost_map(state(goal_node.x,goal_node.y,0,0,0,0,0,0),goal(start[0],start[1]),grid)):\n",
        "    process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj,speed)\n",
        "    if(process_further):\n",
        "      show_path(reconstruct_path(ret_val.came_from,start,ret_val.final),start,[goal_node.x,goal_node.y],vehicle_pt_obj_actual)\n",
        "    else:\n",
        "      print(\"GOAL CANT BE REACHED!!\")\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "POtpvXrc0z8t",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "outputId": "3bdda6c7-df67-4857-af27-cfad26e8322f"
      },
      "cell_type": "code",
      "source": [
        "put_obstacles([[24,0,25],[26,0,25],[27,0,25],[60,15,35]],[],GRID_TEST)\n",
        "### A STAR VEHICLE POINTS\n",
        "vehicle_point_A=vehicle_points(np.array([[0,3],[0,2],[0,1],[0,-1],[0,-2],[0,-3],[1,0],[2,0],[3,0],[-1,0],[-2,0],[-3,0]]),[0,0])\n",
        "### HYBRID VEHICLE POINTS\n",
        "vehicle_pt_obj_actual = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "\n",
        "## CALL SEARCH\n",
        "search([4,4],goal(40,40),0,GRID_TEST,3)"
      ],
      "execution_count": 221,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "GOAL IS REACHABLE!\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.368778944016\n",
            "[35.0, 35.0, 35.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 35.0, 15.0, -35.0, -20.0, 0.0, 25.0, -25.0, 0.0, -10.0, 5.0, 5.0, 10.0, 35.0, 35.0, 15.0, 15.0, 10.0, 10.0, -5.0, -35.0, -35.0, -35.0, -35.0, 20.0, -35.0, -10.0, 0.0, 0.0, 0.0, 0.0, -5.0, 5.0, -5.0, -15.0, 0.0, 20.0, 0.0, 0.0, 5.0, -5.0, 5.0, 10.0, 35.0, 35.0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAd8AAAFKCAYAAABcq1WoAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3Xd4VFX6wPHv9MlMei+QThJ6L9JB\nBLEhKoJYsGGvK2JZC7urq2vbtaMiCopSBFFARXrvSUho6b1P+mT6zP39EQ2OgaA/SUI5n+fJkydz\n7j33znnu5J177nvOkUmSJCEIgiAIQoeRd/YJCIIgCMLFRgRfQRAEQehgIvgKgiAIQgcTwVcQBEEQ\nOpgIvoIgCILQwUTwFQRBEIQOpuyIg1RVNXbEYc4Lfn46amtNnX0a5yzRPm0T7dM20T5tE+1zeu3R\nNkFBXqctE3e+HUypVHT2KZzTRPu0TbRP20T7tE20z+l1dNuI4CsIgiAIHUwEX0EQBEHoYCL4CoIg\nCEIHE8FXEARBEDqYCL6CIAiC0MFE8BUEQRCEDiaCryAIgiB0MBF8BUEQBKGDieArCIIgCB1MBF9B\nEARB6GAi+AqCcF6QXA6M1ak4bA2dfSqC8Jd1yMIKgiAIf1VtyQaMhgMgU+AVOAjvkBEoVJ6dfVqC\n8P8igq8gCOc8i7EQo+EACrUvINFYtQ9jdTJegYPxChmOQqnr7FMUhD9FBF9BEM5pkstBTeEaAAKj\npqLWhWOsTqGhYgcNlbtpNBzEK3gY3kHDgNMv4SYI5xIRfAVBOKfVl2/HYa3GM3AIGs+uAHgFDUIf\n0Bej4RANFbtoKN+OsWo/LvNY5Lp+yBXqTj5rQWibSLgSBOGcZTOV01CxC7NZy7atfhgbLC1lcrkK\n7+BhhPd4GN/wSwEZpdk/UXrsHRoq9+By2TvvxAXhDETwFQThnFWRsw6QyC8Ko7zEzIrPD1FSUOu2\njVyhxjtkBOE9HyEsbiKSy0ldyQbKjr5LY9UBJJejc05eENoggq8gCOeksuJ6CgskALon5DFpYg4e\n6hrWLD3M4f1FSJLktr1coSE87jLCez6Cd8hIXC4rtcU/UnrsfYyGZCTJ2RlvQxBOSTzzFQThnFNW\nXM+6ZYdxOLsRFjsUvSoFjPkMH1pCVXUg6QeMVJY3MvbyRFRqBQDPPvskLpedV1/9H77h4/EKGkpD\nxS6MhoPUFK2loWIXPmFj0Pn1QiYT9x1C5xJXoCAI55Ty4nrWfp2Cw+agd9UOIrx8Cel2G8Hxt6LW\ndyEowMDo4cl4qbby44rt1NeaWbPmOxYs+IjS0tKWehQqPX5dJhLW82E8AwfjsNdTXbCashPzaao9\n2urOWRA6kkzqgCuwqqqxvQ9x3ggK8hLt0QbRPm270NvHaTLx7fytVNl0hBpz6VG+HZV/AJF/fwGl\njw+SJGFpzKGudAt2cxmSBJk53jzy/NsYm4ykpaXh5xd2yrodtjrqy3fQVJ0KSGg8owiOvw2ZTNax\nb7ITXejXz1/RHm0TFHT6oW/izlcQhHOCMe0wBS/+ncjcLaglG+WeseQMnIm1to7SD97FZbchk8nw\n8I4nNPFuAmNuRJL5s3T1MqprqrljxmSiXE1gMp2yfqXal4DIqwmMvh4Ap914UQVe4dzyh4KvxWJh\nwoQJrFq1irKyMm699VZmzpzJo48+is1ma+9zFAThAuawmDn6wWuUvvNfHA0NxE0ayY33jSA43IuC\nejUpCdOoLSinYvHnLV3FMpkMnW8SeXVJrNlwlITYUG6fHkt63lc0zn8A9UtPg6N1lrMkOamv2AGA\nf9crOvR9CsJv/aHg++GHH+Lj4wPAO++8w8yZM/nqq6+Iiorim2++adcTFAThwlXQUMTKFa+iSj6G\nSStH9uhsAq6egpefnmtn9qd73zDqnVoORE0hPzWf2p9+aNnXaDQyZ85jKGQyPis1Ur7DE5NVS+24\nWHIuU2Nc+Q+c9ia34zVU7MZurkAf0B+tV0xHv11BaHHG4JuTk0N2djZjx44FYN++fVx66aUAjBs3\njj179rTrCQqCcOFpsDXyxfHlvHbwXfYHNmHy0aKzuNh28FuMvwRMhVLO2MmJjLk8AadCTWr4ZRzc\nfILG5INYLBbuuutWiooKmePpxXCLkatffQnL2yWkHe2GyaGjJkFF6dF3qCvdjMthxm4xUF++HYXS\nE7/wyzq5BYSL3RkTru655x6ef/55Vq9eTUREBK+//npLwC0sLGTu3LksXbq0zYM4HE6USsXZO2tB\nEM5LDpeTdSc2s+rED5jtFqJ8IrhjwHSibR4ceuJJXDYbR2YM4oEbn3Z7HltcUMvyT/dibHLg15DL\n6hMr2bxzB1eOG8fKrVvR/Obf2JHEUay5/CHCY2rokVCMXGFFrtDgcloBiOs3C9/gXh3+3gXht9oc\n57t69Wr69etH165dT1n+RxOla2tPnQBxMRLZhm0T7dO287l9ckrr+TBlMWaPIrRyD6YnTGVE+BAU\nMgVNGuhy30MUv/0W3VYlszJ4BWN6TW7ZV6NTcv2dQ/j+sx28s3IR2QUpjBk5lvnzP0c5YRQUFbZs\n2ytjB0HVRSy77nnWFw+ib786woOOtpTbZVHnbRv+Vefz9dPeOjrbuc3gu3XrVoqKiti6dSvl5eWo\n1Wp0Oh0WiwWtVktFRQXBwcFn9WQFQbiwVNaaWLktlwMnKlFFylF6gLM2hKHBQ1DIT/aIefbqg88N\nNyBf8Q2mRSvJn9uN6KD4lnK5wsWq7e+RXZBCQswgxve/n5JyK/6Tr0T38Yduxwwx5HMzh/k++kZS\nkhXkB4xn9KgSQuKu6rD3LQhtUcybN2/e6Qovv/xypk+fzrRp0zAajVx66aWoVCrMZjNJSUl89tln\nDBgwgJ49e7Z5EJNJZET/Sq/XiPZog2iftp1P7WM02/lmWw6frjtOcVUTMWHe3D5qOMdqj2PRlpOX\nC8Pi4t328YzrhsFQhGdWCflZyYReMhaVQkVdXS133nkrW7duZsKESTw7eTpVDl+yM2uwjh5PhJ8c\nRWUV8iYjzi6RWGbMxDbvX8T3DMVQ3kh5SRN2KYZuPSM6qTXODefT9dPR2qNt9HrNacv+9PSSDz/8\nME899RTLli0jPDyca6+99i+dnCAIFxazw8ny5EL27CzEZnMS6KPlhrFxDE4KRiaT8bDfLF498C4Z\nbGNXRjdGJMa27CuTyUic9QCpZX+na34Fexa+hi1qMHPnPk5FRTmXXTaJhQu/RCWX4f3G+xy0x3No\nbxFVfW9mwhN/p4vCQo3SE3Q6AHKOVVCYW4Nao6D/sFM/PhOEziBmuOpg4plL20T7tO1cbh+XJHGw\nqoGfSwxUZtZizGsgMtyLv88ciErpPrBizYnt/FS6FpnJj5fHPY6PXutWbmtsYPczj7Jg135+LilC\nrVbz5JPP8OCDj6JUNt8zOOrryf73KxzW9KZGF4G3r5aZdw9FpmxO1Mo6VsGmNcdRqRVcNb0vIeHe\nHdMQ57Bz+frpbGKGK0EQzjsFjWY+OFbE6oJKHC6JsQMjUHgoKSxt5HhRbavtr0ocRbiiG5Kulje3\nL2uVvLlxx3bu37iFn0uK6O7nx5IP3+fRR59oCbwASh8fYh56kP7VO4iuP0pDnYVP39lJ9vFKEXiF\nc54IvoIg/L/VWcwszS7ioxPFlJqs9A/w4m+9o7kuPozxo6MBmL/mGCaL+8L2MpmMxy65BYXDk2rN\nUVal7AWgtLSE2bNv5/bbZ2JsamL2rJt4f+QY/Nb/TFNF6e8Pj6ZrV8Jn30uc4SB9G/cjQ2LDd8fY\n+L0IvMK5TQRfQRD+NElyYTQks+DIMdJqLYRp5dyb1IVpsaF4q5vvTqf360pEgj8Wk5131h1rVYde\n7cGdvW5GcsnYUPIdL748j+HDB/Ldd6sYOHAwmzfv4uXXP6JiYn+0FidZ/30Fp9ncqh7Pfv0JvOFG\nAiuOMcJ2oOV1EXiFc5kIvoIg/GGSJGGuz6T8xEfUFK0lBAMAwY48uurd8zflMhmPTe6B2ktNZlY1\nm9Jb37n2DYvF46iO9c98yYdvv4VOp+fttz9g3boNdOuWAMDoGx4iu2cgOkMjJ957DcnlalWP38TL\n8b5kBPLsdKaE5XHbQ5eIwCuc00TwFQThD7GaSqnMXkxV7lLsFgP6gAFc32sY/gobhx1RHMxtPdVs\ngIeaWyYnghyWbsikqsHSUpaVlcmMGdfxxctvYqo2knBlH+747zxuuukW5PKT/5pUChUD7p5DYZgG\nVUYehUsXtTpOU2oyTUfTAZBZzOg9Tz/EQxDOBSL4CoLQpoY6M4e2rqYiYwFWYwFa726EJt1LQORV\n6LQ+zEyMRoGTH2v9qajOabX/yNgg+vQLw2lz8ebqNCoqKpg793FGjx7Kli2bGDNmHKvWbqDv9PHk\nKdPZk9+6izrUKxSfO2+nxluBdfM2arZvAcBpNFL28XxK338Xl8lE1G23EHr3ve3eJoLwV4ngKwjC\nKVnMdnZvyubrT/bTWFsNgNkeQ3DcTag9Ts5sF67Xc3mYB1Y0LM83YLe3nk72gUsT8fCWsWvVQgYN\n7svnn39KVFQ0ixZ9zfLlqxkxcDBXRUwFZHyVuYw6S+shH4NjLqHw+pGY1TKqvlxM5dKvyH/+WRr3\n70UbG0vkC/+ky/VTkSnEPPLCuU8EX0EQ3DgcTlL3FbJk/j4OHyhG76khNHYCFosWrTKP0vwTrfYZ\nHhFJooeZMpc/P2SmuJU5nU5WLP2SLR/cS8bur5DkKh579mV27NjP5MlXtiygMLl3fyIc/XEpzfx3\nz+JTzh0/ZdjN7JkQhcwlUbfxZ5zGRgKnTafr08+hCQ9vnwYRhHYggq8gCABILhcZP+/jq/d3sWdL\nLjIZDB8fx02zh5DUNwp98JUANJatxWpxzzqWyWTcmNgdb5mZfaYgjpQ0dx3v2LGN8eNH8PjjD9HU\nWM+kG2cz7o4PKdMNxCVr/e/nsTHXIW8KwiAVsOLIhlblefUFVITrOBLXPClH1D9ewn/SZGRy8a9M\nOL+IK1YQBEzHj1H40j84tKuAJrOLmChPbr5vKH2HdEXxy+xUEXE9MVq746E1kXXo21Z1eKhUzIgN\nQY7EotQSbrt9BtdffzUnThznpptuYe/eFBa/+waR8aE01Vh4d0PrO2i9Vs0dPWcg2dVsq9xEVnU+\nAAZzDR+nL+bd1E+oMlVjnXoZER9+gCb84p6rWTh//em5nQVBuHBYS0owfLOMpvQ0ABKTurDfEYwh\nrwy51LvV9okDp5B1sBhvXTYFJ5KJShrgVh7i4U31qldY/cUSnDYrgwYN4ZVXXqdv3/4t28y5tjdP\nfbyXY2kVbIkPZFy3ELc6BsR2pU/+BNKkH3g/9TNGdB3AztJ9OFwOYn2iuTFhCl29RNAVzm/izlcQ\nLkKOujryP/2QgnnP0ZSehkdiEpHPvcjAObOJ0TXSKPdi+6KNrfZTqtUERF6LyyXDVv8zJmM90Dz+\nd82a1YwcOZiVny5E5+nJmCf+xaP/e9Mt8AL46TXcenkiSLB0fSaVTdZWx7lr9GjUNQnYZWa2Fu9C\nr9Rxe4+b+NuA+0XgFS4IIvgKwkXEJblIqzpK2svPYNuzj2pvOdrZt9NlzlNoo2MAGHf7eHTOJjJr\ndeTuTmtVR3CXGMyuAWjUNnJTv2Hfvj1cddVE7rrrNsrLy3jkkb+xfcdO+o0fx/Z6LTnV5a3qGNU9\nlJ5JQdiNdv73wzGcrpPJVSVVRt7/Np2GnGgAvJV+vDDsSQaH9m9JzhKE853odhaEi0Cjzcju0v3s\nKNlLrbWOiT4uutdCZqSWdI8C7vlNUNN46xl7WTQ/bKpg+5ZiwnrE4OHrvjpLwoDL2bjyAAu//oAt\nu7IAuPLKa3j++XnExjav0TvVXs+SElieV8Uj3gHoVSq3Oh6c3J05xfWU59SyJLmAqxPDWL0jl53p\nZUgSJEX6c2OP54gOFTNVCRcesaRgBxNLerVNtE/b/kz7SJJEZnEtyzK/xSDPxik5USvUDAkdwCi/\nftheexdbQx3LJvoya+LjRHtHuu2/5eMfOFGjI8qjgSsevabldYPBwJtvvsqiRQtxOBz0Sorgueff\nYvxlk1udw5qjO9ljCqGbh4Xbe/Zqded6vKiW15e4D00KD9QzbWwcfeIC/vSdrrh+2iba5/Q6eklB\ncecrCBcYq83J3mPlbEkuobCmBm3/DGQuuCHhGoaFDcJD2TxMp+mOuyj57xtM3N3AuqgfeHDwfW71\njJo1gdI311Ng9ub4+n1EjerNxx9/wDvv/BejsZGYmFjuumUak0Y4MJrycLlcbtNCAkxOGEBhWhpZ\n5gB2FhcyqmtUS5nDJVGlBI2vBmtd83Pf2ycnMaJ3KAoxdEi4wIngKwgXiLLqJrYkl7DrSBlmqxO5\nTMaghAgKrFEYtQUYDBIeXU8uWq/v2Qvf8RNg80YCtx4mIy6bRP/4lnKlRs2l1/bk22+zeWfxT+x6\n4lbKK8sJCAjg2Wdf47bb7kSpVHJs9wK89eVkJm8gadAkt3NSqnTcGBPEhzkm1pe7iPEz0sXTk4y6\nJtYVVWGw2AkfEoJ/pZ1ZY+Lw9FB3WHsJQmcSwVcQzmNGu4PtZbWkH6kkI60CAB9PNRMHRzK6bzh+\nXhqOl/vy7tH32F6xhSmOYaiVJ5+9Bl4/jfojqfTPMLBr+3ISpjzj1tV7rDyXz5Y/QX5ZASqlikce\n+RuPPPI43t4+LdtE955G+Yn5aBT7MZR1JzDMvfs6yD+OK2q2s6o2jA+OlxLjpSOv0YwcuCTYhwkR\nAXgoxZSQwsVF9O0IwnnI5HCyvsjA62n57Kyoo6SxecapYT1CeP3+4UwZGYOfV/PKPt1DuxLsSsCl\nNvJ18la3euQaDV3veRCXXEafzdkcKW5+/pqensa0aVOYMeM6CsoLGdpzFA/f8RFXJI11C7wAnj5+\nKLwmoFBIVOWuwmG3tzrfAdFD6CnPBWTkNZqJ9fLgoZ6RXB0VLAKvcFESwVcQziMmu5ONJdW8npbP\ntvJatAo5V0UGERbni0wp43BuNXZH6/VuZ/W/Cskl50DtTsw2m1uZNjoG7aQJeJlcHPnwAx586B4m\nTBjFtm1bGDt2PJs27WTx5wsI0HtzMNOOIae4Vf0xPQbTYIpGr2sg89DaltclSaKp9ghlGR8zXHYA\nGS5GBWm4KzGCUJ1Y9k+4eIluZ0E4DzjtTewtzGBLgw8mhwu9UsGlXQMZGuyDSi4nUKvivbx6jDn1\n/LS/kKmjYt32jwkMoYusJyWqdBYd+Jn7RlzlVu43fjJ/n/8Bq9cexeZy0bNnb1588V+MHTu+ZZvB\nPbLZc8LJxhXJTJsThuJ3d6zx/a+n8PD76DXplOZ3xz9AS13pRmymUpDJ8Q0ezD9Du6JQ6tqvoQTh\nPCHufAXhHOZy2akv307psXc5UGPF5HAxKNCLOX2iGRnqh+qXrOAEHz2X9A1DrpLz475CGk22VnXd\nPugqJKeC9Ka9NJibu6lNJhMff/wBQy8ZwPLD6fhoNDw1eDDrlq9yC7wAfa4ZQZiynlq82btkU6v6\ntTo9+pArkcnAUbucyuzF2Eyl6Hx7Et79Qfy6TBKBVxB+IYKvIJyDJMmFsTqFsmPvUV+2FZlcyXB9\nc0JVUb0Bpbz1+NcpsSH4x/nicLhYuTOvVXm4jx9xqn6gtPHm95/xwgvP0q9fEs899zR2u4PnnpvH\nG//6G1eHdSX30/daLeknl8u57LbRqJ0W0ksVlKZluZU3Ga1kZyoxmX/pTpZpCEm4i8CY61Fq/M5S\nywjChUF0OwvCOaam7BiW2q04rAZkMiXeISPxDhlBOJCRtofj9gi2FeYzPirGbT+dUsFNI2J4P7+e\nHamlXDU0kkAfj5Zyp9NJVL2Kz9/5gYr0QgACA4N4/PE5zJ79AIGBgdRZ6jmYNZfI7CKqt2wkcPxl\nbsfQB/sxalggmw4Y2bz2BDd264pMoSR1XxGp+4tw2F2UBYxl2CgNUYl9xXSQgnAaIvgKwjmitrqJ\n9P0pRIduRpJAH9AX37BxKNUnp1e8uV8PXj5YwZZKFb0CmwjW693q6BfoTULPIE4cKuezzVk8ObUP\nVVVVfP31FyxatJCiol+CbmIowyZdxfy5r6JWnxxb66v1wXLdRCyfrMWwYhnePXujDgl1O0bCpYPI\nPbqGPJMXi97djcpDg7nJjodexYhL40nqE9pqsg1BENyJT4ggdLL6WjOb1h5n2YIDZBy1YLWqkSQZ\npeWRboEXICQ4jol+jThR8E1WNq7fdQ3LZDJmj+qGwkPBri07ueWOWfTv352XXppHdXU1s2bdxbr1\nmxn33HS0QzVUmoytzmdcr8nsGOqP3O6gdMFHSE6nW7kkSQweFAiAwyXH3GRn0Igobr53KD36hYvA\nKwh/gLjzFYRO0lhv4dDuAjLSy3G5JPyD9AwZFY2/Xxfqi5ejsG2itjoOvwD3ADw4ZjDpDfvJtQez\nqzCLUVEJLWVNTU2sXbWCg1+/T0luBgAJCYncccfdTJs2o2WMbuqeSlLNW/n84BqemzDLrX69Skfs\n6MmcKFxBUl4eNT+sJeDqKQBY8nKpWrEMc2YGffVdORY+jhn3XYLnb7q3BUE4MxF8BaGD2SorKVn5\nLRvq4nDKlPj6ezB4VAxxSUG/PCMNora8J16eR8lO/p5BE252e3YqV6iYGh/Luxk1bKyU0TOwAYXD\nxYcfvseCBR/R0FCPQqGgS4+RdOkxiUcem86EBPeu41sHTeDwpv2UKo+RXVVGfFCYW/m4riN5+ZLt\ndKkqgTXfoQ4Lx5h8kMb9+wDQ9+1H1PXTGB4u1tYVhP8P0T8kCB3EaTRSuXQJ+c8/gyX5AAqnDSSJ\nidckEd892C3ARva4Gqvdk+CAXE6kHGpVV4B3GJf6WzGZ7Tz8zxcZNKg3b731Gmq1ijlzniY5+Sjv\nfLiQwMjerN6Zh9HucNtfq1IzLGAUMrnE4pS1rerXKrWMS5jAz8O8wOWibP77NO7fhyY6hi5zniLi\n4cfQiMArCP9vIvgKQjtz2W3U/PgDec88Sd3GDaj8/Okyezb9/GpBJmPzsgOth/Uo1ATHTkVChty6\niYbaerdys9lM+vqdrLjrKjZ89ikuJJ577h8cOJDO3LnPEhYWzoikEIKD9ZgqzXyVUtjqvGYMGIvc\n5oVBkc2RkgL3c5Zc+Hv4UxSqxqRt/jcRetc9RD77PLqk7me5hQShc9ntTmoMTdjtzjNvfJaIbmdB\naCcuyUXqgR/RLv0BZUMTcr2eoOk34TN2PHKVin69elPwxmoqCCd1Qxr9J/Z1298nMAZDcT88tCnk\npn1L39GzsNvtfP75p7z55n+oqCjH09OLQTfPZsC1NzJrcDf0upPZzzKZjNsnJPDaVykkp5RxIiGE\nJN+T5UqFgrGh49lc8x1fHVnHvyMewGhvYm/ZQXYU78FgqQFg251DeaDvnagUKgThQuJyudi9OYe8\nTAPGRiueXhpiEgIZPj6u3RMHZdLvv3K3A7F480liMeu2XSjtc6Imi9XZ64jakcnA4yasXUPoMecF\nFL8bGlSdks6qH0qR5Aqm3z0EnyD35CqXy0Hmvvfx0NSxab8Xny35moyMDHQ6Pffccz/33/8QKTWl\nbKzRkKCqYlbfS1qNrX3lq2SyCuvoMjiUZ8cmolUoflO/i8fX/weHppZgbQi1tmrsLgcquZJBIf0Z\nHXEJkd5d2q+hzrIL5fppL6J93O3cmEX6wZJWr/ceFMHICd3+cv1BQV6nLRPdzoJwFpUYy3g/9VPe\nTf2EImMpztGDMWsVKEoqKC3NarV9QP/e9Asx4ZQp2bRk1ylmlVJS3hTP7CeW8fQL88jOzmbWrLvY\nv/8wzz77An5+/oyJ6UGosolMexApBa2fD980vnmN3oqMGn4qNLS8brM72X2kAk1NczdypaUCX40P\n18VfxcsjnuOW7tPOq8ArCH+G3e4kL9NwyrL8TEO7d0GLbmdBOAtKaqv5qfBnUqpTkZBI9Ivn2vgr\niPTqwhGTP8ovvqVswXxC//U/VGqt274Dbr2C/DfWUGEJ5MjPh+g9aRAAubk5vPLKv/juu1UAjB4W\nx+zbbmDi9c+63d0q5HJuiIvmg4wKfqxSER9YgbdnSEt5dKg3AxICSc40sP14BV2VKrKzqtmZVkaT\nxYFM5kVQQCQjY3pxRcJo5DLxnVy48JmMNowN1lOWGRutmIw2fPzabwidCL6C8BeYrQ5+2FvARsP3\nyP3KCNQGcmPiFHr4J7QEyF5jprAr5SBBR4o48MXbDL/rKbc6FBoNY6f249vVeew7VIM6JJ2PFn/M\n119/idPpZMCAgTz33D/xldLx9jRQcHwH0T1Gu9UR7u3LyIAKtlfrWJt9nJv6BCKTn+xevnx4NMmZ\nBurSDLyf1vxt30un4spLohjTL5xAn0vbuaUE4dyi81Tj6a05ZQD29NKg81SfYq+zR3zFFYT/B4fT\nxaZDxTz90R7W7SlA0dg8jrahHhJ941s9d+1/9xM0eqrw33uc7JTtreoL6hFPuGcVq7csZOzlo/ny\ny0XExsbxySef8+OPmxk5chSh8VOx2xVIph00NVS1qmNCdAKBSgtH7BGkF+wBwOxwsqG4mi9LKlu2\nC/T34J6re/DGAyO4fkyc2/zPgnCxUKkUxCQEnrIsOiEQlUpxyrKzRdz5CsKfIEkSyZlVfLM1h4pa\nMxq1gqmjY7ls4Gj+sbWGBk0BH+z6jkdGX+e2n87TF+9Zt+B6/zPqF3+BqVsfdJ6+ABgMBt599798\n9tknWCwW/HxCuW/aLTzyr7+j+E1yVGBYGDXlo1GxhZLjy+k25H5kv+kiVspl3BAXxUcZ5Xxv8KZY\nyuVgnYTF6cJTqeD2W/sRhpxuEb4d01iCcI4bNjaW0sI6aqqakCSQycA/SM+wsbFn3vkvUsybN29e\nex/EdIq1RS9Wer1GtEcbzuX2KWg08+rKw2zdV4TZ6mTsgAgemtqbPnEBKJVy+gQnsq1gPwapkGB5\nNBG+AW77B4RFk1l5Ar/cSnJKjxHQawjvvfc/7r57Frt37yQkJJS/3fc3hvaahac6jMQEf9Re7tnR\n8d27czTlCN6eVTTW2/EJjHMr91JKVNfmUuzwodAsoVbIuDQ8gBtjQ4n10RHg7f68+UJzLl8/5wLR\nPu52b84hP6va7TVzkx27zUn/IBxRAAAgAElEQVRkbMBp9vrj9HrNactEt7MgnIHBYmNJdhkfnSim\nwWIHoG+fEG6dmIi3/uRzoWBvH67scg0yucQXJ5Zhslla1TXo1kep9lWzb812Bg/swauvvoSHh5Z/\n//s19u5N4cEn/0bfGDVWhY5ti7cguVxu+ytVCiISr8ViUeNs2oupoXmYhORy0lC5j9Kj7zLQvgWA\nSA94sk8Mo8P8UCvER10Qfquzs53FJ1IQTsNod7CmoJL/HSngaK2Rrnott09MRK6Sk5pewbHSulb7\nXNFzMCGu7jjVDby9c4VbmSRJbN+xnb/t2Merh5NprG/g/nvvY9++VO6++z40muZvycOmj8ZbZqJQ\nCibju82tjhESEUyjfQRyuURZ5jc01aRRdvwD6krWI0kugsJH89LAaO7r1Q2NCLqCcEp/JNu5PYlP\npiD8jstlZ3tuGm+m5bGnsh5ftYqb4kK5r3sXhnTxZ/KYGCSXxAffH8XqaP3t+LERM5Db9BRJ6Ww8\nkQpAWloqN9xwDTNnTiM3P5/Lhg7k6/GXMVEnodd7uu2vVCoYf10/kCT2HjFjKipudYw+lwyntLwr\nKkU91QWrcdjq8QwaQnjPh/EJHYlcLmajEoS2/JrtfCoi21kQOpAkuTBWp1J27H22V0tYXTAqWMdj\nvaLo7e/VksF8/aAowqN8MNVZ+eDnE63q8fbwYHq3aYCMJYcWcdc9dzBhwmh27NjG+PET2LJlN4tX\nb0ARF0JQThWpPy1pVUdYt3B6RKsxq7zY/sUWJMfJhRHqakxs+ymDtCORJ7fv8QD+XS5HodSd/YYR\nhAtQZ2c7i+ArCIC5IZvyE59QU/g9LoeJEfrmoTx5NWXIaD0D6+NX90KpVZCeXsG+nNbDfnoFhFH4\ndS4/zv2cNatX0rt3X1as+I6lS1fRo0dPFAolcfc8ik0lQ71mM5UlOa3qGH7DMPQKG3myCLK++YGG\nOjPfL0tl6Sf7yTpaiW+ANy7PB+ja73lUGv+z3yiCcIEbNjaWgGA9v44MlMkgILhjsp1F8BUualZT\nOZXZX1KV8xV2SwV6/76E9XiQMUnjiVXVUezwYUtuWqv9Ajw1TJ+YABJ89sMJjL8kYlmtVubPf4+h\nQ/ux//v1aL31DHlwPPe9/m/GjBnnVkdwl3hsV45DbZfI+eh/OJ3uy/6pVArGTekDMjmb8r1ZMn8f\nqfuL8PXXMfHaHky7YxDR3QJbjSkWBOGP2bs1l+rK5mFGAJIE1ZVN7N2a2+7HFsFXuChVljWwavF+\nSo99iqUxF61XLKGJ9xAQNQWl2ge5XM60hEQ8sLKtVktxbVmrOi7tEUZ8YgC2Jjv/XZvOt99+w4gR\ng3nhhWdxOl288MK/WLluM5EjkthqWE9xTevMyn5X3EJVbCABpY0c/OYjtzJHXS2qPT8gd9lbXrt2\nZn9uvGswcUnBIugKwl8gsp0FoQPZrA52bshi1eJkKkpN1NY1rzri4dMdtS7UbVsfnTdXh6twomB5\nbhl2h6NVfY9e0YMGwwkW/2M29957J2VlJdx77wPs35/KQw89ysDYBPp4jASljbf3f4nrd0OH5HI5\nPe99ArNWgfemAxRlpeKymDGsXkXes0/RsGM7EyzbGJCoZfacUfQZ2AW5XARdQfirOjvbWcxwJVwU\nJEkiL9PAzo1ZNDXa8PH3YPTEBE4c1uHjvYHqovV4eMei1Pi57dcvIpFjNQc4YvHlx6xUruk+qKUs\nI+MEL730ItvX/whARPdRfPbhm/TrkeRWx92XTOap9RmYNKV8vn8Ddw6b5FbuGxBGyY1TUCxehfk/\n/yNXp8NlMqHw8SVwxs14jxhJnKJ9kz8E4WLT2XM7i+ArXPBMTTa2/ZhBfnY1coWMQSOi6H9JJEql\nguCwAWxfU0JCXDrFx1cQ1fdutykbAaYm9qIwLZN9Ri96VBbgJWl57bV/s2TJIlwuF8OGDaf7pLuo\nagxgeYqRfj3cj6+UK3ho8C28kfwOBxu3Mry8J0mhJ5fqkyQJR/dYTF5KfBoduEwmAqZMxW/i5cg1\np58hRxCE/79fs51PtZ6vmNtZEP4CY1oqjupqjhNNfnY1fgE6Jl3XC7+Ak8Nx1Bol/cdcRs6hckJD\nyqnI3Upo3Hi3ejzUHkyN9GbBiXr+9u8PSFu9DJPJRLduCTz//D+ZNGkydpeLJxbso7yogeX787lx\nSLRbHTGBIYz0n8DOhh/5KGUJr0+cg1KhIK++gG+z15FTn4/2cn9mHJDoOftv6ELCOqKJBOGiNnx8\n8/SseZkGmhqt6L00xCQEtrzenkTwFS5IdVs2U7lkMQABfS9Bpe5BY70Fl9PVatuAIE/qoq7EUvcV\nLtcujHWJePpGtJQ7HA72/bSVb//9DxpqavDy8+P1f/ybm2++DaWy+SOkVih4aEpPXluczM/b8xka\nF0RUgPu8zNMHjCF9w3HqNfm8vnMxQQEqUiqbM6n7BPZkStxkQicFt1OLCIJwOpIkIUnNvzuKSLgS\nLjg1P66jcsliFF7eeHRLgMN76N2UisPh4qdVR7Ba7K32ieseidHRPGVjacYKXE47kiTx888/Mm7c\ncObMeRS72cKIm2cx9ePv6DdhZEvg/VViqA8jh3XF5XDx9nfpOE6RXDW7/40AFDuPk1KZRpR3Vx7r\nfx/39plFqF4EXkHoSLs355B+sISmxubkqqZGG+kHS9i9ufW4+7NNBF/hgiFJEoZV32BYuQKlnz9d\nn3qGLk/MxWf0GPwKDhHTlEFDnYVNa06c8htuvxEjqKqNRqtu4PulbzN16pXccst0srIyufXW29m/\nP5W3X3gGrU7L96VWGswNreqYNTIW/xA9dZUmPt+W3fK6ze7kh70FvLHkKLaC7gBcE301Tw58iG5+\n7T+gXxAEd5091Eh0OwsXBMnlomTJ55i2bUcVHEyXJ+aiCmieOi741ttRh4YjrVhGfbgXBTlwaFcB\ng0ZGu9Uhl8vRhw7iqec/ZNOOowBMnHg5zz//TxITT2Ywj/GtYEudJ99kZnB774HI5XK3Oh6d0ot/\nfHaAPQdKGJYQTH2NmW935FLTYEWvVXJjrwmM7T8LlVJ89xWEzvJHhhr5+Hm02/FF8BUuCBmrFiPf\ntp1qHwX5U3sx3f/kdIsymQy/iZNQhYbg+GQh+4MncmBnHoGhnkTHNwfo+vo63nzzNRYu/BibzUZS\ntxAemHUZk2/4Nz7+7ovPj4/rQ0ZqCtk2X/YVHuOS6F5u5V399VwxJoa1G3N464tkAJQKOZOHRnLl\nJVHotGLRA0HobJ091Eh89RbOay7Jxdrcn9lScwgAL7NEYeYhvsn6vlXXsmeffsQ/9ST9zcnIXU42\nrjxMTWU9q1atYPjwQcyf/x6hoWHMn/8pC955g+GDQ8lOXonjd91PCrmC6d1iUGFnfZUcg9F9Me4y\nk5UG75Pfa3vF+vPKPcOYNi5eBF5BOEd09sIKZ7zzNZvNPP3001RXV2O1WnnggQdISkpi7ty5OJ1O\ngoKCeP3111Gr2/dbgiD8Xr21gc+OfkVWXS7+vcJRxPdCvfw7pmytZ1vjRtYqtFwdd7nbPpouXen1\n1KM0fbCMrbVeTLnyCjIK0vHw8OC55+Zx770PotFocLkcZB8oJCighEPbtzBk/KVu0zkGeQUwMaiM\ndVUalmflcW9fP4wOFxtLqkk2NCABw6/txmC9nr5dxaIHgnAuGjY2ltLCOmqqmud3lsnAP6hjFlZQ\nzJs3b15bG2zYsAEPDw9efvllRowYwZNPPklhYSFXXXUVTz/9NMePH6ewsJDevXuftg6TqX2n6Tqf\n6PUa0R5t+KPtc6Imi/dSF1BmqqBvYE8e7HsnIfG90CV1x5iaQnS+kZKKHEojdMT5xbjt65DLWX1o\nC2/P/zuVtWX0jOzBsoULufKG6S0ZzDKZHJ1vNEZDChplGRVVoQSFBbjV08U7kAJDHgUOX3aU17C3\nsp7iJiuhHmpuiA1hQkQAoT5nd4k/cf20TbRP20T7uNu9OYf8LPeeK3OTHbvNSWRswGn2+uP0+tNP\nknPGbucrrriC2bNnA1BWVkZISAj79u3j0ksvBWDcuHHs2bPnL5+kIPwR2SX1GOrNfHF8OY12I5dF\njmV279vQqZqDnEd8N6KfexFFWBh9s8zw6VJ2Zm9r2f/EieNceulIXvnPy/j5+3PH1CeYdv0rlKze\ni/FwqtuxPDxD0AeNQ6O2Y6paT1lxnVu5DInJgRYAHJIMrULO9dHBPNQzkgQfvVj4QBDOYedNtvOM\nGTMoLy9n/vz53HHHHS3dzAEBAVRVtV7P9Lf8/HQolWJu2l8FBXl19imc007XPluTi3lzySG0agXD\nxg1in3UTh6vTub7fJPw9fpMUFeRF8Fuvkfaf/xCVeoSaDxaT8agKLQFce+1kampquO+++3jllVeQ\no+Gj1zaR6dsfzwVf0++mWsKvubolcAYGTiRtRzbBQQUc3buR2FtmovdUU1eZTknWjzhMBsYru5Gn\n7s8To/qhUbR/GoW4ftom2qdton2a1RiaMDaePttZq1bhH6g/ZfnZIJP+xJQex48fZ+7cuVRVVbF3\n714ACgoKeOqpp1i6dOlp96uqavzrZ3qBCAryEu3RhtO1z7H8Gv67/DBqlRyQYbY66NK7hGqPdEL1\nITze/z481e4fFMnlInfJpzi37WJfg4Hn9x3AYrXy1lvvMnPmrS3blRTUsmbpYVQOC0MKvyN4xBCC\nZ96K7JcuaIetnuIjH+ByOimu6ENCNwM2UzEgxzNwID6ho1Go2u9D+lvi+mmbaJ+2ifY5yW53svST\n/afMdvby1jB99pC/nHTV1hedM35NP3LkCGVlzWuZdu/eHafTiV6vx2Jp7m6rqKggOFjMzCO0n8KK\nRt5blY5MBg9f14d/3jmEpEhfitPDkVfHUt5UwfuHF2B2WNz2k8nlxN06m/0JUTyzfSc2i4V5D97n\nFngBIqL8uGRcHDaFlqNRk6jdvoPi/72J02gEQKn2QeE5DqXSRXREKjZTMR4+SYR1vx//rpM7LPAK\ngnD2dHa28xmD78GDB1m4cCEABoMBk8nE8OHDWb9+PQA///wzo0aNateTFC5e1fUW/rfiMBabk7uv\n6kFSlB8BPlrm3NSfaePiseQl4KiKoLCxhA9TP8PmdE8mWbNmNU+9/R4olfxz+HDGF5STvWQB0u+m\nfuwzuAvx3YOolfuS3/0KzCeOU/jKv2goKmXz2uOsXWVu2TYofhZBsTei0v71hAxBEDrP8PFx9B4U\ngae3BpkMPL019B4UcW4srDBjxgz+/ve/M3PmTCwWCy+88AK9evXiqaeeYtmyZYSHh3Pttde2+4kK\nF58mi523lqdSZ7QxfXw8Q7qHtJTJZTImD42iZ7Q/H63RYZDvJoc83j30OY8OuhM5ct5//x1efnke\nOp2eL79cht7XRe0ni/DbspNcQw0x9z6CXKsFmifiGDs5keqqJvIMgXhHDcZWU8vmr09gc8kJDPFC\nG/oYwWHendUcgiC0k85YWOFPPfP9/xLPGE4Sz1za9mv7SJLEtsOlLP4pA2+9mudvG0SAj/aU+9js\nTpZtzWRX4xoUvgZ8jCHkfrWLzZs3EhoaxqJFX9G//0AA9ufuovHTz+laYUcREU7ko3NQ/WY2rFpD\nE8sW7EeiOeFKqZQzZHQMvQdFuE0j2VnE9dM20T5tE+3jbufGrFOu59t7UAQjJ3T7y/X/pWe+gtDR\n8hrNvHgohwylg4QYPxqabLywcD97j5afcnu1SsGtl3Xnnj63YUhpYsncN9i8eSMjRo1j8+ZdLYEX\nYEjsCJT3zCI9XouzpJT8l17EkpcLgORwYFm5iDjDwZbtZ8weQt8hXc+JwCsIwtlz3gw1EoSO4JIk\n1hZW4ZAkCsw2pBg9EV5KKo5V8/GaY6TlVHPLxIRW0zS6XC62r/2S7W98hUty0fumoYQNm0hWhZ3A\n3+VUjIkayfrpVrb9+C2jUhopfO0VQm+9ncaD+2lKO0xifDdG3T8QrY8YkiEIF6rOXljhjDNcnQ1i\nRpWTxAwzbTtcY2RnSTX9A7y4ITYUh0uiXO5CFaTD2WinoLiePUcriA71ItCn+YPhcDi4667bWLjw\nE0JDw1iwaDGWJC02XRmHMqsoK/Cge5Qfqt+MNY/3i6XID/YoiokrsmA+dAh7RQW6nr2IeORxVPqz\nOzPV2SKun7aJ9mmbaJ+TFEo5mUcrsFlb3+F6eWvof0kkir84br+tGa5E8O1g4uI/PavTxecninFJ\nErd0CyNIq6annycDA31QqxXU+ShxShINlSZ2pZdTZ7bTM8qXp+Y+zsqVyxkxYhQrV66lR1JPBof1\nIbkiHZu+lOJyC3v2W4kKORmwARL94inSWtjqVUmfrOZs5qh/voz8HJ6nXFw/bRPt0zbRPicpFHIa\n6y1UlrZ+Bp7YO5SYbqcehvRn/KXpJQWho2wvr6XeamdUqB8+6pPdyj5qJZO6BvJ0/1hmjI0nelg4\nCg8l2w4VM+nmh/nyy0X06dOXL75YSkBA8/AfH403jw28Fx+1N6rIDOo1Obz2VQortmbjcDYPM7I4\nLRjtTVT7Kll0RzdiP16AXCVWHRKEi8WwsbEEBOv5dSZYmQwCgjtmYQURfIVzQp3Vzs7yWnw0KkaF\n+p1yG41CzvAQX54bncgDM/pSW7qLI1u+xMM7mH53/JMMswuH62TyfqCHP4/0n42nSo8q5gg+XQz8\nuLeQlxYfJK00h1cPvENKZRpxPtHMGfggSrlIgRCEi8nerblUVzavaAQgSVBd2cTerbntfmwRfIVz\nwrG6JuwuCacksbeyDpPj9JmGcpmM6vS97F3xFp7evoyY/g9qiiQ+WX2UVw5ksbW0pmX/UH0ID/a7\nC61Ciz0imYAu9ZRIR/n4xCcYzNVMjBrHo/3vxU/re9rjCYJw4ensbGfxzLeDiWcurdWVbkJvzgKV\nN6VWBRn1JvZU1tFodxCoVaH73aIcWVmZTJs2Bblczorl33Lb1PHkVxipLDPSUGIk32nngLGpZf8w\nvR9xvtHsK0vG5lWIwteAXunBPb1vY1TEMOSy8+c7qLh+2ibap22ifU4yNlg5tLvglGV2m5Ok3mFo\nPf7aY6i2nvmKfjahU9mtNTRU7AJgAIfpiYoMZRLprm7srZTYW1lPD189o0L9iPTUIpPJePHFZzGZ\nTHz88WcMHjwUgCdn9GPzoWKWb8mmLs2A1NWL3bFO9lXW091XT4RFgyWrN+puzcsGPjv0cXw1Pp32\nvgVB6Fw6TzWe3ppTDjfy9NKg82zfxEsRfIVOZa7PBMA7dDQKlRcyeym66hx62o6QJ+/KYVcSx+qa\nu6XD1DY0WSls3Pgzo0aNYcqU61rqkctkTBjUle5Rfny85hhFRY341tsI7B1Ian4NW1OqUCkjeChh\nPEkRIWKtXUG4yP26sMKpZrjqiIUVRPAVOtWvwdcrcCAKlRdBQWOpqmrEYasj2FhI38ZC8hpzSbaE\nkWsO4dv/vAkyGZfdehUVxZvx8e6KRt8VubJ5CFFEkCfP3TaIb3fksn5fIXW7mj9YcrmMB6/tRfcu\nYjEEQRCaDRsbS2lhHTVVzUlXMhn4B3VMtrMIvkKncTktWI2FqHXhKFTus0kp1b4o/X3R+/chAOhv\nb+K9j9+htiCHpInXUBgxng/L7XSvyKC3/Hv8PbzQeEa2/Nw4Lh5doAer1mUAMGN8PL1iReAVBOGk\nX7Odf/XbbOezMbdzW0TwFTqNuSEHcOHhfeaL3GRx8tH7C9Dp9Cz+z3/IRc3eijrSnEmkOxOJayqi\nt/k4IYYDzTuoAjjqmEjoqAgu8/ZiXO/w9n0zgiCcV86U7Tx0TGy7dj2L4Ct0ml+7nOVKPS6XHbn8\n9JmFCxd+gsFQxTPPPE90RATRwOiwANJqjOwsryXbHEm2M5IuGht9ZBlUWSXqXTAqMoBxXf/6TDWC\nIFxYOntuZxF8hU7jcjZP6Vhb/AO1JT+h9gjDWtsNlzzU7TkuwLp136NUKrnzztktrynlcgYEetM/\nwIucBjM7K2rJrIdierdsMy7s1BN2CIJwcRPZzsJFKWVvIaUFifj6BOKpq0GnNSC5SqnIb06QkgBk\n/sjUEdQ0aklNTeGSYSPx0HoiSZJbtrJMJiPeR0e8j44Kk4VVxw5SJIXQ198TrbJ9MxYFQTg/iWxn\n4aKUvKcAm9VJIWogFAhFoXDi69OAv189Af71+PrUoZBq2LYxDYCB3T04uGEBNbU+1Df64XB5oVIr\nUasVLb/9/eu50m8zngED8Y+8slPfoyAI57bh4+MAyMs00NRoRe+lISYhsOX19iSCr9DhXC4Jm9VJ\naBdvJl/fG5vVgd3mxGZz4qFVYagyYrM5aLDakGxVbN69CYCxI2LpElFJl4hKAGx2NXX1PlTX+GAw\neNHQ6Ik2IQ/8wMOnfTMVBUG4cEiShCQ1/+4oIvgKHc5mdQCg9VC1/PwqKMgL38CTa+mazSGkHjlB\nt24JjLr6NeyWKqzGQqxNhSiMBahVVQQHVkECuCQVcpkdAI1XTMe+KUEQzju7N+e4dTs3Ndpa/hZD\njYQLzq/BV6M58+W3e/cOzGYzEydORiaTofYIRu0RjFfQICRJwmmrw/JLMK6rzEGuaA6+bWVOC4Ig\niKFGwkXHavkl+GrPHCALCwsB6N27T6symUyGUuOHp8YPz4C+HE4/QX5mAdfNGn52T1gQhAuOGGok\nXHSslua7U2N9E4WZFai1KlRaNWqNEk+9BpfLhVzevNJQfX0dAL6+Z17yz2ZxYLVq0Hpo2+/kBUG4\nIIihRsJFx5SdDUBuVi25WbWn3EYuOVBKTnbtSAbgwOo0avc3opJJKBVS828lqOSgUoJSKSOvunky\nDfUf6M4WBOHiJoYaCRcdf2slvcoO4AqNwqnS4nDJcLhk2F0yXDIFNqccB3IcMiUmiwkAmzaESvyb\nBwA7fqnIfur65XKxYpEgCGcmFlYQLi4OOyFNBXSZOgNdUne3oqAgL6qqGlv+3pazDI7CPU9MxNfH\nD5vZ9suPFZvZjs1iw2ZxYLPaydmWgpfG1dHvRhCE85RYWEG4qEj25ltWmfrMz1R+febr5+eLWq1q\nTtLy059yW/2yt9DGtP83VkEQzn+dne0sb7eaBeE0JJsNALnqzNnOjY0NaLVa1GcI1JLTCS4Xsj9Q\npyAIwh/Jdm5PIvgKHc5lb76oq2z1NNgacbqcp93WarWi1Z45e/nXu2n5H7ibFgRB+DXb+VREtrNw\nQapurEIFHPv8XSxqGU6FDJlSiUKpQqnVIleoUKo0qNRaaqvKUSBx5Iev0Wh0aDV6tBodWq0ehUqN\nTKFEplLiMjevkCRTiktaEIQzE9nOwkWn3ldNIBBdduZuHafRhEauQL1qPRJg/uXndIzJh/7UuVjt\nTuqNVnw8NWj+xIfN5rRRb23ER+OFWuH+DdllteKor0fp44Ncc+pv1oIgdD6xsIJwUckfFMmKoBLm\n9L2fYLUfksOB5LAjORz4eKoor6jGYmnCbDVi3fIzOm9vaqaMwmqzYLOacNit2G0WHHYbTrsNl92G\n3CnRN8tM6rhYEv7AOThdLpZtziYls4qaBiv+3hr6JwQxfXw8Cvnpn8Y4XU5WZa8jreootdY6/DS+\n9AnqyXXxVyKXoGrFUowpyThqalD6++PZfwBB02YgU4ilDQXhXCUWVhAuCvXWBmwqOX4BYahUOrcy\n7yAvrP4nhxo5nC58A0MYdvVdp63PJbmosdTy4p7/0Dsw8g+dw7LN2Ww8WNzyd3WDteXvmRNOH75X\nZa9ja/HOlr9rrLUtf49JbqRu44aT515d3fJ38Iyb/9B5CYLQcTpzYQWRcCV0uAZbA0q5Eg9l2/Om\nulwuLBbLGROu5DI5NmdzwpWP2uuMx7fanaRkVp2yLCXTgNV+6gQwm9NGWtXRU5YdK0+nMSX5lGXG\nlBRc1lNnVQqC0DnONNTIfpr/A2eLCL7C/7F33+FRVekDx79TMpNkJpNMek8gDQKhhi4dLKBSBEEU\nsayiLjasPyuuru6quyq6il0REQQpNoqgCCg1CR1SCOm9zkwyfe7vj0AwJgQQklDO53l8fGbuPbec\nDHPmnPue87a7aosBd5mGzIJaqo1WXKcY6qmqqsLlcuHn53/aYxpsDb1lnVp32n1rTVaqTjHFoNpo\nodbU8rZaq5Fqa02L22zVVTirqlrc5qiuwlFbe9rrEgSh/XT0VCMx7Cy0K5fkwmgzIblk/DflPXCo\nwKnCU+GJVqUhQOeDt5uGQC9vLOVlAAQFBZ32uLVWA3BmPV9vrRpfnZrKFv7h6b3c8da2HCTlrfZC\nr/ahytp8PWqV3heFLzgrK5ttU+p9UXp7n/a6BEFoPyKxgnB5kQBDIDJtFQrdyUbMevy/StfJFyX7\n8gHYadrH/eufx03mjofCE62bJ97uXvh5euGv1eGt1rKzpGHI1/sMer5qNwW94wOaPPM9oXe8/ymj\nnlUKFT0CujV55ntCYnASXr2bPvM9Qdu7t4h6FoQLjJhqJFxWauvsmNN70zchgHsmJFLvMGOy12Gy\n1VFtNmBwmMkrq6DabKCyqqFx9tT643TKcCqMWKmmxg4FdsAIlDY9vst5Zk9SpozoTHpeDYXlJlwS\nyGUQFqBlymkWVJ/Q+Woya7IpNpXgwoUcOSHaYCZ0vhplNNSnp2MrLACXC+RyVGHh+E+eevYVJQhC\nmxOJFYTLRlFlwyLmoX4aFHIFXiotXiotaAB908QKb6WW8DPw8NjbGT36SmrrbJRW11FQXUVJbQ0V\nJgNV9QZqrSbMikrkXlW4mQPP6DqWb8omv8zU+NolQX6ZieWbsluNdl6dvZZCU9HJcrgoNBWxOnst\nw1ON2PLzTu7scmHLz6NixTIR7SwIFyCRWEG4bBRVHG98/VtOjvBHJSXFAAQFBSOTyfDRqvHRqkmI\n8G2274LVB9i5r4ygIZ7Ntv3Z6aKdbxge0+LQ8+minfuktRxwZUpLw3/SFDH0LAgXEJFYQbis5JQ2\n9GrT6uvZXFxFtqEeqw7GMxkAACAASURBVLPlNIC5uTkAhIdHnPa4RRV1qFUKfE+xVusfiWhnQRBE\ntLNwWcmpaBjq3b05lzQPJQoPJUp3JXpvNWG+GnpE+xHuqSJE405GRjqBgUHo9c17un/kdLkoqaon\nIlCLTCY77TWIaGdBEES0s3BZ0UV4UWmxo3FCjcGKvbbh16UJyKec7eSADJA7yMvLJTyhDx9vzKBT\ngIZofy2Bek807somjWx5jQWHUyLU7/RD2SCinQVBENHOwmXE7nJRp3Oj2xUR3N8tEqfLRbXBSnmN\nmbIaM7kVdZQaLZRU1JGfeQgApUcwv+0q4Lc/HEfpJkevcydE70Gw3rMxcCrkDJ4jnyCinQVBENHO\nwmUh12jBIUnE6hqWlVTI5fj7eODv40HX4/uciHb++uscNn0G464cRPzwzuRX1lFWY6beZMNpcVJR\nY6a8sp59nBzmlTjzRdFFtLMgCCLaWbgsZBkaPuSdPE8f55eRkQ7AlYP7MrhfdOP7dXYnBXUW8k1m\njlXXkVtRh6nGiqXcTHhs68+GTxDRzoIgdHS0s2h8hXaTXlkBKCnM+R63Mhn+PlF4eMfh5hHSLFBq\nz540ALp06drkfY2bggQfDQk+Ggj3R5IkFmUVc7imjhBN6wkYTjiTaOdAffMpS+ca7awKPLM5yIIg\ntL0ziXb21ree/OVciMZXaBeSJOFwmgEvNroGgwk0pjoCC48QpNhFhFZDtF84vvokLBYLO3duIzGx\nO76+fq0fF8g1WdC5KQlwdzujaxHRzoIgiGhn4bJgqy9iomwtNbo+GLz6k2+qI98kccyp4ZgDttcA\nNRL6o9swHtiOxWKh14D+OF0SCvmppw+VmG3UO5z08fc6o2lGIKKdBUEQ0c7CZaKuah9uMgeJwZ3x\n8PYFfJEkiVqbg/w6M7k1leQbTZTYNGzbnQFAZXRv5qWkE+RmJ0LrSZSPPxFaD3zVbo0NbVZtPQCx\nutOvbPVH00bFApCWUU6V0Yqvl5re8QGN75/K5NjxAOwrP0i1tQa92oceAd2YHDseeUzDPqa0VBxV\nVSh9fdH27kPA1OlndW2CILSPwaMa/tEey6igzmhF46WmU7x/4/ttSTS+QpuTXA7qqvfjcKrZu0dO\nr/523D0aGlAftRs+ajeSfBuyEfn5a0l68i6USiVj+kRQKTNQYvemqNrFjuqGFIPucolwjTsRXhp+\nKWp4zhpzlo1v47VJEpLU8P+zLofUYjmp4YBnfUxBEDrGX/0eOBei8RXanNmQieS0kJcXzuGMAg6k\nFNOzXzg9+kWgdm/6Eayprubwgf0MGjSEWQNGIbkcGGuPkVtVQL7RSInDgzKXH1lGGVnGk89qvNzO\n7qO89OesJsPOVUZb4+vWphqtyPqhybBzta2m8fXw1KbDzs6qqsbXYqqRIFx4fv/5aJNh5zqjrfG1\nmGokXPSqShqmDUVElBAWqSIz04O9Oy3sTymk14AIkvqG4aZq+CiuXbsWSZIYNmwEADK5Ep0+jiR9\nHN0lCbulHIshk6rqQxTUmdnu6kUPTwNw5v9QxFQjQRDEVCPhkuZ0uti9S4+fLoSoaCO4suneBbol\nyKip1VGSe4yVBwNJ6NGVbr3DWLhwIQDXXz+p2bFkMhkqj0BUHoHogobgV5FCZP4P6HyHndU1ialG\ngiCIqUbCJS1tWx7FhRJeyiQiegzAbi7FbMjEbMhELytA71MLHKO+fg9rlrrx008/0ad3X2JjT9+T\nra9u6IVqfXue1TWJqUaCIHT0VCORUlBoM1XldaT8loPaUU/ILx9T8fUS3NQBeAcPJTj+DsK6P4Jf\n1ETUXl1x93CRdmAjLpeLMYN9yU77HEPZbhw2Q4vHdthqsJpyUGsiUar1Z3VdJ6YateRMphq1pGGq\nUZ8Wt4mpRoJw4Tkx1aglF8xUo1dffZWUlBQcDgezZ88mKSmJxx9/HKfTSUBAAK+99hoqVdv+ShAu\nPqnr9+KSQO004wiMovqndVjy8wiZfS9KLx0KNw0a3x5ofHvgcjlYc98S3JRKhg7ohZJcagpzqSn8\nETePYDx0cXh4x6HyDEMmk1FXtQ8Ajd/Z9XpPEIkVBEHoyMQKinnz5s1rbYft27ezYcMGFi5cyJVX\nXsmcOXMoKiri2muv5cknn+Tw4cPk5eWRlJR0ymPU17dtUuKLiUajvizqw7RvD+Zvl2BU+2JQ+5Ov\nisQWGI3b0f1Yt2/GIzYOpf5kj3XPnjTmv/0mN9xwAzPueJnMTB8K8lwAqJSV2OpzqatMw1SRgt1S\nhrF8B8gU+EVNQCY/+6cnS3/OYk9mRWMqBgkw1Nmw2JwkdT71qlorsn5gf8XBxiQOEhJGmxGr00bg\nz2nU7UlrWJ0dQJJwGmpxWS1ouvc462tsyeXy+fmrRP20TtRPU7//fJSczKaPisx1duw2J5GtfA+c\nKY3m1CNepx127tevH2+99RYAOp0Os9nMjh07GD16NAAjR45k27Zt53yRwqXDtG8Pxe++g9ZpZMKN\n3Rg3NYmAYC2FDh92RE1knzKR9P/Mp3br5sYy7733NgCzZs1C66Vm8Ji+DL5mMgb7WH76ZRC70xIp\nqwjH6ZQae71ITuSKsx/OPV20s9XubHHb6aKdjWmpLW4zpaXhsrYc2CEIQsc4XbSz/RTfA+fLabsM\nCoUCT8+GyM/ly5czbNgwtm7d2jjM7OfnR3l5y19kJ+j1niiVbTt+fjEJCPDq6EtoM8dStpH/zlvI\n5DK6PvUk/r17Ew30HRBF+oESNq1Lp5hYSrw6k/PDYfoXFJMT4c+qVSvo378/V199NQpFw2clIMCL\nmLhAKsu7snl9BrtSC0HqRGw8JManE993Bp66s6/L4oo6qoynjnZWqNwIaCE3cImp/C9HO+sUDjwC\nWn6+dLYu5c/P+SDqp3WifhpUVdRhOsX3gMloxV3lhu9Z5Ag/W2c8XrdhwwaWL1/OJ598wpVXXtn4\n/pmsCFJdXf/Xru4SdCJf7aUo15DPr2s+YaBLwqiW8eGBldwUFIrGreHHm1+wlsm39uHokXJ2bsqi\nSJbA0iNG3nvqdtyUbrz22nwUCkWL9XPFlXEk9g5l19YcstLLycrowo1BcvwCzr4unXYnvl6njnZ2\n2uwtXoPTKf/L0c4GpxLTefi7X8qfn/NB1E/rRP2cZLc70XqdOtrZcorvgbPR2g+dM4p23rJlCwsW\nLODDDz/Ey8sLT09PLBYLAKWlpQSK+YuXvYOVR3gz7X12xioxDO+Dl9nF4JUH+WbJP6mynGysZDIZ\nsV0DmT57ICOviuXn3z6n2lTDFcmTKT9UT53p1MOzvgEakodEIZfL0OrU6LzPLIXgn4loZ0EQOjra\n+bQBV0ajkblz5/Lxxx/j69uQrDwrKwuz2UyXLl349NNP6dOnD926tfylBCLg6o8uxYCHbcW7+fTg\nYmTAHUm30GfQdagiIzHuSSXyaA0p2dvRdktC565rLCOTycg4to/X3/oHUSGRTBl9L6W1cnZtOYrD\n4SIgWNvsUYXL5WLN8gPUGa2MuT4R3wDtX77mxGg9ZquDWpMVi82Jn07NkKQQpo2KRd5KdqQu+ljM\nDisGqxGL04qvWs+AkGQmx45Hm9gdl8WMo7YWl8WC0s8P3ZArCJg6HZn8/MzquxQ/P+eTqJ/Wifpp\nKjxaj83qoN5kw25zotWpSUgKZvComDPOktaa1gKuTjvs/OOPP1JdXc1DDz3U+N6//vUvnnnmGZYu\nXUpoaCgTJ04854sULk6fp37PzprNeCo9uKfH7cT4RAPg1asPMc+9SOab/6LrkRqO/vtF6mbfS0JU\nLwAMhloefngOcrmc9z/9jDi1J7u/XE+2ZwKp2/I4kFpIz/4R9EgOR6Vu+Jju21VIeYmR+G5BRMWc\neyQiiMQKgiB0TGIFmdQOZxPPGE66VJ65uCSJlZuz2Gj/GJncRTzDeGDk+Ga/Fl0WC4ff/w9u+zMx\neciR3TqFmIQhTJs2iZSU3dx33wPMm/cSAPaqSoo/eJ/0Cjdy/Xpil6lw91DSa2AkkZ18WbEwFaVK\nwfS/9cPD89zmlS/ekNFiPt8xyeGtJlZYlvFti/l8R4Rf0Syxwgk+Y8aet8QKl8rnp62I+mmdqJ+m\ntm7IbDGfb1Jy2HlJrHDOz3wF4Y+sdifvrz7ID9vyUZf2AklGumsrb65fh8vV9Lec3N2dxAeegvGj\n8bS4cLz7JePGDiElZTdTp07n2WdfaNzXzdeP3q+8QFJ3XwZnf02M8QBOu5Ptv2Tz9Se7cThcDB0b\nd84Nr5hqJAhCR081Eo2vcFZqTFZeXZzKriNlxIV788KkydzWdSYyZGQqf+aVtd/gcLqalJHJZMRP\nmonr1uk8su03Mo7lMTKpK/99/c3GaUUnyFUqgmbdQejNM4iuSGNQ5mISg+yN22O6tBwodTbOJLFC\ni+XOMbGCIAgXjjNJrNCWROMrnLH0whpe+GwXx4qNDOkezKPTe6PzVNEvtDsP9pqNwqWmyH0nL6z9\nApvd0aSswVDLIy+/ypGqKkbGRDMvugv7X3oSc0VZs/PIZDJ8Rowi4vH/w13rQchvXzIhOJvZjw8/\nL0EQJxIrtORMEiu0pGGqkW+L20RiBUG48JxIrNASkVhBuGBkG+p5fdleak02knsGc8f4rrgpT358\n4v2j+b8BD+Dm8KLK4yDPrP8Ao7lhOlplZSU33jixcaj5g3W/UJTgj67UQNYLT1F9cG+L5/SIicVn\nxEgArOlHOA/tLiCmGgmC0PFTjUTjK7RKkiR+L63hk4xC3AMbFstIy6hgW17zxSRCdQE8f8WDuDv8\nqfPI4blf/seeQwcZP34MqakpTJ9+M/Pnv4e3zo+hc18hc0Q8SouD0jffoHDNqmaRhjU/b6By9UoU\nOh2h9z90Xnq9J0wZ0ZmIQC3y44eUyyAi8MwSK4RpQ5Ef/6cjR06YNpQJna/Gf/JUVBGRcGJakVyO\nKiJSJFYQhAvUwBGd8QvUNP6wl8nAL/ACSaxwPoh5ZSddTPPsbE4XK3LK2FxSjadSwV0DO+NySeTm\n1bI3swKfIE+i9E2XX/NwUzM0si87sjMpLNzHv+c8R3lJKQ8++Agvv/wq8uMNk0KuIDZpCLs0lXhk\nFsD+wxiKcgkZOBCz1UnNzxsoW7wIhU5H+KNPog4NPa/3JhIrXJpE/bRO1E9TF3RiBeHyVG218/6R\nAvZUGonQuDOnWwSddZ7cMTaB0YMicVqdLFx5iF8yS5uV9XRzZ5Q8gV9f+B6LoY7et45kyt/ubNZz\nlcvkjBt1J9Wzb6DYT4kjZQ+75s6lfOlXbdrwimhnQRBEtLNwQZEkidrSHbx3IJPieivJ/jru6hKG\nt8qtcZ+bh8cybngnXHYXi1YfYv3h4ibHWLp0MbNuvQm5BBMevpfYcQnM37uA3fnpzc4nk8kYlTQe\nj/vvZn+cB86CEqp/WgcyWZs0vCCinQVBENHOwgVEklxUF6yltmgdeqnhF2G93YKM5s9apwzqxKQx\nsUhOiaXfH+HH/YW4XC5eeeUf3H//PWi1WpYt+5YPn/w3SW4jkBR2Pk3/lJ+zUlo8d//w/qinTmR/\nbMN6zRFPPNUmDS+IaGdBEES0s3CBcLnsVBxbjqliF27ugUwOtBAqK+VQrY3FmcdwupovhHZdciTT\nrk5Ackks/XYf46feyBtvvE5UVDTff/8TAwcOAuCeoeMYor0WSZLxTe5SVh78pdmxthXtYl3uL2wZ\n5If5lcfwiD331WVORUQ7C4Igop2FDud0mCnPWoS59ghqbTRB8bcRFHklN0WoCJWVctjg5Mv0rBYb\n4Kt6hjFukC+/L3malC3rie3el3XrfiE+PqHJfjcPGMpVfjciOdzYULqGz9JWH19PVWLNsQ0sOrIM\nD4U7z414kJ6naODOJxHtLAiCiHa+jFxo0Yb1xgrKjy7CYSnB06cbAZ2mIlc0DLd4asOId6/jWE0F\nx2waigxlJPn5N8n6s2/fHh782zQqS/OISBpN4uiHkLSeJEU2H4LtEhKCpzWCg1WHKbJnk1leTLYx\nk435W/B11/Ng79kkhsa0S/2IaOdLk6if1on6aUpEOwsdoqLUxIFtK3DZK3HJw/GLnoxM3jTRlY9v\nV26NDydUVk56nZIvDh1oXD5y5crlXH/91ZSWlvDccy/yzgcfoHRXs2FLLp9tymzxnCO7xXNb3J1I\ndd5k1h3k9+JdhGtDebTv3wnWtE9eaBHtLAiCiHYWOkRBTjWrvkwjOzsIu0OB3FVAesq6FvfV6aK4\nvWssofJKMszufLZvN88+9xSzZ9+BTCbns88WM2fOgwyKCeDeqT1QqBVs3p7PB+uPtJiiq3t4KCG1\noxpfP9TnHrzVumb7tRUR7SwIgoh2FtpdxsFSfvh6H06ni+Thg/AKmYHVpsJTsZODv3+Ny+VqVkaj\nCeSOxK74GI7x9mNP8v6Cd4iJiWXdul+45prxjfv1jfRlzo09UHoo2Z5axDs/HML1hwa4vMbMy4tS\nOFZgJrbiZl4f8jIeSvd2ue8TRLSzIAgi2lloN5IkkbYjj43fHUbpJufaG3sQ2zWQwPBOBMTcTr1Z\ng5fHEQ79/hkOW/NffRnpR1n8yIMU79tN1MDh3PLaq0R3imi2X88wPQ9M64mbxo20A6W8sWo/LpdE\nRn4NL36+m6KKOsYmR/DAlCQ81Mpm5duaiHYWBKGjo51FwFU768iAh9Rteez49RgaLxXXT+9FUNjJ\n3pi7pxZPfXfK8tPx0pRRlHMYL7+uuKkaGo3ly5cya9YMamtreOzxp0i+7U6KFEHkl2fRzdcLpdKj\nybkCte7EdtKzO6uCkiIj3/6Ww9b9xThdEjOvTOC6IdFNArdOaK/6SYzWY7Y6qDVZsdic+OnUDEkK\nYdqo2Bav64Qu+ljMDisGqxGL04qvWs+AkGQmx45Hm9gdl8WMo7YWl8WC0s8P3ZArCJg6HZn8/PzO\nFQEzrRP10zpRP02FR+uxWR3Um2zYbU60OjUJScEMHhVzXtaSFwFXlzlzZibZjz1M0a4DAHjrPfHy\nbj7U66nVEdfvLgx1oXhpKsnZ+xG1VeXMn/8G9913F2q1O4sXL+OxR5/krp69CFeZOeoMYtGBfZjr\nipsdr2ugjrnTe6JwP/kL8uEbezKid1jb3exZapjuRIvPpk9bDqnFclLDAc/6mIIgdIy/+j1wLkTP\nt5219y9Pe0U5Bf95FaehFn15BnXaIEpNSvKPVdEpzg83VdNhX4VSiV9YTwpzSvBUFfLCS//h/Y8X\nExoaxooV39O//0AAlHI5PQMCOFpVRo7Dh4KKbBK0LlTqk8897S4Xv5bWUOPjhq3czD0Tu9Gzc8vD\nPCe0V/0s2ZjJht0FmG0NEY1mm5PsIgNmq6PVqUbfZH7PpoKtWJwN6RItTgs5hjzMDisBG1Op2fAT\nktkMgGQ2Y8nOxmUxi6lG7UTUT+tE/TT128Ys9u8uxH78e8Buc1JWZMRmdYipRsJf5zSbKXz7LZwm\nIwHTbyZg/DV0L1hPaG0GFaUmVixMpaaqvlk5hUJBp57X89hLW/nmh910jgrgkwXv0qVL1yb7qRRy\n7uzWhUh3F9lSOF9l5GCo3A8cT8xwuIC0SiOR3h68es8gkmNafs7a3sRUI0EQxFQjoU1ILhclHy7A\nVliAz6gx6MeMxX/iDUQ/9Sw9VHl0qkzDaLCy4tNdlBQ2nQZTXV3F9OmT2fz7Tvr0TOLD16ejV24l\n++C2ZudRKeTcnhhHpIeMbCmSr4+VsSdnF/87lEfR8cQMd3cJb5KYoaOJqUaCIIipRkKbKF22hLp9\neyE+hoBpNzW+7x4dTfSz80i+Ipou5duw2Zx8+0UKRw8UAlBQkM91113Fjh3bmDhxMqu//xnvkKlI\nkhyF9SfSU9Y3O5daIef2rp2J8pQ3NMDlPlicLiZGBTK5UxDK8xRsdL6IqUaCIIipRsJ5V5GyHcNP\n6zF4ynm/p5Fd5XubbJcplfhPmMSgB2fQx7EPyeVi/XcZfLNgCePGjSEjI53Zs+9jwYJPUKvVRMb3\nQhM8HZtdhYd8Owe3LW82F1gpWbhGuaXx9V3xIfQPvDAbHDHVSBCEjp5qJBrfS0yluZqV2WtwyUBX\n72LYnnq+2ruYn3I3NYvkc4+Mot//zWFkjIW83BQeeukhSkqKef7p53nxxX8h/0OPNSgiBv/Os6g3\ne+LlfohDvy/EYbcD4LDVUJrxGdTn8bD/fl7sE02UTtuet33WRGIFQRBEYoXLSFtGG+Ybi5if9j65\n6joC+g4kuMKOb04FXXNt/OY4SpGHja6+8U3mr8nkcn7N2MsrbzyBy+Xkhmvm0tc9lBAfCXVwSJPj\ne2i88PBOpLwwHS9NKUXHjuCp9aPy2Fc47TV4BQ7CN2I8cvlf/8XYXtGYIrHCpUnUT+tE/TQlEisI\n5+xgRQZvpr6HwWbihrjrGHfFTKKemYfvdRPQml1M2lSL8ps1fJ7yOXanvbHcxx+/zz333ImHhydf\nfLaEYb2GUOgexdpvDlDw0Uc46+qanEej8yE2+W4MdcF4aSqoyl2E02HCJ+xK9GFjz8vE9LYmop0F\nQRDRzsI527Q/m//t+QSL08rNXW5kVMRQ4OSz3chnnsctPJzuRy30+HwLS1e/Tr29nrVrf+Sppx4n\nKCiY775bx5irruSG+4YTFupBpSaCXwu8SX/+BUx70pqcT6V2x013LTZbwxxhTcAYdIED2/2+/yoR\n7SwIgoh2Fv4ySZJYsyOXhT9k46pryAq0fO8mqupMTfZzj4wi+pl5+Fw/AY1Vov+P6Xz5f/cw+547\n8PDwYPHiZSQmNgQSuamUjL+5HwndgzC4B7DTeyhZ739C8Yfv4zSZGtaH3p7Hzz9m8OvvQ1H4zsEv\nfHC73/u5ENHOgiCIaGfhL3G5JL7akMmyX46i9/JgbvJstLYILOpS5m15i9zKpsOqMqWSwOsnEfXs\nPIq81Mxftg5zfT3PP3A/SUk9m+yrUMgZOb4LfQdHYXbzIiXyOgr3ZHDsuafYtGwn2zdlo/FSMfGW\n3oRFtdzgXMhEtLMgCB0d7SwCrtrZ+Qh4sDucfPDtQbbuLyHMX8PjM3oTHqBjZKdk0rILMboV8ntB\nGuHunQjSNe2pOdXuPPC/d8jMy+VvXRO53iWnsiALn649kKtO/tKTyWSERenx1LhxLLuWIl08xzzi\nKK9xoff3ZMKMXvj4ep7TfbREJFZonQiYaZ2on9aJ+mnqRGIF8/HECl7tmFih/fO5CefE4XTxn6V7\nycivIT7ChwduSMLTvWH1KKVCwTOjb+PtrSvJYAfvH/qQG83TGR6XBIDT6eThh+ewO2UXkydP5YZ7\np1P65dcEpR4gM+Nxwmf9De2fem/deoehqK3gl+3VSHI3/HzVTLilN2r3C2fFqnMhEisIwuVLLpdz\nxZg4BgzvjLvKDYvN3uY93hNEz7edncsvz7QKAx/vyeXogYYh5b9d25UQP02TfWQyGQOjEqmqkJFv\ny+Jg7X4sBg86+wRyzz13snr1Cvr27cdnn31JZHgCll5d2Fm1j5ACE3U7d2ArLcEzoUtjL9hWXobx\nwzfwqK+izi+aabMHoVK13W82kVihdaLn0jpRP60T9dMyhUKOf4AWi8V++p3PgphqdAnIqK3jm2Ol\nWNRydF30ALzx9V72ZrUcKj+z3xjGB08BScaa3KUMu3oY33+/miFDhrJ06Qrc3RtSCiYExDNq1pN8\nd30kJX5KjDu2k/PsUxhTduM0myl6+01cJhM9Jgxh1kPDUCrb51dhWxJTjQRB6Ghi2PkiUFhnYXFW\nMXKZjBkxwezyrmWvSkHtgUrmf7OPWVd3YVjP0Gblxnfvh8tYz0OP3YqxqJqEQcksXrwcD4+mie/D\ntCHcNeZh3vX9iNDUHAbvN1H83juN231Gj8Vn+Mg2v8/2ciZTjQL1zZ9nn+tUI1Vg4F+/aEEQLimi\n53uBq7LY+SyjCLtLYlpMMIl6LbfGhXJjciQBfQNBKeezNUdYsSW72TPGgwcP8PTsuzEWVRN/dV+S\n7u/Ly1sWYrU3H1rxddfzcL+/Uz2oG4uu9sGuOtnDDbhxepvfZ3sSU40EQehoovG9gNXZnXyaUUid\nw8m1kQF00zeslyyTyRgY6MPcwXF0vSIchbuC73/L4X/fHcR5POHB1q2buf76qykpKeaFF17m67dX\noLL7UaU8ytMb36b6TytXAWjcPLm/112Edu7Oe5N9OTYgmpj57yJTXPxDzX8kphoJgtDRRON7AVuZ\nU0ql1U6/AB2Dgpr3uAI9VDzUL4bx4+NRermReqiM579MZcnXS5k2bRJWq4X33/+Ee++dQ6i3nn+M\neBCNLQyzqoR5m9+ioKr58+LS+nLyjYVIchmyscNReJ7/6UQXApFYQRCEjiQa3wuQxZBNdcE69MqG\n4eE9lUZ2lde2OHVFKZcxMS6EudN74+nnzpbVC3lgzl2o1O4sWbKCSZOmNO6r8/DgpTH3EeCMx6Gu\n4V873+FAYW7j9iNVmbyZ+h5Gm4kpcddzZfSl85z3z5Zvyia/zITreJW6JMgvM7F8U3ar5VZnr6XQ\nVISLhhEGFy4KTUWszl5LxYpl2PLz4ES6RZcLW34eFSuWteWtCIJwERKN7wXG5bRQkbsCY/kOkmo+\n5xpNJgokVuaUsSirGJPd0WK5eL0nmuxVHN78Ge5aP/rPeAVrSJdmDbZK6cZzo+8gRtEPSVXPewc/\nYEvWIXaWpPK/vR/jcDm4vdsMRkZc0R632yFEtLMgCB1NNL4XGEPJVlyOejz1PVBro4iy7maKbDXh\niioO19Qx/0Ae6TVNn9fa7XZmz76DTz9eQEJCF+598VM02nC+WnWI93Yda9Zgy+Vy5g6fSj/NGCSF\ngyV5n/H5oSWoFSrm9PobfYOaLjd5qRGJFQRB6Gii8b2AOKzVGMp3oHDT4Rs5nqC4WQQn3EWgbwzj\n+YlB8jTqHTY+zyxi9bEibE4XkiTx8MNzWL16BQMHDua779bxfzePYPLIGFx2Fym/5vLKL0eaNdgA\nt/YbS6hheOPri7hAmgAAIABJREFUuX3uI04f05633CFEtLMgCB1NNL4XkJqijSA58QkdjVzesHyj\nyjME/+hJhHV/gCuCfbnBbRN6athRUcf8vYd48vkn+Prrr+jTpy9fffUNPj4NC3BcOyCK+yZ1Rw4U\np5WxYHMm3+aWYT/+PNLucLJg9QGy093R5Y/liZ6PE6oN7qhbb1ci2lkQhI4mFtm4QJiNedTXHEKm\nDMJT373ZdqVKhz5sDN7BQ4kq38P64hyWrN7F7wsWEBQWwofvvY7nnyKTkxMC8b5JxZvL9lF7qIoN\nVidZtfVMCPNn2Zp0MgpqSYjw4f4/rA99uZgyojPpeTUUljcEXcllEBZwZtHOmTXZFJtKcOFCjpwQ\nbTATOl+NMhrq09OxFRY0BF3J5ajCwkW0syAIzYie7wWiMH0dAFmZbqxdsY/qyubDxAByhRrf4AHo\nii1sX/AqHt4+DH/hPVZVmMk8/AV1VfuRpJMBQ3HhPjw9sy++OjWmo7Vk7iji31+mklFQS3KXQOZO\n63nZNbwgop0FQehYovG9AJSXGMnPUyJJENOpgM6ha9i1YQVb1h+gvq75Iui7d+/knnvuxN3dna8W\nf0P/+CiKCWJxXV+2H0ul6OB8DKW/4XI0LPAf6q/h6ZnJ6PXuWCstOOodjO4bzj0TuuF2CazVfLZE\ntLMgCB1NDDt3MIfDycbvD1Nd0YmYHiPRqo8gVaTRJf4YDkcuKRtD0fj1I6lfIm4qBXa7nQceuBeb\nzcaiRUsZ3K8fgySJlAoD3+eVsdE1mFxrHkMLN1NbshmNX290AQPIsylx6+EHvxaSEKXn5rHxHX3r\nHUas7SwIQkcTjW8H2/nrMaor6knsEUhkbDQQjU/ICAzlKdQUbycqogBJKmDvr7+hDRjA5p3bycrK\n5Lbb7mTMmKuAhuUmkwO86eTlwdfZpWTVRVKmCGMUOwku30l6WS4/ukbhoVbyzweGEOJ5eQf/nIh2\nrmyhAT6TaOcqa3WzbQ3RzuCsrGy2TUQ7C4LwZ2LYuQMV5lazd1cBnrZaQn75FEtew2pTcqU7PiFD\niOr9EN5hE3C4fAn0L8NhWMar/5qHRuPJo48+2ex4fu4q7u4azuhQX0xOBattg/jROZI1zmEA3BIb\nctk3vCCinQVB6HiKefPmzWvrk4jkzSf9MZn1j1/swGKH0Lps9JVZGLf/jjo0DFVICAAymRx3TTD6\nkH6gCOPVN74gdX8W984aRGyQAavFhsY7BJn85ACGXCajs86TWG9PsqqrKHXpcCHnxs7BdD2emOFC\n1l7JvhOj9ZitDmpNViw2J346NUOSQpg2Kha5THbKcl30sZgdVgxWIxanFV+1ngEhyUyOHY82sTsu\nixlHbS0uiwWlnx+6IVcQMHU6Mvn5+Z0rkqG3TtRP60T9nFpb1I1Gc+of3aLn20Gqf96Af84O5JKT\nXF0iab1vp1IdRNG7b1O15scmy0LKZDKqTDJW/vg74WHhjB0xCaXCgsO4mdw9/6E0ew0OW9MVlEJV\ndqbIv0OOi67eHvT082rvW7woSJKEJNHiutmnLYfUYjmp4YBnfUxBEC4foufbzjw9VeQv+4aKZUvx\nVdvoM/Ma7Ep3CgtMlGg6YdCGIkv9FXl5IZqkHsjkciRJ4qGH/k5GRjr/feNtRo+bgckSS36OCXd1\nDTJHPoaynVjry1G5+6Bw86K6YC1OcyFjozvTLyKho2/7jLXXL/MlGzPZsLsAs60hstlsc5JdZMBs\ndZDU2e+U5b7J/J5NBVuxOC0AWJwWcgx5mB1WAjamUrPhJyRzQ5S5ZDZjyc7GZTGj6d7jvFy36Lm0\nTtRP60T9nFp793xFwFU7kiSJTe+9jmrddpS+foQ/8hiqoGBGJ0DPfuFs+yWbghyojLiekMyjJL7+\nJjF/n82KtT+wdu2PDBo0hOuumwhAROdQwjtNI/NgMemHfyckKAeZ7BAlhkPI5Coklw03jyA0vpf2\nOs1/xemmGt0wPKbF576nm2rUJ63laGdTWhr+k6aI576CIDQSw87txCW5WJKxktoduwEoD/NC4e/f\nuN0/yIvrpvdk/I098A3QUKyL5RdXL5bMW8CTTzyCRqPlrbfeRfaH55EymYz47qGMnDQJh3oqKXt7\nUl6hR3I1/HrzCRmFTCb+xH8mEisIgtDRxDdzO3C6nCw89DVbC7ezZ1w8td5q9Ptz2P7K49Sbmn6Z\nR3b2Zeod/RhxTTxubjB/02qMJiN3Tr2biIioFo+vVCroNSCKa6aNo8Yyhu27kigojsHDO649bu+i\nIxIrCILQ0UTj28bsLgcfH1jErtJUOukieXTSk3R97mUqInwIyKniwD+epKzwaJMycrmMrj1DsWiO\ncCx/H106J+OrH87i+b9y9EjZKQN5VGolhhozlVV6/KPGtMftXZTEVCNBEDraGTW+GRkZjBkzhkWL\nFgFQXFzMzJkzmTFjBg8++CA2m3iA3xKr08aCvZ+yt+Ig8fpY5vS6C61Kg9bbj/5PvUp5r2h8qiwU\nv/IyR/dtbVI2Pf0Ir7zyAv7+/nz8+ktEmrOps0isX3WIlV+kUlzQfBhzz448SgoNxHQJIC5RrKbU\nmikjOhMRqEV+fBRfLoOIwDNLrBCmDUV+/J+OHDlh2lAmdL4a/8lTUUVEwolpRXI5qohIkVhBEIRm\nTtv41tfX8+KLLzJo0KDG9+bPn8+MGTNYvHgxUVFRLF++vE0v8mJUb7Hz7PoPOFKdSbx3PPf1uB13\n5cnej9JNxZA586i5ZjBqqxPrOx+xZ91XAGRnZ3HTTTdgtVp5/fX5xF0xmKsenMBQ6zYCTDmUFhlZ\ntSiNtSsOUFNVD0BFqZFdW3Lw1KoYdlV8k2fDQnMisYIgCB3ptI2vSqXiww8/JPAP69Lu2LGD0aNH\nAzBy5Ei2bdvWdld4ETLU2Xh1cRq11Q0NYGZ5AQeK8lvct/8NdyPdPg2nQobnsnV89fKjXHfd1RQU\n5PP0088zbty1ALj5+dP1ybkMCqymb8EP+DirOZZRwdKPdvHLj0f4fuk+XC6JkeO64O5x+WUpOhsi\nsYIgCB3ttFONlEolSmXT3cxmMyqVCgA/Pz/Ky1v+IjtBr/dEeZlkz6moMfPakp0Ulpu4csBVlKv3\ncYTtfHTkI26w38i0gKEEBDRd8CJgwo1kx8Xy3dwnePZ/32G02/nvf17n4bmP/OnoXgTOexrvz7/A\ne/VqqvwTyIkcxpF9JQD0SA6n74CWg7IuJn+un/OtuKKOKuOpo50VKjcC/DXNtpWYyv9ytLNO4cAj\nwL/F7WerrevnYifqp3Wifk6tPevmnOf5nskqPtXV9ed6motCWXU9r321h0qDhav7RzJ1RAwyWSxL\nU/34tWoNy48tJqeqmNv6XIX8T8sN7sso4ektv2N2OHi6V1/iDu0h/eAhfAMjmp1He90NBHn7Ifvy\nC/TVR8nuP5PcconkK6IpLze21+22iYAArza/B6fdia/XqRMrOG32Fq/B6ZT/5cQKBqcS03m4r/ao\nn4uZqJ/Wifo5tbaom9Ya878U7ezp6YnF0rDCT2lpaZMh6ctVRnEtLy9KpdJgYeLQTkwdGdP43HVa\nn+Hc3GkWMoeaFMMv/GPjp1jt9sayP/20lptuugGb3c57Cz4i+erB6MvryX3pBXIP72rxfD7DRhD+\n8KMoFHJit33KrMkhqN3FmilnQkQ7C4LQ0f5S4zt48GDWrVsHwPr16xk6dOh5vaiLTUGdhfk/HsJQ\nZyO2k57rh3RqFvA0JKYrj/adg9LmQ7kinac2zKfcZGDVqm+YNWsGMpmML75YyqRJUxn00ItUjeqD\nZ70D05vvsn/TymbnlCSJ+vQjSDYbSr1e5Io9S9NGxTImORw/nRqZDPx0asYkhzNtVGyr5SbHjmdE\n+BX4qvXIkOGr1jMi/Aomx44nYOp0fMaMRennBzIZSj8/fMaMJWDq9Ha6K0EQLhanbXwPHDjAzJkz\nWblyJQsXLmTmzJnMmTOHVatWMWPGDGpqapg4cWJ7XOsF6ZjRzMdHCnGP0CJXysk6Vs1r3+3HcSLi\n9Q86+Qfxv8nPoLVFYFGXcts/72T27Dvw8PBk6dKVjBrVMDdXLpczcMYD2G6ZAIBq0Wq2L56P6/gx\nJZeL8qWLqfpuNW4BAUQ88RRKH3373fQlRCRWEAShI8ikdviGuFSfMWTU1rEosxgXEjd2DkZpcTJ/\n+T5s9Q4CwrQ8M6U3Xn+KPA4I8KK4tIYZj9/FpoXLUWndee6Nt7l7wrQWz5F7eBdV772Ppt5Bebcw\nku95iuqlSzBs3YIqNJTwuY9dUg1vez2TWrwhgw27C5q9PyY5nBlj4k9ZblnGt2wq2Nrs/RHhVzA8\n1UjNhp+abfMZM5bA6Tef2wUfJ57ZtU7UT+tE/ZzaRfHMV4D9VUa+yCwCYGZsKD18vUgM9eEft/dH\n5+9BeaGJJz/bSW5lXZNykiTxxn9eZdPC5eh8fRnx3AT2aFL5ZPu6Fs8T1bUfkU8/R3WAJwEHC8m9\n/+8Ytm5BHRVNxGP/d0k1vO1FTDUSBKGjicb3L0gtOMKSo8UoZDJuiw8lwefktJRAL3f+Nas/EZ18\nMNdaeWnhbnYeqwAaGt5HH32U1157hcjIaDas/YU7Bs1B5lKSUr+Rlzd+gcPZ/IvfLyiSxGdeptr7\nZC86/NEnUHiJKQN/hUisIAhCRxON71kylu/kUEk2EjJ8ZEYCVM0bS3c3Bc9P7UW/5FCcVifvL9vP\n8h3ZPPLIA/z3v/8lPj6B775bS3R0J0Yl9OT+Hvcit3lRKNvPUz+9Q3Vd096y2WHh4/QlLBznw5Fh\nMUS+9TYKD4/2uuVLjkisIAhCRxON7xmSJInaki1UF6xliCqTWLdqypxa3j1wlKKa0mb7y+Vy7h3T\nhUlXx+FyOXjp0TksWvQ5vXv3ZtWqNYSEhDbu2yU4nHlXPIyHLZg6VSHPb3mDrLJiAEz2Ot5O+5DM\nmmx6B/Zg3C3/h7tG9HjPhZhqJAhCRxON7xmQJImaoo3UFv+CQuVNeMJMZvVIZqDWQK2k4YPMCg4V\nH22x7JgEfyp2vUtR+lZ8w7rS66aX8NQ17wX5abW8POZ+gl2JOFUG3tjzP9Ye2cFbqe+Ta8xnYHAy\nt3ebgVIu5vKeDyKxgiAIHUkxb968eW19kvr6izfrkSRJVBf8iKl8J0q1H0Fxs3BT+yCXyUgICEXj\nKOFInYJ9BgmlpYho36DGsiaTiZkzp7Ft6yYGXTGCHpOfwVDtYnN6Gb1i/fBybxoJrZArGN65F4XF\nNkpd2WQYD2O0mxgRPoRpCZNQyC/9JTo1GnW7fF6W/pzFnswKToT6SzSsyW2xOUnq7HfKciuyfmB/\nxUGk4yUlJIw2I1anjcCf06jbkwYnJhBIEk5DLS6rBU33Hufluturfi5Won5aJ+rn1NqibjSaU494\niZ5vK5xOF3s2r8JUkYJM4UtQ3G0oVbom+wyM6sasKHfU2FlX5cGyg7twuJxUV1cxder1bN26mfHj\nr+frr5bxn9lDCYv2wVRl4fnPdrMnv+UAnesSRqDI7wuAXhnAlLjrkcvEn+p8EdHOgiB0NPGNfgoO\nh5P1qw6Sc9SJJIHDVkPOkT0t7hsXGM29XYLxlZtIq/fhrU0bmDBxHCkpu5k6dToffvgZarUaT5Ub\n7/59KD16BeMwO3h7yV5+3FvY5Fh5pUb+9WUqpuIArtX8nZeGPSbSA55nItpZEISOJhrfFthtTtYs\nP0BOZiUKj1ic6nFIkgw3x0YObV/VuNLUHwV4+XNfUhd8qtN5b+4jHDl8iJtumcnbby9okhVKLpfz\n0NWJjBsdgyTB8jXpLNiYjsvlIquwln8vTsNUb+fWqxK45hLIUHQhEtHOgiB0NNH4/onVYue7pXsp\nyKkmOs6PcVOT6NwtGa+wW7BY3NGq93Ho98+xWy3NypYUFLL4iccwFOXR88bb8Z1+D5kVuS2eZ0q/\nKO6+oTsKtYKduwp54N3feXVxKlabk7uuS2RE77C2vtXLloh2FgSho4nG9w9MFbWs+mwnpYUG4hID\nuXJit8Y8xAGhUYR1uxtTnR6dJp/M3R9gqjmZPu7QoYNcd93VFBUW8swz83h27p3YZSq+yLXye86B\nFs83MCaAp2/ti8rTjXqTDYdT4u+TuzOwW3C73O/lTEQ7C4LQkUTje5y9qpLt/1tKVY0djcLOiCtj\nUSiaVo9G50N8/9kY6qPQetZQdORjygqOkZKyi4kTr6G8vIx//es/PPDAXIZ17sHNEUqUOPm+XM3q\nw7txtjBcXYML336BIINxwzrRO67lHplwfi3flE1+mQnX8cBklwT5ZSaWb8putdzq7LUUmopw0fC3\ndOGi0FTE6uy1VKxYhi0/D078nV0ubPl5VKxY1pa3IgjCRUg0voCttJT8f79MUFEaWnsNdU43Vr61\nhvrq5kEySpWKxEEzqbP3wV1t4de1L3PD5GsxGo2888773HHHXY37dg2OYXZ8AN6yOnaYvPl8fwr1\nlpPD1TvKalmWXYq7Wsm8vw9iyuBO7XK/lzsR7SwIQke77Btfa2EB+a++jKOyktDrxzH1wbEEKWqp\nkLxZ/t4WKjLzm5WRy+V07X8tv6Z48/Dzy7E7bMx78kGmTGmemSjEO5D7uscRrqwly+bDP3/dQaWp\nms3F1azOLcNTqeBvXcKJ1IrlItuLiHYWBKGjXdaNr+VYNnmvvoyzthb9tOn4jb8Od52GCQ9fS7x3\nHXVyLauWHSL7t33Nyq5a9Q1PPPcCcrkb/37mRq4ZJufQtkU47PZm+3q5a7i7Ry+SPGooc3rxn8MV\nrC2owNtNyd1dwgn1FME47UlEOwuC0NEu28bXnJ9Lzuuv4KyvZ/1AL1YFlzcmP1coFYy+dzwDYsEh\nc2P95gpSl//aWHbRos+ZPfsOPDw8+XrZaiZM/yd19Tp0njmk73ifOkPz3pFSoWRaYl+Gex5rfO/u\nruEEeKja/maFJkS0syAIHe2yXF6yuK6U9T99TGhmJRa1nLw+ERyw5aNSqIjxiW7cLyQxGl8M5OYa\nyKtWYNh/kDU71/LUU4/h5+fH8uXf0rdvP9QenngH9aIoJwedpoyq4n3gFoGn9mRvR5JcVOd/h7cp\nhTCVgwkJPdB7aFq4ustbey1/lxitx2x1UGuyYrE58dOpGZIUwrRRschbWdSkiz4Ws8OKwWrE4rTi\nq9YzICSZybHj0SZ2x2Ux46itxWWxoPTzQzfkCgKmTkcmPz+/c8XygK0T9dM6UT+n1t7LS15Wq/Tb\nnHbW5Wzkp7xfcQY60F0RQ8xv2Vz1Qx5uQ/xYzRoivMLo4hvXWKbz0J7ogn354es9vL/mOzZtX0JQ\nUDDffPMd8fEJjfup1O4kDr6dIztXo3XfT23+IuoN44iM74XkclKRuwJzzWE8dREkR12LQunZEVUg\n/IkkSUgSjaMeZ1UOqcVyUsMBz/qYgiBcPi6bxrfeXs9ru9+hzFyBXu3DtISJJI1OxNQrjeIPFzDy\nl2Lce3rxqfJLnuj/IL7u+sayfrHhHKl5g03bl6D3DuJv457AX9U8rZ9cLidx4CSy9vmjdG3CZfyW\njNQSfLyrsBiyUGujiE/+G1XVzZ8LC+1r6c9ZbNhd0Pi6ymhrfD1jTPwpy63I+oFNBVsbX1fbahpf\nD081UrPhp8ZtzqqqxteB028+r9cvCMLF7ZJ75must7F+Vz4vLdzNmu0nV5eyuexUWaqRIeO+nneQ\n5J8IgLZXbyKffBqlry+D9hoZvLmEj/d8jt3Z0EA6nU4eeeQBPv78I+Li4nn+tmdQ6WNY+eU+cne2\nPO0ktsdQVH5TcDjccJftxGLIwl0XS0DMDBRK97avBKFVYqqRIAgd7ZJofF0uiX1HK3l35X7mvvMb\nSzZmkl1kYOWWY9Qcnzbio/ZmWsIkJCQ+P7QEm/Nk71MdEUnk08+h7tSZrjkW+q0+yIo9S7HZbNx7\n750sWvQ5PXr04ttv1zH9/2bSJ9KJTa5i7cYS9n37W4vX5BsUy8GsIY2vAzpNQy53a3FfoX2JqUaC\nIHS0i7rxrbPYWbH5KI+99ztvLtvL7vRygv08mT46jikjYnA4Xazbmde4/+DQ/gwJ7U+BqYgl6Sua\nPJNTevsQ8diTaPr1I7TcTtgnPzFx8lhWrVrBgAGDWLHiO/z8/JDL5QyYMZrRA3TIJSe/HbLz60dr\ncDlP9pbqTFZWfZlGUb6Lo8U3Et7zWWSXQS7ei4WYaiQIQke7qBvfH7fn8v3vuVhsDkb0CuXZWcn8\n447+XNkvgrHJEei91PySVojxDxFsU+MnEuUVwY6SFLYUbmtyPLlKRejd9+EaOZx//LyF3TvTGNin\nN0uXrkSna/rlGT8qmesmxuLhrOdQhQffvfk9tjozhhozqxalUV1RT1JyGCOuSUAuFykBLyRiqpEg\nCB3tom58kzr5AZAQoefWq7vQKUTXmPvWTSnn6gGR2Owuftp9cpUqN7mSu5JmonXTsDzzO7Jrc5oc\ns6ammoe+WMieygqGhYbyUmgkhi0/txi5GpzYmRvuGoAvBors3nw+/zcWv78DQ42FvkOiGDI6VuTi\nvUCJxAqCIHSki7rxTYj0ITbcmz1ZFeSVGpttH9YzFJ2nGxtTCqi3nHzGq3f34Y5uN+OSXHy0fxG1\n1oay+/fvY8KEa0hNTWHatBncM/85nJ5uGJYtp3TR50gOR7NzeAX6MfnBq4hQVOKQKZEkGDSyM/2H\ndhIN7wVMJFYQBKEjXdSNr0wm47rB0QB8v6153ly1m4Kr+kditjrZmFLQZFuCbywTYq6h1mZgwe6P\nee65p7jyyuEcOXKYu+66h7feepdRQ6ez76YBlPsoMfy6icK3/ouzrq7ZeRwFeSTkbcC/Lp/YEDm9\nBkS2yf0K54eIdhYEoaNd1I0vQPdOvkQFe5FypIyiiuYN44jeYWjclazflY/F1rTnOiZyOB5Z8N5d\nr7JgwTuEh0ewdOlK/vnPV5HL5chlcm4cMItNE2I5Gqai/vAh8l55EVtpSeMx6g4eoOCN15CsVq66\nNo6xs4a1+T0L50ZEOwuC0NEu+sb3RO9XAn5ooffroVYyNjmCOouDTWlFje8XFxdx5523svCZBViq\n6+kysTdvLvuAkSNHNy2vdOeOPrfz04gA0hK12EtKyPvni9QfOYwxNYWit98El4vQ++5HN2BgW9+u\ncB6IaGdBEDraRd/4AvSK8ycsQMP2QyWUVdc32z46ORy1m4wvV23gtdf+zbXXXkmfPt34/vvV9O8/\nkG9+/J5+Nw9jec53FJqKm5UP0QRxS7dpbO7lyfZhobisFgpe/zfF774NCgVhD85F26t3e9yqcB6I\naGdBEDraRb+8ZH09lJbKGds3ms/WHuTH7Xncdk0XAMrLy9m0aSM//7yBdevXYzLWsI6GZSD79Enm\nlltmMX36zcjlcjTlPny4fyEf7F/IE8kP4OnWNL9un8Ae5EQOYyObUU/sQe9v0gAIn/sYHjGx7X3b\nwjmaNqrhb5aWUU6V0Yqvl5re8QGN75/K5NjxAOwrP0i1tQa92oceAd2YHDseeUzDPqa0VBxVVSh9\nfdH27kPA1Oltei+C8P/t3X9Q1HUex/HnsstC/FD5sYtCoGaRhHTSnRallenZYTU3eleSldfdlBrD\n5d0NFVc2OWeamjdjUZdd5NyNjScNNo3VeHmWzpmCpTKZnpfRpSGhwrIqBCyy7P2B4CI/MoLvV9jX\n47/v97vf5bPv2Z03n8/3/fl8ZOAZsMm3uRkWL7azebONioogEhJGMX5mGZs2f8D/dv+D4p3b+fTT\n0vbXO51xxIyaStLVE1nzp3k4YmM6vN94xzimj5zClqPb+Pt/NjD/2l8RZOk4MPDzKzI5eqacf5/6\nivjfZXF97Hjsw4cb8nmlf2hjBRExw4BNvosX2/nrX0OAb4H1lJf/k2MvbcXXcoaPgODgYCZPvoUp\nU6YxZcpUrrkmlcIPy9jySTmHKjw4Yju/511X3M7XZ45xwHWI9498SOboae3XvC1eth/byde1FQC4\nL0OJdwDTxgoiYqYB+cy3vh42b277v2ERMA94C19LDInX3MUNMxfxyb7DbNz4Djk5C0lNHYfFYuH2\niUnYrBbeKz6Ct20upp8gSxC/Tp1DVMgw3vvqXxx0/ReAo2fKWbknn7fK3iU4yMYDKfdw1xW3G/Vx\npY9pqpGImG1A9nxPnLBQUdH2f8NvgTRgMnAlVvsRYkfv56ODbu6J6zi0HBUZwuRr49lWWsHHh06S\nkdq55xphD2de2lz+vO8vrNn/N1Kik/mP63N8+LhhxE+YOeYOIuzh/f0RpR9dzFQjZ1Tn/ZZ/6FQj\nu9PZ+0aLyKAyIHu+cXE+EhLaeq5XAL8BrgIstLgTGBpuZ1tpBXUNnffNzbw+CWuQhXd3HaGlm2dy\nSUMuZ3byTFp8LRx0/RdnWCwL0+fzQMo9SryDgKYaiYjZBmTyDQuDzMzOSz0C/Ox2H5k3jMRz1su/\nPinvdD122GVkpA6n0lXPvs+7HnoEuDF+AvHhw0mKTOCPE39PctSYPmu/mEtTjUTEbAMy+QIsXtzE\nvHkeEhO9WK0+EhO9zJvnYfHiJm75UTyRYcFs3XuM+sbOSfqOjJFYLPDuriM9VqQ+df0feGLCQoKD\nBuTovPRAGyuIiJkGbPK12eDZZ5vYsaOeXbu+ZceOep59tgmbDULsVqZPSKTB08yH+85XtPp8Pr44\ndor3So4SZLHw9ck6Kl2dF+WQwU8bK4iImQZ8ly4sDEaP7tx7ve26y9lc8jVbPilnYoqTvZ9XsWN/\nJcdrWpNtzJBQbk2PZ3hM58IaGdy+q9r5F7eM6XLo+buqna8r7brgqq60lNiZv9TQs4i0G/DJtzuX\nhdiY+uPLeWfXEfJeLQHAZg3i+mvimHztCMaOjCJIW/4FJFU7i4jZBm3yhdY1nd/ZdQSA+36azA2p\ncYSHBpvbKDFdW7Wzq4sEfDHVzjUed6drrdXO4HW5Ol1TtbOIXGhQJ98hYXbW5t1mdjPkEtNW7ey/\nwlWbi6mAq3J2AAAHl0lEQVR29l/hqk1rtXPHFa7aqNpZRC40YAuuRH4IVTuLiJmUfCUgqdpZRMyk\n5CsBR2s7i4jZlHwl4FxMtXOX9/3AamcRkTZKvhJwtLaziJhNyVcCjtZ2FhGzDeqpRiLdmX3blQCU\nHq6iptZDdGQI6cmO9vPdmXXlHQDsrzqI23OKqJBhXOtIZdaVdxB0bu+NutJ9NNfUYIuOJiL9Ohx3\nZ/XrZxGRgUc9XwloPp8Pn48eN9jo9j58Xd7na33D7/2eIhI41POVgFT4YVmHRTZqapvaj+dMS+72\nvrfK3uuwyIa76VT78S37Oi6y4a2paT92Zt3Xp+0XkYFNPV8JOJpqJCJmU/KVgKOpRiJiNiVfCTia\naiQiZlPylYCjqUYiYrZeJ99ly5Yxe/ZssrKy2L9/f1+2SaTfaWMFETFTr5Lvxx9/zNGjRyksLGTp\n0qUsXbq0r9sl0q+0sYKImKlXybe4uJhp06YBMGbMGE6fPk1dXV2fNkykv6jaWUTM1qt5vtXV1aSm\nnn/2FR0dTVVVFREREV2+PioqDJut6+dogcjhiDS7CZe0/o5PZfW31NR2X+1stQfjiA3vdO14XVWv\nq52HWJu5zBHb+0b70fenZ4pPzxSf7hkZmz5ZZOO7VvJxu+v74s8MCg5HJFVVtWY345JlRHy8Z71E\nR4bg6mK6UVRkKN6ms122wesNIipkGDUed6drrdXO4HW5Ol2zRUVzxmujrg8+l74/PVN8eqb4dK8/\nYtNTMu/VsLPT6aS6urr9+OTJkzgcXVePilxqVO0sImbrVc/3pptuIj8/n6ysLA4ePIjT6ex2yFnk\nUnR+Y4Vq3LWNREWGkp4ce9EbK3xWfZCaxlNEhw4jLfbCjRVKaXbXYIuKJiI9XRsriEgnFl8vV39f\ntWoVe/bswWKx8MwzzzB27NhuX6thjvM07NMzo+PjOevldJ2HoREh3fZ4u9LkbeK0p5ahIZHYrfYO\n11o8HppPn8Y2dGif93j1/emZ4tMzxad7Rg879/qZb25ubm9vFblkhARbcUaFfe/77FY7jrCYLq8F\nhYRgdzp/aNNEZBDTClciIiIGU/IVERExmJKviIiIwZR8RUREDKbkKyIiYjAlXxEREYMp+YqIiBhM\nyVdERMRgSr4iIiIGU/IVERExWK/XdhYREZHeUc9XRETEYEq+IiIiBlPyFRERMZiSr4iIiMGUfEVE\nRAym5CsiImIwm9kNGOwOHz5MdnY2Dz74IPfffz+VlZU8/vjjeL1eHA4Hzz//PHa73exmmmblypXs\n3buX5uZm5s+fT1pamuJzTkNDA3l5ebhcLjweD9nZ2YwdO1bx8dPY2Midd95JdnY2GRkZis05u3fv\nZuHChVx11VUAJCcn89BDDyk+fjZt2kRBQQE2m41HH32Uq6++2tD4qOfbj+rr61myZAkZGRnt5158\n8UXmzJnD+vXrGTlyJEVFRSa20FwlJSV88cUXFBYWUlBQwLJlyxQfP9u2bWPcuHG88cYbrF69muXL\nlys+F3jllVcYOnQooN/WhSZOnMi6detYt24dTz/9tOLjx+128/LLL7N+/XrWrFnDBx98YHh8lHz7\nkd1u57XXXsPpdLaf2717N1OnTgVgypQpFBcXm9U8002YMIEXXngBgCFDhtDQ0KD4+JkxYwYPP/ww\nAJWVlcTFxSk+fr788kvKysq49dZbAf22vovic15xcTEZGRlERETgdDpZsmSJ4fFR8u1HNpuN0NDQ\nDucaGhrahzJiYmKoqqoyo2mXBKvVSlhYGABFRUXcfPPNik8XsrKyyM3N5cknn1R8/KxYsYK8vLz2\nY8Wmo7KyMhYsWMC9997Lzp07FR8/x44do7GxkQULFjBnzhyKi4sNj4+e+ZpIK3u22rp1K0VFRaxd\nu5bp06e3n1d8Wm3YsIFDhw7x2GOPdYhJIMfn7bffZvz48SQmJnZ5PZBjAzBq1ChycnLIzMykvLyc\nuXPn4vV6268HenwATp06xUsvvcQ333zD3LlzDf9tKfkaLCwsjMbGRkJDQzlx4kSHIelAtGPHDtas\nWUNBQQGRkZGKj58DBw4QExPDiBEjSElJwev1Eh4ervgA27dvp7y8nO3bt3P8+HHsdru+O37i4uKY\nMWMGAElJScTGxvLZZ58pPufExMSQnp6OzWYjKSmJ8PBwrFarofHRsLPBbrzxRt5//30AtmzZwuTJ\nk01ukXlqa2tZuXIlr776KsOGDQMUH3979uxh7dq1AFRXV1NfX6/4nLN69Wo2btzIm2++yd133012\ndrZi42fTpk28/vrrAFRVVeFyuZg1a5bic86kSZMoKSmhpaUFt9ttym9Luxr1owMHDrBixQoqKiqw\n2WzExcWxatUq8vLy8Hg8xMfH89xzzxEcHGx2U01RWFhIfn4+o0ePbj+3fPlyFi1apPjQOo3mqaee\norKyksbGRnJychg3bhxPPPGE4uMnPz+fhIQEJk2apNicU1dXR25uLmfOnOHs2bPk5OSQkpKi+PjZ\nsGFDe0XzI488QlpamqHxUfIVERExmIadRUREDKbkKyIiYjAlXxEREYMp+YqIiBhMyVdERMRgSr4i\nIiIGU/IVERExmJKviIiIwf4Pj+52lhDtOrAAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f76f9aba310>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "NNCVPzwipxOS",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}