{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/MY%20LOVE%20)"
      ]
    },
    {
      "metadata": {
        "id": "wbqrldmYOLFg",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        "### GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=np.array([(input_co_ordinates[0][0]+input_co_ordinates[2][0])/2.0,(input_co_ordinates[0][1]+input_co_ordinates[2][1])/2.0])\n",
        "\n",
        "class link:\n",
        "    def __init__(self, inp_state, inp_index,vehicle_points_obj):\n",
        "        self.state = inp_state\n",
        "        self.index = inp_index\n",
        "        self.vehicle_points_obj=vehicle_points_obj       \n",
        "\n",
        "\n",
        "\n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "free_space=0\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 1.0\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "grid = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "        \n",
        "vehicle_pt_obj = vehicle_points(np.array([[1.5,1.5],[1.5,4.5],[4.5,4.5],[4.5,1.5],[1.5,2.5],[1.5,3.5],\n",
        "                           [2.5,1.5],[2.5,2.5],[2.5,3.5],[2.5,4.5],[3.5,1.5],[3.5,2.5],\n",
        "                           [3.5,3.5],[3.5,4.5],[4.5,2.5],[4.5,3.5]]))\n",
        "\n",
        "\n",
        "\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2)\n",
        "\n",
        "\n",
        "\n",
        "closedA=np.array([[free_space for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "cost_map = np.array([[-1 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n",
        "\n",
        "def Astar(current_state,goal):\n",
        "  open_list = []\n",
        "  path_link = link(current_state, 0, vehicle_pt_obj)\n",
        "  open_list.append( path_link )\n",
        "  goal_reached=False\n",
        "  cost=0\n",
        "  heu=0\n",
        "  closedA[current_state.x][current_state.y]=1\n",
        "  cost_map[current_state.x][current_state.y]=cost\n",
        "  \n",
        "  while(len(open_list)>0 and (not goal_reached)):\n",
        "    open_list.sort(key=lambda state_srt : float(state_srt.state.f))\n",
        "    old_state=open_list.pop(0).state\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      goal_reached=True\n",
        "      print(\"goal_reached\")\n",
        "      return 1\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    \n",
        "    for delt in motion_mat:\n",
        "      nxt_node=node+delt\n",
        "      #print(nxt_node[0])\n",
        "      #print(nxt_node[1])\n",
        "      #print(closedA[nxt_node[0]][nxt_node[1]])\n",
        "      if( (nxt_node[0]<grid_x_m and nxt_node[0]>=0) and (nxt_node[1]<grid_y_m and nxt_node[1]>=0)):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and closedA[nxt_node[0]][nxt_node[1]]==0):\n",
        "          #print(nxt_node)\n",
        "          g2=old_state.g+1\n",
        "          heu=euclidean_distance([nxt_node[0],nxt_node[1]],[goal.x,goal.y])\n",
        "          new_state=state(nxt_node[0],nxt_node[1],0,g2,g2+heu,heu,0)\n",
        "          open_list.append( link(new_state,0,vehicle_pt_obj) )\n",
        "          closedA[nxt_node[0]][nxt_node[1]]=1\n",
        "          cost_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "          plt.plot([node[0],nxt_node[0]],[node[1],nxt_node[1]])\n",
        "\n",
        "        \n",
        "      \n",
        "    \n",
        "    \n",
        "    \n",
        "    \n",
        "    \n",
        "    \n",
        "xg,yg=15,23\n",
        "for i in range(yg):\n",
        "  grid[xg][i]=1\n",
        "  grid[xg+20][i]=1  \n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "i8Fw1Bn7OQUO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1724
        },
        "outputId": "84ae1045-4270-4905-a9af-4dda8743a487"
      },
      "cell_type": "code",
      "source": [
        "current_state = state(37,3, 0.0, 0.0, 0.0, 0.0, 0.0)\n",
        "goal_node=goal(20,20)\n",
        "Astar(current_state,goal_node)\n",
        "\n",
        "\n",
        "for i in cost_map:\n",
        "  print(i)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "goal_reached\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 40 39 38\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 40 39 38 37\n",
            " 38 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 40 39 38 37 36\n",
            " 37 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 39 38 37 36 35\n",
            " 36 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 38 37 36 35 34\n",
            " 35 36 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 37 36 35 34 33\n",
            " 34 35 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 36 35 34 33 32\n",
            " 33 34 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 35 34 33 32 31\n",
            " 32 33 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 34 33 32 31 30\n",
            " 31 32 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 33 32 31 30 29\n",
            " 30 31 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 32 31 30 29 28\n",
            " 29 30 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 31 30 29 28 27\n",
            " 28 29 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 30 29 28 27 26\n",
            " 27 28 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 29 28 27 26 25\n",
            " 26 27 28 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 28 27 26 25 24\n",
            " 25 26 27 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 27 26 25 24 23\n",
            " 24 25 26 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 22\n",
            " 23 24 25 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[ 4  3  2  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21\n",
            " 22 23 24 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[ 3  2  1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n",
            " 21 22 23 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[ 4  3  2  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21\n",
            " 22 23 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n",
            "[ 5  4  3  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n",
            " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f7385fd5ed0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "Pf9i7Jes6jb0",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5*np.pi/180\n",
        "DT=1\n",
        "SPEED=1\n",
        "LENGTH=1\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 1.0\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "\n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    for delta in delta_angles:\n",
        "        omega  = SPEED / LENGTH * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + omega * DT)\n",
        "        dX = SPEED * np.cos(current_state.theta) * DT\n",
        "        dY = SPEED * np.sin(current_state.theta) * DT\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2)         \n",
        "        #print(arc_cost)\n",
        "        h2     = euclidean_distance([x2,y2],[goal.x,goal.y])+arc_cost\n",
        "        if(cost_map[idx(x2)][idx(y2)]==-1):\n",
        "          h2+=100\n",
        "        else:\n",
        "          h2+=cost_map[idx(x2)][idx(y2)]\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        #jj=np.arctan2(goal.y-y2,goal.x-x2)\n",
        "        #print(['X: ',x2,'Y: ',y2,'ang_goal',normalize_theta(jj)*180/np.pi,'taken_angle',theta2*180/np.pi,'cost:',arc_cost])\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), -np.sin(angle_of_rotation)], \n",
        "                                [np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_x_m and y>=0 and y<grid_y_m)\n",
        "\n",
        "##IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "  \n",
        "# ##PUT OBSTACLES\n",
        "xg,yg=15,23\n",
        "for i in range(yg):\n",
        "  GRID_TEST[xg][i]=1\n",
        "  GRID_TEST[xg+20][i]=1\n",
        "###DISPLAY PATH\n",
        "\n",
        "def show_path(path, start, goal):\n",
        "  XO=[]\n",
        "  YO=[]\n",
        "  for i in range(yg):\n",
        "    XO.append(xg)\n",
        "    XO.append(xg+20)\n",
        "    YO.append(i)\n",
        "    YO.append(i)\n",
        "  plt.scatter(XO,YO)\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  print([p.steer for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()\n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object):\n",
        "  print(\"STARTED SEARCH\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  \n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      print('GOAL REACHED')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return ret_path\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return ret_path"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "7rQwbYlp6oVa",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "outputId": "bcecf534-e475-4080-94c2-6e6bbb0eeed1"
      },
      "cell_type": "code",
      "source": [
        "STA=[20,20]\n",
        "present_heading=np.pi/2\n",
        "vehicle_pt_obj = vehicle_points( np.array([[21.5,18.5],[21.5,19.5],[21.5,20.5],[21.5,21.5]]),STA )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,[vehicle_pt_obj.center[0],vehicle_pt_obj.center[1]],present_heading)\n",
        "print(vehicle_pt_obj.input_co_ordinates)\n",
        "#vehicle_pt_obj = vehicle_points( np.array([[3,3]]),STA )\n",
        "# vehicle_pt_obj = vehicle_points( np.array([[3.5,1.5],[3.5,2.5],[3.5,3.5],[3.5,4.5],[4.5,1.5],[4.5,2.5],[4.5,3.5],[4.5,4.5]]),STA )\n",
        "# vehicle_pt_obj = vehicle_points( np.array([[3.5,1.5],[3.5,2.5],[3.5,3.5],[3.5,4.5],[4.5,1.5],[4.5,2.5],[4.5,3.5],[4.5,4.5]]),STA )\n",
        "current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)\n",
        "goal_node = goal( 37,3)\n",
        "ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj)\n",
        "show_path(reconstruct_path(ret_val.came_from,STA,ret_val.final),STA,[goal_node.x,goal_node.y])\n",
        "\n"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[18.5 18.5]\n",
            " [19.5 18.5]\n",
            " [20.5 18.5]\n",
            " [21.5 18.5]]\n",
            "STARTED SEARCH\n",
            "GOAL REACHED\n",
            "1.11413812637\n",
            "[-0.3490658503988659, -0.6981317007977318, -0.5235987755982988, -0.26179938779914935, 8.326672684688674e-17, 0.349065850398866, 0.08726646259971656, 0.17453292519943303, 0.2617993877991495, 0.17453292519943303, 0.08726646259971656, 8.326672684688674e-17, -0.26179938779914935, 8.326672684688674e-17, -0.26179938779914935, 8.326672684688674e-17, -0.17453292519943286, -0.17453292519943286, -0.5235987755982988, -0.6108652381980153, -0.26179938779914935, 0.08726646259971656, 0.08726646259971656, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 8.326672684688674e-17, 0.08726646259971656, -0.08726646259971639, 0.08726646259971656, -0.08726646259971639, 0.08726646259971656, -0.08726646259971639, 0.08726646259971656, -0.08726646259971639, 0.08726646259971656, 8.326672684688674e-17, -0.17453292519943286]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n/x+P0UwNtsVbrAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f7386b9b1d0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "6BNhx_uS9tTC",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}