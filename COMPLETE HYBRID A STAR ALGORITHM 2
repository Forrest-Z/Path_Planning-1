{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/COMPLETE%20HYBRID%20A%20STAR%20ALGORITHM%202)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5*np.pi/180\n",
        "DT=1\n",
        "SPEED=1\n",
        "LENGTH=1\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 1.0\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "closed_A_star=np.array([[free_space for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "cost_map = np.array([[-1 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    for delta in delta_angles:\n",
        "        omega  = SPEED / LENGTH * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + omega * DT)\n",
        "        dX = SPEED * np.cos(current_state.theta) * DT\n",
        "        dY = SPEED * np.sin(current_state.theta) * DT\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2)         \n",
        "        #print(arc_cost)\n",
        "        h2     = euclidean_distance([x2,y2],[goal.x,goal.y])+arc_cost\n",
        "        if(cost_map[idx(x2)][idx(y2)]==-1):\n",
        "          h2+=100\n",
        "        else:\n",
        "          h2+=cost_map[idx(x2)][idx(y2)]\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        #jj=np.arctan2(goal.y-y2,goal.x-x2)\n",
        "        #print(['X: ',x2,'Y: ',y2,'ang_goal',normalize_theta(jj)*180/np.pi,'taken_angle',theta2*180/np.pi,'cost:',arc_cost])\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), -np.sin(angle_of_rotation)], \n",
        "                                [np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_x_m and y>=0 and y<grid_y_m)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "\n",
        "### A_STAR SEARCH\n",
        "def A_Star(current_state,goal,grid):\n",
        "  print(\"STARTED A*\")\n",
        "  open_list = []\n",
        "  open_list.append(current_state )\n",
        "  is_goal_attained=False\n",
        "  cost=0\n",
        "  heu=0\n",
        "  closed_A_star[current_state.x][current_state.y]=1\n",
        "  cost_map[current_state.x][current_state.y]=cost\n",
        "  \n",
        "  while(len(open_list)>0):\n",
        "    open_list.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    old_state=open_list.pop(0)\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL REACHED BY A*\")\n",
        "      return is_goal_attained\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and closed_A_star[nxt_node[0]][nxt_node[1]]==0):\n",
        "          g2=old_state.g+1\n",
        "          heu=euclidean_distance([nxt_node[0],nxt_node[1]],[goal.x,goal.y])\n",
        "          new_state=state(nxt_node[0],nxt_node[1],0,g2,g2+heu,heu,0)\n",
        "          open_list.append(new_state)\n",
        "          closed_A_star[nxt_node[0]][nxt_node[1]]=1\n",
        "          cost_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "          #plt.plot([node[0],nxt_node[0]],[node[1],nxt_node[1]])\n",
        "  return is_goal_attained\n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            \n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal):\n",
        "  vehicle_pt_obj = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  Theta=[]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj,[X[i],Y[i]], Theta[i])\n",
        "    rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    revI=rev[:4]\n",
        "    revL=rev[4:]\n",
        "    revF=np.concatenate([revI,revL[::-1]])\n",
        "    l=np.append(revF,[revF[0]],axis=0)\n",
        "    #print(l)\n",
        "    for i in l:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "    #print([X[i],Y[i],Theta[i]])\n",
        "  print([p.steer for p in path])\n",
        "  plt.scatter(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "2exSViITSeqc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "### PUT OBSTACLES:\n",
        "  def put_obstacles(X_list,Y_list,grid):\n",
        "    if(len(X_list)>0):\n",
        "      for i in  X_list:\n",
        "        x_XO=[]\n",
        "        x_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          x_XO.append(i[0])\n",
        "          x_YO.append(k)\n",
        "          grid[i[0]][k]=1\n",
        "        plt.scatter(x_XO,x_YO)\n",
        "    if(len(Y_list)>0):\n",
        "      for i in Y_list:\n",
        "        y_XO=[]\n",
        "        y_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          y_XO.append(i[0])\n",
        "          y_YO.append(k)\n",
        "          grid[k][i[0]]=1\n",
        "        plt.scatter(y_YO,y_XO)\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZbpDvcJDRw3I",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "START=[20,20]\n",
        "goal_node = goal( 37,3)\n",
        "present_heading=np.pi\n",
        "vehicle_pt_obj = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,START,present_heading)\n",
        "#print(vehicle_pt_obj.input_co_ordinates)\n",
        "current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "vJQLZcriX_il",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "outputId": "9f17146a-e0fa-4632-b886-a34727cc02b4"
      },
      "cell_type": "code",
      "source": [
        "put_obstacles([[30,0,17]],[],GRID_TEST)\n",
        "if(A_Star(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(START[0],START[1]),GRID_TEST)):\n",
        "  process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj)\n",
        "  if(process_further):\n",
        "    show_path(reconstruct_path(ret_val.came_from,START,ret_val.final),START,[goal_node.x,goal_node.y])\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "else:\n",
        "  print(\"GOAL CANT BE REACHED!!\")\n"
      ],
      "execution_count": 212,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "STARTED A*\n",
            "GOAL REACHED BY A*\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.538785934448\n",
            "[0.3490658503988659, 0.6981317007977318, 0.6981317007977318, 0.5235987755982988, 0.34906585039886584, -8.326672684688674e-17, 0.17453292519943286, -8.326672684688674e-17, -8.326672684688674e-17, -8.326672684688674e-17, -8.326672684688674e-17, -8.326672684688674e-17, -8.326672684688674e-17, -8.326672684688674e-17, -8.326672684688674e-17, 0.08726646259971639, 0.43633231299858233, 0.17453292519943286, -0.08726646259971656, -0.4363323129985825, -0.6981317007977319, -0.6981317007977319, -0.34906585039886595, -2.7755575615628914e-17, 0.3490658503988659, 0.08726646259971645, -2.7755575615628914e-17, -2.7755575615628914e-17, -2.7755575615628914e-17, -2.7755575615628914e-17, -2.7755575615628914e-17, -2.7755575615628914e-17, -2.7755575615628914e-17, -2.7755575615628914e-17, 0.08726646259971645, -0.0872664625997165, 0.08726646259971645, -0.26179938779914946]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f76e2e42a10>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "278Gj4JZi0yB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "58a72c42-efb5-4a53-fb43-1ff39ba279bc"
      },
      "cell_type": "code",
      "source": [
        "vehicle_pt_obj = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,[30, 17], 0)\n",
        "print(vehicle_pt_obj.input_co_ordinates)"
      ],
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[30.5 15.5]\n",
            " [30.5 16.5]\n",
            " [30.5 17.5]\n",
            " [30.5 18.5]\n",
            " [31.5 15.5]\n",
            " [31.5 16.5]\n",
            " [31.5 17.5]\n",
            " [31.5 18.5]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "6uGmnCJwjFrt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        },
        "outputId": "0a037b7e-5e7b-4ed1-ab22-4fd511b2f876"
      },
      "cell_type": "code",
      "source": [
        "Xj=[]\n",
        "Yj=[]\n",
        "rev=vehicle_pt_obj.input_co_ordinates\n",
        "revI=rev[:4]\n",
        "revL=rev[4:]\n",
        "revF=np.concatenate([revI,revL[::-1]])\n",
        "l=np.append(revF,[revF[0]],axis=0)\n",
        "print(l)\n",
        "for i in l:\n",
        "  Xj.append(i[0])\n",
        "  Yj.append(i[1])\n",
        "plt.plot(Xj,Yj)\n",
        "  "
      ],
      "execution_count": 214,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[30.5 15.5]\n",
            " [30.5 16.5]\n",
            " [30.5 17.5]\n",
            " [30.5 18.5]\n",
            " [31.5 18.5]\n",
            " [31.5 17.5]\n",
            " [31.5 16.5]\n",
            " [31.5 15.5]\n",
            " [30.5 15.5]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f76e2c75a90>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 214
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f76e268bad0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "uq86vznutmtb",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}