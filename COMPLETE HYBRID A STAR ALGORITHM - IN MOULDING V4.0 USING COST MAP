{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/COMPLETE%20HYBRID%20A%20STAR%20ALGORITHM%20-%20IN%20MOULDING%20V4.0%20USING%20COST%20MAP)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5.0*np.pi/180\n",
        "LENGTH=4.0\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 0.5\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "value_map = np.array([[1000 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal,speed):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    DT=1.0/speed\n",
        "    for delta in delta_angles:\n",
        "        omega  = (speed / LENGTH) * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + (omega * DT))\n",
        "        dX = speed * np.cos(theta2) * DT\n",
        "        dY = speed * np.sin(theta2) * DT\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2) \n",
        "        h2=value_map[idx(x2)][idx(y2)]+arc_cost\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHK A STAR VEHICLE:\n",
        "def A_vehicle_is_safe(vehicle_point_A,add_value,grid):\n",
        "  vp=vehicle_point_A.input_co_ordinates+add_value\n",
        "  for point in vp:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "    \n",
        "    \n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_on_x and y>=0 and y<grid_on_y)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "### BUILDS THE COST MAP - Here the current state is the goal\n",
        "def build_cost_map(current_state,grid):\n",
        "  expand_grid = [[' ' for x in range(grid_on_x)] for y in range(grid_on_y)]\n",
        "  expand_grid[current_state.x][current_state.y]='*'\n",
        "  open_list = []\n",
        "  open_list.append(current_state)\n",
        "  #IMPORTANT\n",
        "  value_map[current_state.x][current_state.y]=0\n",
        "  while(len(open_list)>0):\n",
        "    old_state=open_list.pop(0)\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    \n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and expand_grid[nxt_node[0]][nxt_node[1]]!='*'):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,0,0,0)\n",
        "            open_list.append(new_state)\n",
        "            expand_grid[nxt_node[0]][nxt_node[1]]='*'\n",
        "            value_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "            \n",
        "\n",
        "### A_STAR SEARCH\n",
        "def A_Star(current_state,goal,grid):\n",
        "  print(\"STARTED A*\")\n",
        "  closed_A_star=np.array([[free_space for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "  open_list = []\n",
        "  open_list.append(current_state )\n",
        "  is_goal_attained=False\n",
        "  cost=0\n",
        "  heu=0\n",
        "  closed_A_star[current_state.x][current_state.y]=1\n",
        "  while(len(open_list)>0):\n",
        "    open_list.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    old_state=open_list.pop(0)\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL REACHED BY A*\")\n",
        "      return is_goal_attained\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    \n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and closed_A_star[nxt_node[0]][nxt_node[1]]==0):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            heu=value_map[nxt_node[0]][nxt_node[1]]\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,g2+heu,heu,0)\n",
        "            open_list.append(new_state)\n",
        "            closed_A_star[nxt_node[0]][nxt_node[1]]=1\n",
        "  return is_goal_attained\n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object,speed):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal,speed):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal,vehicle_pt_obj_act):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  Theta=[]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj_act,[X[i],Y[i]], Theta[i])\n",
        "    rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    revI=rev[:4]\n",
        "    revL=rev[4:]\n",
        "    revF=np.concatenate([revI,revL[::-1]])\n",
        "    l=np.append(revF,[revF[0]],axis=0)\n",
        "    for i in l:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "  print([np.round(p.steer*180/np.pi,2) for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()\n",
        "  \n",
        "### PUT OBSTACLES:\n",
        "def put_obstacles(X_list,Y_list,grid):\n",
        "  if(len(X_list)>0):\n",
        "    for i in  X_list:\n",
        "      x_XO=[]\n",
        "      x_YO=[]\n",
        "      for k in range(i[1],i[2]):\n",
        "        x_XO.append(i[0])\n",
        "        x_YO.append(k)\n",
        "        grid[i[0]][k]=1\n",
        "      plt.scatter(x_XO,x_YO)\n",
        "  if(len(Y_list)>0):\n",
        "    for i in Y_list:\n",
        "      y_XO=[]\n",
        "      y_YO=[]\n",
        "      for k in range(i[1],i[2]):\n",
        "        y_XO.append(i[0])\n",
        "        y_YO.append(k)\n",
        "        grid[k][i[0]]=1\n",
        "      plt.scatter(y_YO,y_XO)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "T79sHE8tcsS-",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def search(start,goal_node,present_heading,grid,speed):\n",
        "  vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj_actual,start,present_heading)\n",
        "  current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)\n",
        "  build_cost_map(state(goal_node.x,goal_node.y,0,0,0,0,0),grid)\n",
        "  if(A_Star(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(start[0],start[1]),GRID_TEST)):\n",
        "    process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj,speed)\n",
        "    if(process_further):\n",
        "      show_path(reconstruct_path(ret_val.came_from,start,ret_val.final),start,[goal_node.x,goal_node.y],vehicle_pt_obj_actual)\n",
        "    else:\n",
        "      print(\"GOAL CANT BE REACHED!!\")\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "POtpvXrc0z8t",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "outputId": "eac8a90a-e4c7-43e3-cb62-00445749d0a9"
      },
      "cell_type": "code",
      "source": [
        "put_obstacles([[15,0,15],[10,0,10],[27,0,32],[60,15,35]],[],GRID_TEST)\n",
        "### A STAR VEHICLE POINTS\n",
        "vehicle_point_A=vehicle_points(np.array([[0,2],[0,1],[0,-1],[0,-2],[1,0],[2,0],[-1,0],[-2,0]]),[0,0])\n",
        "### HYBRID VEHICLE POINTS\n",
        "vehicle_pt_obj_actual = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "\n",
        "## CALL SEARCH\n",
        "search([40,40],goal(77,3),np.pi/2,GRID_TEST,60)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "STARTED A*\n",
            "GOAL REACHED BY A*\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.615388870239\n",
            "[-40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -25.0, -5.0, -20.0, -40.0, -40.0, -30.0, -15.0, 5.0, 5.0, -15.0, -30.0, -40.0, -20.0, -10.0, 10.0, 0.0, 15.0, 35.0, 35.0, 35.0, 20.0, 5.0, -15.0, -35.0, -40.0, -40.0, -40.0, -25.0, -5.0, 15.0, 25.0, 25.0, 25.0, 35.0, 35.0, 30.0, 15.0, 25.0, 5.0, -5.0, -5.0, -5.0, -5.0, -5.0, 5.0, 5.0, -10.0, -10.0, 10.0, 30.0, 40.0, 40.0, 40.0, 40.0, 20.0, 0.0, -15.0, -25.0, -25.0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f69c8bf35d0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}