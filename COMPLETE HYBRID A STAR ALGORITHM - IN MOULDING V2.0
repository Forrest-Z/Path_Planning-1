{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/COMPLETE%20HYBRID%20A%20STAR%20ALGORITHM%20-%20IN%20MOULDING%20V2.0)"
      ]
    },
    {
      "metadata": {
        "id": "bRqO9Qo-KgUd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "############PROGRAM STARTS HERE ######################\n",
        "import numpy as np\n",
        "import math as MT\n",
        "from math import floor\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "###CONSTANTS\n",
        "max_angle = 0.785398 #45Deg\n",
        "min_angle = -0.785398 #-45Deg\n",
        "free_space=0\n",
        "locked_space=1\n",
        "\n",
        "### HYPER PARAMETERS\n",
        "NUMBERS_OF_STEERS=4\n",
        "STEER_OFFSET=5.0*np.pi/180\n",
        "LENGTH=4.0\n",
        "NUM_THETA_CELLS =60\n",
        "\n",
        "### GRID MAKING \n",
        "grid_x_m = 40\n",
        "grid_y_m = 40\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 0.5\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "GRID_TEST = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "### INITIALIZE COST_MAPS AND ASTAR CLOSE MAPS\n",
        "closed_A_star=np.array([[free_space for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "cost_map = np.array([[-1 for x in range(grid_on_x)] for y in range(grid_on_y)])\n",
        "policy_map = [[' ' for x in range(grid_on_x)] for y in range(grid_on_y)]\n",
        "\n",
        "### MOTION MATRIX FOR ASTAR\n",
        "motion_mat=np.array([[1,0],[-1,0],[0,-1],[0,1]])\n",
        "policy_mat=['>',]\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4IOZHrpeKyAa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "\n",
        "### STATE CLASS\n",
        "class state:\n",
        "  def __init__(self,x,y,theta,g,f,h,steer):\n",
        "    self.x=x\n",
        "    self.y=y\n",
        "    self.theta=theta\n",
        "    self.g=g\n",
        "    self.f=f\n",
        "    self.h=h\n",
        "    self.steer=steer\n",
        "    \n",
        " ## GOAL NODE        \n",
        "class goal:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        \n",
        "        \n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "### PATH CLASS FOR TRACKING   \n",
        "class path():\n",
        "  def __init__(self,closed,came_from,final):\n",
        "    self.closed=closed\n",
        "    self.came_from=came_from\n",
        "    self.final=final\n",
        "    \n",
        "\n",
        "### AUGMENT DELTA +/- GIVEN OFFSET\n",
        "def delta_augmentation(delta, numbers, offset):\n",
        "    delta_list = []\n",
        "    delta_list.append(delta)\n",
        "    delta_calc_add=delta_calc_sub = delta\n",
        "    for i in range(0 ,numbers):\n",
        "        delta_calc_add += offset\n",
        "        delta_calc_sub -= offset\n",
        "        if delta_calc_add < max_angle:\n",
        "            delta_list.append(delta_calc_add)\n",
        "        if delta_calc_sub > min_angle:\n",
        "            delta_list.append(delta_calc_sub)\n",
        "    return delta_list\n",
        "  \n",
        "\n",
        "\n",
        "### NEW STATE TRANSITIONS\n",
        "def new_state_transition(current_state,goal,speed):\n",
        "    next_states = []\n",
        "    delta_angles = delta_augmentation( delta=current_state.steer, numbers=NUMBERS_OF_STEERS,offset=STEER_OFFSET)\n",
        "    DT=1.0/speed\n",
        "    for delta in delta_angles:\n",
        "        omega  = (speed / LENGTH) * np.tan(delta)\n",
        "        theta2 = normalize_theta(current_state.theta + (omega * DT))\n",
        "        dX = speed * np.cos(theta2) * DT\n",
        "        dY = speed * np.sin(theta2) * DT\n",
        "        #i=i+1\n",
        "        #print(i,[SPEED,np.cos(theta2),DT,omega,theta2,dX,dY])\n",
        "        x2     = current_state.x + dX\n",
        "        y2     = current_state.y + dY\n",
        "        g2     = current_state.g + np.sqrt(dX*dX + dY*dY)\n",
        "        arc_cost=arc_heuristic(goal.x-x2,goal.y-y2,theta2)         \n",
        "        #print(arc_cost)\n",
        "        h2     = euclidean_distance([x2,y2],[goal.x,goal.y])+arc_cost\n",
        "        if(cost_map[idx(x2)][idx(y2)]==-1):\n",
        "          h2+=100\n",
        "        else:\n",
        "          h2+=cost_map[idx(x2)][idx(y2)]\n",
        "        f2     = g2 + h2\n",
        "        new_state=state(x2,y2,theta2,g2,f2,h2,delta)\n",
        "        #jj=np.arctan2(goal.y-y2,goal.x-x2)\n",
        "        #print(['X: ',x2,'Y: ',y2,'ang_goal',normalize_theta(jj)*180/np.pi,'taken_angle',theta2*180/np.pi,'cost:',arc_cost])\n",
        "        next_states.append(new_state)\n",
        "    return next_states\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "  \n",
        "  \n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHK A STAR VEHICLE:\n",
        "def A_vehicle_is_safe(vehicle_point_A,add_value,grid):\n",
        "  vp=vehicle_point_A.input_co_ordinates+add_value\n",
        "  for point in vp:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1])) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      #print('False',add_value)\n",
        "      return False\n",
        "  #('True',add_value)\n",
        "  return True\n",
        "    \n",
        "    \n",
        "\n",
        "### EUCLIDEAN DISTANCE\n",
        "def euclidean_distance(start_point,end_point):\n",
        "  return np.round(np.sqrt((end_point[0]-start_point[0])**2 +(end_point[1]-start_point[1])**2),4)\n",
        "\n",
        "### ARC HEURISTIC\n",
        "def arc_heuristic(x,y,theta_to_be_taken):\n",
        "  ang_rad=normalize_theta(np.arctan2(y,x))\n",
        "  diff=np.pi-abs(abs(theta_to_be_taken-ang_rad)-np.pi)\n",
        "  return diff\n",
        "  \n",
        "### NORMALIZE THETA\n",
        "def normalize_theta(theta):\n",
        "  if( theta<0 ):\n",
        "    theta +=( 2*np.pi )\n",
        "  elif( theta>2*np.pi ):\n",
        "    theta %=( 2*np.pi)\n",
        "  return theta\n",
        "\n",
        "### THETA TO STACK NUMBER\n",
        "def theta_to_stack_number(theta):\n",
        "  new = (theta+2*np.pi)%(2*np.pi)\n",
        "  stack_number = round(new*NUM_THETA_CELLS/2*np.pi)%NUM_THETA_CELLS\n",
        "  return int(stack_number)\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y):\n",
        "  return (x>=0 and x<grid_on_x and y>=0 and y<grid_on_y)\n",
        "\n",
        "### IS_GOAL_REACHED\n",
        "def is_goal_reached(start,goal):\n",
        "  result=False\n",
        "  if( idx(start[0]) == idx(goal[0]) and idx(start[1])==idx(goal[1])):\n",
        "    result=True\n",
        "  return result\n",
        "\n",
        "\n",
        "### A_STAR SEARCH\n",
        "def A_Star(current_state,goal,grid):\n",
        "  vehicle_point_A=vehicle_points(np.array([[0,2],[0,1],[0,-1],[0,-2],[1,0],[2,0],[-1,0],[-2,0]]),[0,0])\n",
        "  print(\"STARTED A*\")\n",
        "  open_list = []\n",
        "  open_list.append(current_state )\n",
        "  is_goal_attained=False\n",
        "  cost=0\n",
        "  heu=0\n",
        "  closed_A_star[current_state.x][current_state.y]=1\n",
        "  cost_map[current_state.x][current_state.y]=cost\n",
        "  \n",
        "  while(len(open_list)>0):\n",
        "    open_list.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    old_state=open_list.pop(0)\n",
        "    if(goal.x==old_state.x and goal.y==old_state.y):\n",
        "      is_goal_attained=True\n",
        "      print(\"GOAL REACHED BY A*\")\n",
        "      return is_goal_attained\n",
        "    node=np.array([old_state.x,old_state.y])\n",
        "    for move in motion_mat:\n",
        "      nxt_node=node+move\n",
        "      if( is_within_grid(nxt_node[0],nxt_node[1])):\n",
        "        if(grid[nxt_node[0]][nxt_node[1]]==0 and closed_A_star[nxt_node[0]][nxt_node[1]]==0):\n",
        "          if(A_vehicle_is_safe(vehicle_point_A,np.array([nxt_node]),grid)):\n",
        "            g2=old_state.g+1\n",
        "            heu=euclidean_distance([nxt_node[0],nxt_node[1]],[goal.x,goal.y])\n",
        "            new_state=state(nxt_node[0],nxt_node[1],0,g2,g2+heu,heu,0)\n",
        "            open_list.append(new_state)\n",
        "            closed_A_star[nxt_node[0]][nxt_node[1]]=1\n",
        "            cost_map[nxt_node[0]][nxt_node[1]]=g2\n",
        "            #plt.plot([node[0],nxt_node[0]],[node[1],nxt_node[1]])\n",
        "  return is_goal_attained\n",
        "\n",
        "### SEARCH ALGORITHM\n",
        "def Hybrid_A_Star(grid,current_state,goal,vehicle_point_object,speed):\n",
        "  print(\"STARTED HYBRID A*\")\n",
        "  start_time = time.time()\n",
        "  closed = np.array([[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)])\n",
        "  came_from = [[[free_space for x in range(grid_on_x)] for y in range(grid_on_y)] for cell in range(NUM_THETA_CELLS)]\n",
        "  is_goal_attained=False\n",
        "  stack_number=theta_to_stack_number(current_state.theta)\n",
        "  closed[stack_number][idx(current_state.x)][idx(current_state.y)]=1\n",
        "  came_from[stack_number][idx(current_state.x)][idx(current_state.y)]=current_state\n",
        "  total_closed=1\n",
        "  opened=[current_state]\n",
        "  \n",
        "  while (len(opened)>0):\n",
        "    opened.sort(key=lambda state_srt : float(state_srt.f))\n",
        "    state_now=opened.pop(0)\n",
        "    #print([state_now.x,state_now.y,state_now.theta*np.pi/180])\n",
        "    if(is_goal_reached([idx(state_now.x),idx(state_now.y)],[idx(goal.x),idx(goal.y)])):\n",
        "      is_goal_attained=True\n",
        "      print('GOAL REACHED BY HYBRID A*')\n",
        "      ret_path=path(closed,came_from,state_now)\n",
        "      end_time = time.time()\n",
        "      print(end_time - start_time)\n",
        "      return (is_goal_attained,ret_path)\n",
        "    \n",
        "    for evry_state in new_state_transition(state_now,goal,speed):\n",
        "      #print('Before',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "      if(not is_within_grid(idx(evry_state.x),idx(evry_state.y))):\n",
        "        continue\n",
        "      \n",
        "      stack_num=theta_to_stack_number(evry_state.theta)\n",
        "      #print([stack_num,idx(evry_state.x),idx(evry_state.y)])\n",
        "      if closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]==0 and grid[idx(evry_state.x)][idx(evry_state.y)]==0:\n",
        "        new_vehicle_point_obj = transform_vehicle_co_ordinates(vehicle_point_object,[evry_state.x,evry_state.y],evry_state.theta)\n",
        "        #print(new_vehicle_point_obj.input_co_ordinates)\n",
        "        if(is_vehicle_in_safe_position(new_vehicle_point_obj,grid)):\n",
        "            opened.append(evry_state)\n",
        "            closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "            came_from[stack_num][idx(evry_state.x)][idx(evry_state.y)]=state_now\n",
        "            total_closed+= 1\n",
        "            #print('After',[evry_state.x,evry_state.y,evry_state.theta*np.pi/180])\n",
        "            #plt.plot([state_now.x,evry_state.x],[state_now.y,evry_state.y])\n",
        "      #closed[stack_num][idx(evry_state.x)][idx(evry_state.y)]=1\n",
        "        #print('-------------')\n",
        "  print('No Valid path')\n",
        "  ret_path=path(closed,came_from,evry_state)\n",
        "  return (is_goal_attained,ret_path)\n",
        "\n",
        "\n",
        "\n",
        "### RECONSTRUCT PATH\n",
        "def reconstruct_path(came_from, start, final):\n",
        "    path                 = [(final)]\n",
        "    stack                = theta_to_stack_number(final.theta)\n",
        "    current              = came_from[stack][idx(final.x)][idx(final.y)]\n",
        "    stack                = theta_to_stack_number(current.theta)\n",
        "    while [idx(current.x), idx(current.y)] != [idx(start[0]), idx(start[1])] :\n",
        "        path.append(current)\n",
        "        current              = came_from[stack][idx(current.x)][idx(current.y)]\n",
        "        stack                = theta_to_stack_number(current.theta)\n",
        "    return path\n",
        "\n",
        "\n",
        "###DISPLAY PATH\n",
        "def show_path(path, start, goal):\n",
        "  X=[start[0]]\n",
        "  Y=[start[1]]\n",
        "  Theta=[]\n",
        "  path.reverse()\n",
        "  X     += [p.x for p in path]\n",
        "  Y     += [p.y for p in path]\n",
        "  Theta+=[p.theta for p in path]\n",
        "  for i in range(len(X)-1):\n",
        "    Xj=[]\n",
        "    Yj=[]\n",
        "    vehicle_pt_obj_now=transform_vehicle_co_ordinates(vehicle_pt_obj,[X[i],Y[i]], Theta[i])\n",
        "    rev=vehicle_pt_obj_now.input_co_ordinates\n",
        "    revI=rev[:4]\n",
        "    revL=rev[4:]\n",
        "    revF=np.concatenate([revI,revL[::-1]])\n",
        "    l=np.append(revF,[revF[0]],axis=0)\n",
        "    #print(l)\n",
        "    for i in l:\n",
        "      Xj.append(i[0])\n",
        "      Yj.append(i[1])\n",
        "    plt.plot(Xj,Yj)\n",
        "  print([np.round(p.steer*180/np.pi,2) for p in path])\n",
        "  plt.plot(X,Y, color='black')\n",
        "  plt.scatter([start[0]], [start[1]], color='blue')\n",
        "  plt.scatter([goal[0]], [goal[1]], color='red')\n",
        "  plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "2exSViITSeqc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "### PUT OBSTACLES:\n",
        "  def put_obstacles(X_list,Y_list,grid):\n",
        "    if(len(X_list)>0):\n",
        "      for i in  X_list:\n",
        "        x_XO=[]\n",
        "        x_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          x_XO.append(i[0])\n",
        "          x_YO.append(k)\n",
        "          grid[i[0]][k]=1\n",
        "        plt.scatter(x_XO,x_YO)\n",
        "    if(len(Y_list)>0):\n",
        "      for i in Y_list:\n",
        "        y_XO=[]\n",
        "        y_YO=[]\n",
        "        for k in range(i[1],i[2]):\n",
        "          y_XO.append(i[0])\n",
        "          y_YO.append(k)\n",
        "          grid[k][i[0]]=1\n",
        "        plt.scatter(y_YO,y_XO)\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZbpDvcJDRw3I",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "START=[40,40]\n",
        "SPEED=60\n",
        "goal_node = goal( 4,3)\n",
        "present_heading=0\n",
        "vehicle_pt_obj = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "vehicle_pt_obj=transform_vehicle_co_ordinates(vehicle_pt_obj,START,present_heading)\n",
        "#print(vehicle_pt_obj.input_co_ordinates)\n",
        "current_state = state(vehicle_pt_obj.center[0], vehicle_pt_obj.center[1], present_heading, 0.0, 0.0, 0.0,0.0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "vJQLZcriX_il",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "outputId": "ef6afd32-65e9-4861-a513-3c7e27633483"
      },
      "cell_type": "code",
      "source": [
        "put_obstacles([[24,0,25],[26,0,25],[27,0,25],[60,15,35]],[],GRID_TEST)\n",
        "if(A_Star(state(goal_node.x,goal_node.y,0,0,0,0,0),goal(START[0],START[1]),GRID_TEST)):\n",
        "  process_further,ret_val=Hybrid_A_Star(GRID_TEST,current_state,goal_node,vehicle_pt_obj,SPEED)\n",
        "  if(process_further):\n",
        "    show_path(reconstruct_path(ret_val.came_from,START,ret_val.final),START,[goal_node.x,goal_node.y])\n",
        "  else:\n",
        "    print(\"GOAL CANT BE REACHED!!\")\n",
        "else:\n",
        "  print(\"GOAL CANT BE REACHED!!\")\n"
      ],
      "execution_count": 302,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "STARTED A*\n",
            "GOAL REACHED BY A*\n",
            "STARTED HYBRID A*\n",
            "GOAL REACHED BY HYBRID A*\n",
            "0.285410881042\n",
            "[-20.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -25.0, -5.0, 5.0, 20.0, 0.0, -20.0, 0.0, 0.0, -5.0, -10.0, -30.0, -25.0, -40.0, -40.0, -40.0, -35.0, -40.0, -25.0, -5.0, 15.0, 35.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 30.0, 10.0, 10.0, -10.0, -10.0, 0.0, 0.0, 0.0, 5.0, 25.0, 5.0, -15.0, -25.0, -5.0, 5.0, 5.0, 15.0, -5.0, -15.0, -15.0, 5.0, 15.0, 15.0, -5.0, -20.0, 0.0, 5.0, -5.0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAd8AAAFKCAYAAABcq1WoAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3Xd4FVXewPHv3F5yb3LTeyAJIQkk\noVeRpqJYsK+CZbGt3W2Wtaysru21t7WsvSCKICwoAlKU3jsJ6f2m56bcXub9IxiMCeiuEjCcz/Pw\naDLnzsw5OXd+M2dOkWRZlhEEQRAEodcoTvQJCIIgCMKpRgRfQRAEQehlIvgKgiAIQi8TwVcQBEEQ\nepkIvoIgCILQy0TwFQRBEIRepuqNg9TXt/XGYX5zLBYDzc2OE30aJyVRNscmyufoRNkcnSibozse\nZRMRYTrqNvHkewKpVMoTfQonLVE2xybK5+hE2RydKJuj6+2yEcFXEARBEHqZCL6CIAiC0MtE8BUE\nQRCEXiaCryAIgiD0MhF8BUEQBKGXieArCIIgCL1MBF9BEARB6GUi+AqCIAhCLxPBVxAEQRB6mQi+\ngiAIgtDLemVuZ0EQhBOh3elly8FaNGoFZoMGk0GDyaDGZFCjVSuRJOlEn6JwihLBVxCEPmvNriq+\n+K64x20alYKwYB13XppNlMXQy2cmnOpE8BUEoc9qbHECcMnEZBSSRKvDQ5vDS6vDQ1W9HWujgzxr\nNZ+VriHKGElmaBpplhQ0Ss0JPnOhrxPBVxCEPsvW7gFgyrB49Nqul7t5qwpYsa2CYs9e8poLyGsu\n4NvKDagUKgaEJJMZNpDM0IFEGSJE87TwqxPBVxCEPsvW7kajVqDTdF8ursXuAWQK2/PQKXXcmHU1\neU0FHGw6RG5TPrlN+SxgCbHGaP48/Bb0Kn3vZ0Dos0TwFQShz2pp9xASpO3xydXW5kYytmDz2Bgd\nPZz00AGkhw7gQqZjc7dwsDGfhYVLsNprcVZW4LfZMWbnICnEIBHhlxPBVxCEPskfCNBq9zDAEtzj\ndpvdgz6qFhkYFpndZVuINpiM0AE4fS7SdQk0v/gK/rZWNLGxhF1wIUHDRoggLPwiP6v2uFwuzjjj\nDBYuXIjVauXqq69m5syZ3HXXXXg8nuN9joIgCD+LwwFFRR3/bbV7kYEQk7bHtLZ2F1JIDQaVnvTQ\nAd2276rbC8CEvU78ba3o+ifjqanB+vq/KH/0Ydp37USW5eOZHaEP+1nB97XXXiM4uOPu8aWXXmLm\nzJnMnTuXpKQkPv/88+N6goIgCD/F54MHH9QwYYKBtDSYMMHAE08HAAg2dg++Lo8Pr6aBgMpJTsRg\nVIrujYA76vYS3eDDsCMXTWwsCffeT79HH8c0ZizuykqqX32J8scewX5g/3HPn9D3/GTwLSoqorCw\nkEmTJgGwZcsWpk6dCsDkyZPZtGnTcT1BQRCEnzJnjoY339RSUSERCASoqFDy1YqO4Bti6j5syNbu\nQRlWA8DwyJxu2xudTZTZyjh7lxtkmchZ1yCpVGiioom54Q8k/eMxgkaMwl1aQtULz+JraTm+GRT6\nnJ985/vUU0/x0EMPsWjRIgCcTicaTUdlDgsLo76+/vieoSAIwjE4HLBsmQqQgeHAPiCM5ioLm+Zr\naNwez7ep8YSHR5CWNpDTT59EU2sApaUGNTrSLCnd9rmzbi/ZBU6C6+2Yx47HMDC9y3ZtbCwhEyfR\nvn0r6qR+5BW2EZOoJCwiqDeyLPQBxwy+ixYtYsiQISQkJPS4/ee+77BYDKhU3bv6CxARYTrRp3DS\nEmVzbKJ8OhQVQVXV9z9dABiBevw+K40VrWyq2Mem746kVyqVpGRmos7QMXrsVCIjzCh+1Hnq0Pqd\nTNxrR2k0MvDm69GEdC3rgNdL+ScfISuUlGZcQN7KQlRqBRdcPoTBw+KOZ3Z/MVFvjq43y+aYwXft\n2rVUVFSwdu1aampq0Gg0GAwGXC4XOp2O2tpaIiMjf/Igzc2OX+2E+5KICBP19W0n+jROSqJsjk2U\nzxEqFcTFGaioUAL/OPwPBk3eTcKgIm6dnopBbaehoZ4dO7axevU3bN+xFXmfzIHPtvGfx95m8uSp\nXHnlVZx22unUORpIWnMIrVcm7IpLafEq4Edl3bj0PzirqynOuYzSghbCIo202lws/HgnRQV1jJmU\n3C2gnwxEvTm641E2xwrmxwy+L7zwQuf/v/zyy8TFxbFr1y6WL1/OjBkzWLFiBRMmTPj1zlQQBOG/\nZDDAOef4ePPNrq1ruiAXCqWKwRmJGHQdl7pJk6bwxz/9lduW3kfVrnLCKoLYvvk75s+fx/z58xg/\nfgLTzhzJlDI33vgogidM7HY8T30djV8uoSBuAhV2IxHRQZx/xRAcdjdfL9jPnq2VNNS2c9aFg9Dp\n1b1SBsJvz399a3bHHXewaNEiZs6cic1m48ILLzwe5yUIgvCzzZnj4aab3CQk+FEqISHBT3ySE7VK\ngV7bNSgfai5EGSQRmzaB5557lX378vnyy5VMnXomGzas4+9znuNPm9bTMHx0t7G8sixT+9FHFJiz\nqdCnEBph5Lzf5aDVqbCEGbn4muEkpYRRVWbj8/d20FDb3pvFIPyGSHIvDFQTzRw9E01ARyfK5thE\n+fTM4QCfz4RK1cYDb69Hq1by5M1ju6T5MPczNlu34z44mtdvuQiV8kiAXfL0o/zr3ffY0dDRkfSs\ns87m/vsfJjNzEABtO7axYd56SsKGEhyq58JZQzEYu/amlmWZdSsKOLCrmtAII7+7fuRxzvXPJ+rN\n0fV2s/PJ91JCEAThf2QwQEoKaHUBWh0eQoK6BkZfwMee+gNIPh2GQESXwOuprWVAYQmPTZ3IE68/\nzZgx41ix4mumTZvEJ598RMDlZOuirZSEDcUUpOaCK3K6BV4Ae5ub8uImADKzg/F5Wo9vpoXfJBF8\nBUHoc1rtXmQZgoO6TrCR25SP0+ck0BSDJUjX+XtZlqmb+yEKf4ANI4KZdcG1LF68jA8+mIdOp+eu\nu27l+suvIlc3EL0qwAVXDSPIrPvxYXG0u/nPvD20tTg5fbKbEM0CrHmv4XU1HPc8C78tIvgKgtDn\n2NrdAIT8KPjuqO2YMtJdH9VlW/uObTgO7KcsWo1u6BB0Kh2SJHH22dNZvnwN/eKT+XLzSj78/AHG\nT0/CHNJ9hSOnw8OST/fidjQzdUohJs0WQEL2u6kv/pSAz3X8Miz85ojgKwhCn9NyeB3fHzY7e/1e\n9jUcIFgdjGwPJvjwNr/TSd28uQSUCtaOMDEsakiXffkcRmbOeJxBqaMpqcrlspnnsXv3zi5p3C4v\nSz/dg15dzOQJu9CprejMqcRk3oYpciw+dyMNZQuR5cBxzrnwWyFWNRIEoc/ZmlsLwPy1RXy7uxqT\nUQ1mKy6TG7MzFZA6n3wbF3+B32bjwNBwHCFaBodndO6n+FA9q5fmYVSpeOXK37HSP40nnniU88+f\nxuefL2H06DF43D6WL9xOUsxOoqMakRQaLPHnYwwdgiRJhMROxeusw9VaiK16NZa4M05EkQgnGRF8\nBUHoc8ZnxbD5YC0Wkxa3z0+j1YUmbh0AdZoDqBLsyEYD7WVgW7USKTyMb9MkcsIz0Co7nojLihpZ\nufggioCPIQ3fknbrXxlksZCensns2bOYPXsWX321mtJ9B8hI2YNW40VrTCIsaQYqbUjnuUiSgvB+\nl1CT/xZtdRvR6KMwhmadkHIRTh4i+AqC0OcM6h/KO/dN6fxZlmW+KVWxqGQJKkkFMaWsaS4h67WO\nIUXbx0XjV9Z3LrJQWdrM8oX7IeAnp3olqTOmoLZYADj77Ok8+ugT3H//Pcz63Tm8+8IlqFVagmPP\nwhw5GkmSup2PQqUjNOE86go/oKl8CfrgASiU3TtsCacOEXwFQejzJEnizP4TOLP/BLx+L4W2Ekp3\nrwM6gq8qt5jQ7BAyw9KxVrawbME+ZFkmu/oboiO0hEzp2lR8xcWT2bR2CEtW7ObhZ9bwzvsL0Qcd\nfapde/MBmiu+AkAblISk6D5ESTi1iOArCMIpRa1UkxGWRsbUNOpqtbTs3EZOQQvZJR6K6xaxviGK\ngF9miHM3FqeVyKseQFJ2zJIV8LtprlyBvWkX9942mYKSdlat28u/3/mIO+/8c7dj+X0OmiuW4bAd\nwImRkqALOeg0M8xqY1JsaG9nXTiJiOArCMIpK3LmVURcfgWtGzdQ9tVqNlgjgADDlIVYKnYTfPok\n9CmpALjaSmks/w9+j42WViNVdSOY99nNTD93Co899g9ycoYyceLkzn07W/JpKFuK1aclVzGVQl8k\nfhuAl9XVTQwNNxOsEZfgU5UYaiQIwilNUqkIPn0iMXf+qfN3tU1+JJOZ8IsvJRDw0ly5nLrCD/C5\nWygsSqCg7HQmnz+e2LgY3nvvYwAeeeTvyLJMwO+mpnQJ6wq3Mt89nkX+szjkjSRUq+H8xAjOTQjH\nJ8t8a206UVkWTgLitksQBAGIiA1h1s2j+XrBPqoYiDclmwhXPY7yr/C5G/H6zWzdloxSE8MFM4eg\nPbxS0pAhw7jooktYuPBz5n72Nuq0BHJ9/XGjRQIGWYyMiQwh2aRHkiT8AZmNdTa21bcyMcZCsEas\nfHQqEk++giAIh5lD9Fx0zXBSMyJJT9tAa8WH+NyN2D3pfLM6C1TRnHdFTpelAgOyzEU33IYkSTz6\n3Ovs8vRDqVAxMTqEu7P7MSs1lhSzobMXtFIhMTkmFL8ss9bafKKyKpxgIvgKgiD8gFqt5IwLMjCZ\nHADkFyaxdk0kQWZjl8UUnD4/62uaeW5vEd/KZpInTqOpJJ+o/PXcNzSNaQkRhGh7fqodGmYmVKtm\ne30rNre31/ImnDxE8BUEQfgRSZKISL4SgH6J1YSFB7jgyiEYTVqsDjcLS2p5cncJX1U00OLxMlAq\nZs6tF6BQKPjirbd+8sLa4PYQrFHhl2W21rcc/wwJJx3xzlcQBKEH+uABWOKn01z5FWPHFVDkGcqW\n3HrK2jsWSDBLToYr8hikbSSu33R0QdO4+OJv+fzzT/n666+YPv28LvvzyzK5ze1srmuhuM0JQLBa\nRbLJ0Ot5E048EXwFQRCOwhQxgm2NLr5piwJ7x7KA/XUu0j1bSZCqMUcMIyT2QhSHp6S86aZb+Pzz\nT1m58uvO4Nvm9bG9vpWtdS00uzz42ryY3TI6V4D2FhfVkpbUHBGATzUi+AqCIBxDkyYFaAdglnYN\nJl8NSq2J0MQr0ZtTu6TNysrBbA5m48b1FLfYWZVfR26VDXeLB1+bB6/dCzL8cJDRqh2VnJ4T23sZ\nEk4KIvgKgiAcw0X9oiluK6HN40HytWAIzSY0fhoK1ZE1ff2BANYGB4XVLUQkDaJo30YefGYZOuOR\nWazUKgWpccH0jzbTP8ZE/xgz7y7Lo6DCht3lxagTQ45OJSL4CoIgHINSITElNoyFpXUcMl9CelJ/\n6pqdlFhrKLG2UlrTRllNG15fx1q9mpABwEbsTYcYN+pCshMtJMeYiQk3oFR07YqVnhhCfoWN/Aob\nQwdEnIDcCSeKCL6CIAg/YWiYmfcXHWRJo5OV2gpcbv+RjRKojGr0Jj1Gi5aB/c8md937DNDXc/v5\ng46534EJHUsPHioXwfdUI4KvIAjCT1AqJOyNHT2UlRolKXFm7DoFHr0StUlNotnAmMhgskKDIDCY\n1+8LYtOm9T+53+S4YJQKiUMVtuOdBeEkI4KvIAjCz5CVEsa+okb0g8OwG1SoJInhYSbGRAYTZ/zB\n2rwKBVlZ2WzevBGfz4dK1fNl1h8IUN/sJNSspby2DYfLh0EnLsmnCvGXFgRB+Bmy+oeyr6iRIKef\nSWnRjIgwY1Ape0yr03UE4++Db0CWD78nbqXU2kZJTSvltW14vB3viSUJHC6vCL6nEPGXFgRB+BkG\nJlpQmBoJDiiINwRR3W4jIAc6VjIiQECWkeUAATlAi8cOwGurV2BzBWhoceLx+UCSAZAkmZAEDaHB\nWsLMWsYkZhMeoj/W4YU+RgRfQRCEn2FLyxq0GdvIB57dcey0Na4aAHIDq1GHaCAEND9KYz/8r8IJ\nvoZasuKuOw5nLZysRPAVBEH4GcJ0FgBkr4Z+mkzaHT5s7d7DPZ8lkAEkjFo1OnkzUMZYy0QS4iLQ\nqlUoJAkFChSSAkmSUCAhSQreOfAxLr/7BOZMOBFE8BUEQfgZDIcn1fBWDiCvPhqA4CANgw9PmtEv\nxky/aBMmg4bZy1dSsms35w+cQHh4+DH3+97BTwjIgeN+/sLJRQRfQRCEn0EhdUyQMTIjkpETsugX\nY8Zi0vaY9vu1e/1+f4/bu+wXiYAs/3onKvwmiOArCILwM5ieeou72uzYx+aSkhmM1pCArI9B6mEo\nUWFhPgaDkbCwsJ/cryQpxJPvKUgEX0EQhJ8gBwIo2jp6MBs37aVm014AJJUKTUws2oQEtPGJaBMS\ncAeHcOhQHuPHTzjqGN8fUkgSsgi+J5TX66epwY7X60et7nn42K9NBF9BEISf4LFaASiM11I2JJbY\nVglTg52gBjsmayXuinJgAwDb6mqRZZkIRzOLX7mb5lAdNouWFrOKgAQB5MNDlAIEkHH7PQQQzc4n\nQiAQYOPqIkryG2hvcxNk0tI/LZxxU1JQ/Gge7l+bCL6CIAg/wVVUCEBlrJ79Zjv7zUA8gAEpoMfS\nFiDC5iPC5mODtRWA0SojGbvrO/fhU0rYLBqaLVpsYTpsoXpawnQYDZGMiBrS+5kS2Li6iH3bqzp/\nbm91d/582hkDjuuxRfAVBEE4BrfLy/xNPlJNqVxx5kyuTYxHQuoYOiQpkJA6O1gBLNl2KbCPc19+\nA5PLibuiAndlOe6KCtTWasIbWqGgtTN98OkTiRoz+QTk7NTm9fopyW/ocVtpfgOjJyYf1yZoEXwF\nQRCOYf3KQryyktyo06hYVktGjoL0rGiCzLpuaQOBADt2bCMpqR9R/fsDYMjI7Nwu+3x4aqy4Kypw\nFhfRsmYV7urqXsuLcISj3UN7a8/jq9vb3DjaPQRbjt+sYyL4CoIgHIXP66eiuBGAaH8tDY4Ytq0r\nZfv6UhKTw8gYEkNSSmjn+8FvvllOc3Mz55xzXo/7k1QqtPEJaOMTUIWG0rJmFfrklF7Lj3CEIUhD\nkFnbYwAOMmkxBP14TrJflwi+giAIR5G3twan00dS015Sm3bik1TUR2RSHTyQsiIoK2rEoFeSnhNL\nek4ML7zwLAB/+MNtP7lvV3ERADoRfE8ItVpJ/7TwLu98v9cvLfy493oWwVcQBKEHjeXLMCu2YTCO\nYdRZk6A8HndlBbqKcmIK9tKmsVBlTqPWn8LOzRUsnP8V27dvZezgEcTL4G9vRxkUdNT9O78Pvimp\nvZQj4cfGTEqmutxGU70dWe5YXSo0wsiYScnH/dgi+AqCIPyIx2HF3rgNgInjt6FLPBvj0IuOzFzl\nsOOurCS5vBx7RQVlVW4+2TwXgEGDL+fThWXEtK0ikTpC40I7mpoTOsYBqyOjQJJwFRWisoSitlhO\nWD5PdZvXFtNYZ+/8WZahsc7O5rXForezIAhCb/L7nNSXzAegpjaM6Og2miq+xN68n9DE81FrQ1Ea\njBjSBmJIG4gFaNq7m7yX7mVEznDOHDWI4mov5ZYsyoGQxhriig8SYV+GUvYjaTRoYmLxt7YSNHzE\nCc3rqUz0dhYEQThJ7GlspaV2I/08NopK+5F3KBGTyceI4aVAGTW5rxMcMxlT5Ggk6cgkDM899zQA\nd9//IJMnT+B0X4Di/Hpy91ipKgObPhqNUiZBYyO25RByZQEAxkFZJyCXAojezoIgCCeFrXUtLCqr\nA1K4wOhn+OTJGMNqydtrZc3aFGKizWRlFmOrXom9aT9h/S5Ao49i7twP+eqrJQwfPpJJk6YAoFQp\nGJAZxYDMKFqaHeTusZK3r4Yiu4UizRgSp5zDmVNjUYf+9NzPwvEhejsLgiCcQAFZZllFAxtqbZ2/\n+9KRRjABRp3enxGnJVFe1MTBPVbWrreQObCIuFgr1tx/U1AVxr33/p2QkBBef/3tLpNtfC/YYmDM\npBRGTuhPYW4dq5fmUWttQx0W3mN6oXeI3s6CIAgniMvv59OiGg61OAhVOjmblbh0qSxxZDK30MrM\nlBgyLEH0GxBOvwHhtLelcWjvAPbn7iUibAd/vf8xPB43/7j/EaKj4o55LKVSgcvhBSBrRLwIvCeB\ncVM6hnmV5Ddgb3Nj/MHczsebCL6CIJxyPF4/T87dRam1FVNqMEOzo7kkLgR7lQWPfQ/TVU185RvP\n3CIrV6bEkGnpGDIUZNIyfHw//GMSuOTiN6mubeXGWWOZOrqezV9/iF81kvScBGLig7sFV78vwJ5t\nFajUCrKGHztQC71LlmVkueO/veX4LtsgCIJwkimotPHwO1spPbwAQlthC9PCQzAZI4ga8HsscdOI\nlWo4R7EKSfYzt9DKweb2Lvt49tmn2LjpO6ZMOYO/3PsSAdlM/6RKYizLWL9sDfPe2sbuLRU4HZ7O\nz+QfqMXe5mHQkFh0enWv5lno2fcLK9jbOv5O9jYP+7ZXsXF10XE/tnLOnDlzjvdBHD+ogMIRRqNW\nlM1RiLI5NlE+R3e0snF7/cxfU8QHXx/C7vIRmRyMMtKAu9HFoTIb4wZHo1Yp0RrjMVoGo3OXEe49\nRKGcyN4mO5F6DeFaNY8++jAvvPAMCQmJfPrpQkIjEgiOHo4s+5E9ZcTH1SLJ7ezZGWD3lmqa6u1o\ntCq2fFuC1+vnzBmD0GhPTKOjqDdHeL1+1q8swOP2d9vmbPeQMSQWpfKXPZ8ajdqjbhPNzoIg9Hmf\n7V3Jth0+Gmu1RIUauG56OvHRJt45VEWu3UtVZTvvfJXHLTMGIUkSKq2FiJRZGJr2IFVs5EvvWD7c\nX8ihVx9h45pVpKSk8vHHnxF6uLeyQqHGEncmBssgmsqWkBBXQ1xsK4eK0inKkynK61haMCMnhiDT\n0S/IQu8RQ40EQRCOk2aXjY9zF5LbnAdJcEbStVw6IR3N4Z6s1w2M462AzP42D9vz6vg6xsQ5o5MA\nkCSJoLAhjDCn0LLpC+66+0UaSwrIHjGU+R9/gcUS2u14WkMs0ek30Fq7gZaadWSk7mTQoDQKSzOp\nr/UwbGxir+ZfOLoTPdRIvPMVBKHPCcgB1lZs4J9bnu0IvIcVKdehVh257OlVSm7IiCdjdCwKjYL5\na4s4UNrUZV979h3iz7c+SmNJAZnnXMTIh/7Fvsrv8Dhqejy2JCkJjj6dmIE3oVSbCbjzGT7Sw2Wz\nR2AOOX5PUsJ/5/uhRj3pjaFGIvgKgtCnlNkqeWbHq8wvWIxCUjAr/TIeGTEHyR5Gjb+YeXtXdEmv\nVym5OTuJtFExALz0xT7qW5z4/X5ef/0VLrxwOg0N9fzzn0/yzgsvoFUrWe7KYH3u19iqVyMHfD2e\nh8/bgt/bilITjMGS2WMa4cQaMymZsEgj33dMlyQIi+ydhRUkuRf6VtfXtx3vQ/wmRUSYRNkcxS8p\nG48/gDsQICDLBOSOSRT8h/9r9/npZ9LjbNqNu70CtS4CtT4SjT4ShSroNzP2UtSd7uRAgD0v/ZO1\nliYKEjSMiBrCJQPOx6wxAbC7tJI3D72OpPJyY/oNDInrOnG+y+fnqeUHKdtXD756rBveZMeObYSF\nhfHKK28wdepZAJS3O3nnUCXeQICpik2k6x2EJZ6PNiihc18+t42aQ28SCHiJSpuN1hDbewVxDKLe\ndLX+m4IeJ9nIGhH3qyysEBFhOuo28c5X6BMCAZnGVheSTslL+8vxHeOeUgH8QbMCOdD1XY9CZUCt\niwTZjz44HVXQcAoP1pGYEkpIqOE450D4JTzWamrefQtDcTHTgcLbzmf6oEu6pBnSL56JtefybfsX\nvH3gYx6x/AWL4cjFUadS8pcz0rh84fvs/OpdAn4vF1xwEU8++Szh4UeaJxOD9Fw3MJ53D1WxKjAO\nnBtJLXiXoIhRhMRMQZIUNJTMJ+B3EZpw3kkTeIWuxMIKgvBfkmWZ5jY3xdWtlFg7/uWVd0wNOGlM\nAj4jROo0xBi0KCRQSBJKCWweH/ktDuINKmSPG705DWNoNh5XHV5nLV5nHe72UgDc9goOlZspzK1n\nwyqISQgmIzuG5PSI4/4uSPj5ZL+f5hVf07j4C2Tfkebf4HnLaUiZQLg5skv6y0eNoWBFKVb1Lv5v\nw7v8c+ptKBUdf89Dh/K4665b2LlzB1pjCIOn/IGBl12EJaz7/MvfB+B38qtY5R+PpDaRUr8VZ8sh\n1LpIPE4rxtAhBIUPO74FIPzPRG9nQfiZ2hwePl6Zz6EKGy3tR8Yq/rChuLHJCUY9gyxBnBnf9aJp\nc3v5v72lmBUuAHTmZAyWTAwceR/ndTVgzf0XSk00RXn1BFv0BJm1VJXZsFa0sP6bAlIzo8jIjiYi\n2vSbaabui9xVVdS8+xbu0hKUZjORV11L0NBh5L75NBHbDrLrjaeY9OcnUSuPTGghSRJ3T7mUe1dU\n06qv5N+blzJ7+Nm8+OKzvPjis3i9Xi655HLuuPthXlhUTO7uGt4M0XLTqGSUP/pbJwTpuC4tjnfz\nq/jGnY3GEkdC20r8nhbU+mgsCef0dpEI/4UT3dtZBF/hpOf1e1lWuopYBrE1tw6DVsXwtAj6x5rp\nH2OmX7QJlVLBHS98R02DHWWCHn8Pzc5KRcfF0+tzAqAxdJ/iz+vqGI/Z0BSJLMPICf0YkBlFq81J\n3t4a8vZZObirmoO7qgGYPbM/jgP7CZ40BaVe9GTtLS0b1lH34fvIPh+mMWOJvGIWyqCOKSBPu/tB\nvrn9ZpIONbJuwatMufyPXT6rVav50+hr+b8dL7Hq4Oe8fucDVJeXExMTy1NPPcfZZ08H4PaLDLzw\n2R52bKjgA6OaawYlHDUAv5FXwVfNYfwh5TpMjv2YIsegUIhZrE5mJ/3CCk6nk/vuu4/Gxkbcbje3\n3nor6enp3HPPPfj9fiIiInj66afRaI7vXYJw6rG5W1hXuYmvy1Yf/s1qJOlsYiOM3HZx93VQB8QH\nc6C0mQiPv+fge/jC6fO5QFKg0Ud1S+O2d3wRC/IlTME6UtIjADCH6A+vcNOPdSvyObjbCkDV88/i\nb2vFtvobImddQ9CQob9G1oWwccVAAAAgAElEQVRj2LquhB0b/KQZUxmcE03UNb/vsl2p1ZL2x79R\n/MiDxHyzm739vyZ75Nld0gSrlDTMK+TbL5eCBFdcfS2PzXkMk8ncmSa7fxiXTExhwdoiNq8rR6NR\nccWAmC4B2BcIsKnOhl+GYI0KiykKU6iYt/m34kQurPCTQ43WrFnD4MGD+eijj3jhhRd48skneeml\nl5g5cyZz584lKSmJzz///LifqHBqkGWZQlsJz298i4c2PsHXZavRq448UcbHy5RUt+L2dJ8SLj3J\nAoCn2d1j8D384IvP70Gjj0ZSdL/39DiqkGVobjIyZFQCCkXXr4gkQWOdHYCJ7MLf1ooxOwdfayvV\nr7xI9euv4muxdduv8MsFAgE2ri5ix4YyAPIjxlC2PQ9nUWG3tEGRMYRcNxtJBv8Hn1FrLQE66tei\nRQsYN24Ea75cSlRSAlMeuQjV1H5o9d071U0fnciI9Ei8LR42bank06Ia/IGOutXu9fH2oSp2NbaR\nYNRxa2YCJrVoTPwtOikXVpg+fTo33ngjAFarlaioKLZs2cLUqVMBmDx5Mps2bTq+ZymcEkpby3lq\n24s8v/M1NlXsIMYYxaz0S3l8/AP8IetaAKSYAvwBmYKq7gEuPfH74OsicIwn3wCKHpucZTmAx2HF\n7jCi0ugZmB3dLY21soXa6lZiDC5UhXsIGj6C2Dv+SNLDj6BLSaV9+zZKH7qflvXf9eoXua9zOjws\n/XQve7ZWEByqZ8zkZCQJdkdPIfffH/V4w5M47DRc08ZjdAYoevUZKivK+P3vZ3HTTbOx29t56KFH\n2LZ+B/36D8Otq+XZNd0fIiRJ4vrpGcRFGHFUtbP1QC2fFtdQ7XDz2sEKytpdZIcGcUN6nAi8v0En\ncmGFnz3JxhVXXMFf//pX7r//fpxOZ2czc1hYGPX19cftBIVTx/ba3VS0V9PPnMicyX/ibyP/yLjY\nUWiUGrLCM0kyJVBPMZKhlbyy7hfbpGgTWrXy8JNv9/0rOoOvhNbY0/veBuSAh2ZbEFnD43p857N7\nczkAsfmrUEdFE/X765EkCW1sHAn33k/krKshEKD2vXcouHE2Tp8Tr9/7C0vm1NZQ28aC93ZQVWYj\nKTWMS64ZztDRiZw5I5OAQs0O01gOvfZel97O38u55AYa0mLYvi2X08ePZNmypYwbdxpr127ijjv+\niE6r457xs1H4DFQodrJgx5Zu+9BqlNxxcRYGrYq2Q83sKmvilQPlNHt8TI0N5XfJ0agVYr6i35qf\nGmrk9XZvXfs1/exbtXnz5pGbm8vdd9/d5Y7+59zdWywGVCoxPKMnxxqEfaqo+XoFRa+9wciBqawd\nISFLftIjUlFIXS9os4bO4PHvXkETV0hhdWKPZTewv4W9+Q34/HK37R11VSYgK4iOH4DO2HV7XflB\nANragznr8oEYjF37MdRZWykraiLEU09ooIVB9z+JMbHrUJbIyy9EJ3spnzsPgIc3PYlRY+DBiXcS\nbeqa9pc6FerOvo3zaKzJo611GBOnpXP6GQOQDr8/iIgwodOq+c+ne9jkG0jwgkUMvX125zaAqqoq\n3thfxLJd29Erlfz5ulk8/e8PurxOiIgwcZf/ep7f9gqrGpYwqjWNYSld52AODw9i0vB4vtpYiq+0\nDeOQcH6f04+RMZZeKolfz6lQb36OpgY77W1HH2qk06gJDTcet+P/ZPDdv38/YWFhxMTEkJGRgd/v\nx2g04nK50Ol01NbWEhl57ItKc7PjVzvhvuRUn23Gb7dT9/GHtG3dDID7UCFnDhzKCrmKzRW7GKBP\n65I+VplAcnA/iiml6GAZ5ZXN6H+0NFu/KBN78xuoKrdRmdDA/v17KSjIx+v14vP5OFhcTam/jcc3\nb8Xv77izTU5OITNzMIGWfegUYInqj93hxu7o+sVc9WVHcE5s2EPkVdfiMIbi+NHfz11RTsX8Bcg6\nLR9PC8bhdWH3Onlg5dPcNuR6Eky/Tmecvl53ZDmArWolnvYdmIJg9Ohq0nMm0tDYdV3duP4WTpvS\nn/WrS1hREEAxbxk5V5xDfX0bCxfO5557/kxrawujR47kjvAw4puc7N2wjrj0ruNvU80JjA2dzKbm\n1fzfd2/yiPJOLMaOvgZNrS7e+zqP/cVNaDVKrhjbnyEDI9AqFb+5v0Ffrzf/Da/XT5Dp6EONXB7v\nLy6rXzTD1fbt26mqquKBBx6goaEBh8PBhAkTWL58OTNmzGDFihVMmDDhF52gcOqxH9hP7Xtv42tu\nRpecguWsadS88xYZXx9g1xkm5h9Yyn3D/9jl6VeSJM5PPosXd72JMraA/AobOakdMw8FAgGKi4so\n2fct+1Z9w5bPi3nWWoTX23OT7zc9/E6jUdE/MYzB2RXszNvG4MFZjBkzDrVaTVuLi8LcOoxuGynD\nUzCPG9/t836Hg+rXXkX2evlyXAhtJjW3ZF1Do7ORz/IX88LO1/lD9u9Jsxz/npS/ZX6vnYbSz3G3\nlyEpDfi9TsJDisjduohBYy7ulj5rVBKeVjtbt9exYmMzoQMO8Ni//8Ubb/wLozGIZ555kauv/j17\n1i1C+cFi6l5/jdA5T6IP6ToOfNaQaRR9W0KdoYSnV33GI+dezYZ9Vj5dXYjL42dQPwvXnpNOeLAY\nUtYXnOihRj85t7PL5eKBBx7AarXicrm4/fbbGTx4MPfeey9ut5vY2FieeOIJ1Oqjj2kTd1o9OxXv\nQgNuNw0LPsO2ehUolYSdP4PQc85FUipp27EN62uv4jbref8MI5cPm8mo6O4zBD2+8RWqXOXkcD4T\n4yJ4++03+OKLBbT8oNONpFAxJCeboUOHM2hQFnq9noC3kSW1AUwaFRen9UepVOH3+8jPz2fblu0U\n5m+gpLwJj/fIu8OIiEguv/xKUozptPniyPblMvbe61GouzZJy7KM9bVXad+5ne2ZBnaPiOSWnNn0\nD+5Ynm5H7R7ePzgPCZg9aCZDIrsPlfpv9NW609JWRXvZfPzeVvTBAwlLuhB7WzvVue+i1zmwe4eR\nMeq8Hj+7YcFmNu2pZcHSxymqzGXAgDTef/8TUlOPzNG79r0niV2fR0tiGCMe+D8kZdcLbLvHwYPf\nPoNX2Y62Yiw2azB6rZLfTRnAhOyY3/ykKn213vyvfD4/Cz/YSVO9HVnuGM0QGmHk4muG/SqvSo/1\n5CsWVjiBTsUvQtXLL2DfsxtNbCzR19+ELqlfl+2NSxbTuPgLqiPUfHduMg+Mu6dz+r/vHajN58H3\nH6Ro2SFqDnQMIYmJiWXcuNPIGTqcNVVadOpYnrtjEmHBus7PtdR8x4sVFowaLX/J6dqkvWLBN6Qn\nbwRdDi5lOrm5B9i8eSMLF86nubkZgH6xA7n9ltlcctW1GI1d3wU1rfyahk/nURmpZvU5Sdw+7Eai\njV3HEec1FfDGvvfx+D1kWbK5KWcWCsX/djHva3WnyeXlmX2lAJypWM+wuFTMUad1BruWxjpqC95D\np3XhCIwmffi0bvvYvXsnV152CY0tjWSljuSTBfOIjInoksbjdbPxqXuILW3BOX4oObPv6rrd7+WD\nA/PZ1bAbf5uFdM90rpk2kFCzjr6gr9WbX+pELqwguugJvcbp8KCK6AhImqgYtAndFxYPPe8CTCNH\nEVvvJeu7MrZYd3Rua2mx8a9/vcy1517Khme+puZACTkjh/Puux+zY8d+XnvtLW684Wais4egVGnI\nK2/usm+3vQolAeQfvW2xVrYQ8HSszRoWlUJa2kBmzLiYJ554hp2bdnH7mVeRnJhDafUh/vrQfWRl\npfHQQ/fR1tYKQHt+HnXzP8WuU7DjjGT+MvL2boEXIM2SQpyxY9m6fc17eWXhPnz+wC8o0d++gCyz\nsdbGiwfKOn+3nvEQOqbLU2ZwWCThybNwezQYFFso2L2my34+/XQu558/jabWJi6beAkXn/8Aq+ft\nxuPu2gNao9aSeevd2Mwq9Bt2Ufbd8s5tuU35PLblWXY17CZEE8Klaedw16XZfSbwCl2d6N7Oyjlz\n5sw5rkcAHA7PTyc6BRmN2lOmbBpq25n7xhZybSaSwsF3YBfIMob0jC7pJEnCmJWNI28/ocUNHHSU\nkjF0Csu++pLLL7+QZcuW4vG4GT7xTDJvHsqwGRO5YerVKA83H0rA6ppmnFV2DFoVw9I6nnxkWcZW\ntYJ9/mQkpY7x0Ud6qa5bUYDFVIjJ5CAkbirKw5N6yLJMzXvvUmcay7DsM3js2fsIDgmmsDCfNWtW\nMX/+POIiwpE/n4vS62fb9DR+P/VOgrVmfswX8PHW3k84ZMsn4NYTyBtPVa2X2mYHw9Ii/uvmzL5Q\ndxpcHj4qtLKtvhWtQsG04DoiPbkUB+Ioa7MzNNzcOTwMQG80E1Ak4LAdRCOV0NigwhQaw0MP3cdj\nj/2DoCAT7777EQ8+/FdKvtlIvRxCVV4lA3LiUSqPPGcY9WYa4oORt+/Bt28//oxUPreuZlHRl7j8\nbqYkTuDGrKtJi4z7zTcz/1hfqDe/lvZWNzs2lvW4zevxk54Vg07/y6YINRq1R90mnnyF46650cHS\nT/d0/rxBOYymmME0Lf0PbVu7j6tUaLUMfvB+vEE60jZWc9Xl5zJ79izsdjt/+9tD7N6dyzNPvY7J\nnEGtp4rcpvzOz0qShMakRqVRkFfe3DkUzu9pIeCzo5SUXWa/aqq3U1bYSFiYHYVSj0pzJCjbVq6g\noKgNr1JH1ugkklOSuffeB9i8eRf33HM/jY0N3HDrTTz27Tp2Dopg1rl/IUjdfWiCy+fmua1vsbdp\nL/62ELJ9M3j6hjMZEB/M1tw63luW1+OkIH2Vz+/nrW8LeHFvGWXtLgZZgvhjVhLjUscyJiKYNKmE\nSoeXxaU13T4bEZuEKeYyfH4Vttr/cO45k3jrrTfIyMhk+fI1TJ16FmpTEGfNnkiko5w6W4Blc7fj\n93VtYcgZNJHq80ah8smUv/w8O6t2kGiK454Rd3Bx6nlolWK63L7u+4UVetIbCyuI4CscV602J0vm\n7cHp8HL6tAGccUEGsgy7jCMojhyJ9d23cZWWdPucNiyM0jFjmL3mG1Z/t4msjEy++WYdf/rT3Vgs\noSTHBiPXdLy3XVq8ost4c5VCQVConsZWN/UtHSsYuR0d73VUyq7Bd/eWcjRqD1qNA43xyJOOs6CA\n2gXzKQ/NQqmUyBpxZKF0rVbL9bffzP03XERWaBhrqqt4+NV5fD5vXrdx723udv654RXKHMX4bRHM\niLmCm88bismg4Y+X5dAv2sT6fVY+WVlwSsyIZW20c9PT37JxUwXWdVVcmRLNrNQYTGoVkiQRmnAO\nZ4e7CKeJHY12ttQ2ddtHVEIqhbUDueaOD9m9dx9nTJ7El19+Q3LykV7k+vh4pp6fTri9giqrk+UL\n9+L/QRO/32FncF3H64cgh59L4s/g7hF3/GpDwYST3/e9nXvSG72dRfAVjht7u5sl8/Zgb3MzZnIy\ng4bGMSAziouvGYY5REeJeRC7IiZS+uq/8NmOvJ91uVz8+c9/Zvadd1LvdjM7LZ3nRwwnJfbIhVGt\nUpAamoC/KYqytgr2NRzs3KaUJIxhHU3HeWUd+/UcDr5Khbpz9qv2VhcFB+uIS+hohtMcXvTc19qK\n9c1/UWdIxKU0kp4d02XCjRp7HZ8sfpozKr08N/1sHn/kcfz+AH/60+1cc80VOBwd49rr2huZs+5F\nmv21SM3x3DFsNueMSu4M8Hqtij//bgjxEUZW7azkHx9u/1XL/2TiDwRYtrmMh9/Z1vm7gDfAzoN1\nXdJJkkRU0nnMsNSgxc2S8nrKWruO7Z0790Ouv/kPNDY7uH32RP7515G01HZvPgwZOYoJ2TosjmrK\nim2sXpJLICDTvmc3pX9/gPaNG9AkJJJw/0NMzJzWbVIXoe8bNyWFrBFxBJm1SBIEmbVkjYg7ORZW\nEIT/hdPhYcm8PbTaXAwfl8TQ0Uc6V4VFBnHp74eTmBxKkyGOTebTyX3lbQIeDy6Xi1mzLuP5558n\nJSWVBYuXMuTS0eha7FS+9nKXKQTTE0PwVnb0SFxasoKA3PFko5AkDN8H38OdrjyHVytSECAQCCDL\nMnu3VRIIyKSkdkRjrSEOORCg5t+v421upippPJIEQ0YfeeotbS3nje9eYvy31QSUCtLuvIcbbr6d\n9eu3cvrpk1m+fBmXXTaDbfn7eHTjS7gULehb03h46g0M6tf9LjtIryZ7aEcnrPLqNr46ZP3V/gYn\ni6r6dh7/cAfz1xZh0Km47aIsHrhuJAq1gm83lLGpsOv0tJKkIDn5PKabypCBj/LLaPO4aWxs5Oab\nr+OPf7wNg8HAJ58s4NrZc1AowN20CGtZfrdjR11yCWNCagh21lKYV8+yl/5D1csv4G9rI+zCi0l6\n4O+Y+olx16e6E7GwguhwdQL15c4P274robSwkag4M1PPz+jWcUWlUpKaEQmyTEW1i0oi8e7ezIOv\nPcWaNauYMWMGn3zyBSn9UyiLUNBcmk9wSR3+9naCsnMAUCgk1u1sJCZGptZbTmxQNDHGKDbUNuNR\ngKuqnVqbE2eklrw2mUJ/DLU+Az4UDGx6D3zlGA0taJXVaLVenIExeNevoXXDOhyDJlDoDiM1I4LM\nIR1PxLmN+by+623OXlWLpT1A1FXXYDq8hKDJZObCCy+htLSEVatWsHTFYmJHxZKkHMffp83E3EPH\nC78s89q3BXy3rgxk0IVoqQtTY1ApSQg6dg/b30Ld8Qf8PPbdmyz5rpLGBhVjB0Vx16UdTe2hRi06\ns4b9+Q3sLWpkWEYkZt0PF71XEBuajKt5H0W+UL5cNJe/33YjO3ZsZ/jwEXz66RcMHTqMkPBYmpq1\nKAOFuNvy8MnxRMZEdZaNJEmYsrLQrv2cCnUCtoCR0GAVA++6BdOIkUin2JzMv4V605s2rCpk3/Yq\nvIdXSfN6/NRVt+Fx+0hMDvuJT/+0Y3W4EsH3BOqrXwSfpxWp/d9ERLSQf8hMc5OLxP6hXXqcQseF\nMS7JQliYjuJcKy8veZvNW1czceIUFi9eRCDQkT7eFMcH7CKxyokirwilyYSufzLBRg3Lt5Wj9oXg\nCymhvLUaXWsye/PqqSu04XH48HkD2EJUNCmCaSIEPyosShfZ6krUyiYsIW1otV7a7XpWLtNRWg8+\nWUGlOh6XpGPKeRkYg7Rsr9nFWwc+4rQdraRUuDGNHUf4hZd0ualQKBQ0h4ZQbDuAdVcpddusPHHr\n3UREdH/ibff4+OcXe8nfV4dCqWD2eRlcPCmFA03t7G9u/8kAfLLXnap2Ky/v/jc17koUYdVcOngy\nl09MR/OD92gpkSYqHC6qKlvZXtLIlOxYVMofzmimIFjW8NL9t7Pmo/fx+nw89OAcnnvuFUJDQzvT\nWSLjaaiXUFOM05aLSpuMQn1keUCXR2aj1Uy7E4J1fk6/ZQb68F9+Yf0tOtnrTW/yev2sX1mAx919\nSJGz3UPGkNhu16z/lgi+J6m++EWQZZnG0s/xeZrR61wkJjRQUeblwB4HCf1De+y6Hxxm4J0Pn+Tb\njctIjMvkuhn3kjN6QOcYWLVSjVeSWa4vJ7sigHP3bvSpA9BGRnKowkZppROVqQ2Hso7texy0VWvA\n4yc6zMjwjEiuGd2fCTEWTo+2cHqMhQmx0QRHjcYUORZ9cBoaQxwKbTYojDQ0eWjUReOSdIQ6rSQH\nytmma+Dj/AVklvsYu6sFTVw8cbfdiUJ1ZLywx+vn+RVfsj+wiuicRDJDs9m5bgOLFi1gwoSJREfH\ndKYta7Lz6NydNFW3YzBp+NusoWT3CyNIrSItxPCDAKwgIajnqQxP1rrjC/hYVrqK9w/Oo9VzZDKH\n0pYKJvUbhepHM0qN6B/G5tJGmmvt5DW1c3pGxzKO36+7e9XVV1B26BBxmVmc+cirnDEmkaTwpG4t\nKaFRSdTV+NAqS2mw7kWhTUFvNFFT1cKSeXuw2TykZkRy7swR6Aynbk/mk7XenAgneqiRCL4nUF/8\nItib9tBWvxm1PhqjZRB+dzmxMXXoNQ1sWd+OyWIhJPTIU4ksy/z973/jo7nvMzg9k1smzaZVFcm+\n7eVExQcTdHiCgwRTLKsbtlEVriK92En7rl1oc3IoUZRRY9yEZOroFTskeiBXTxjNzDPSOGtkAkNS\nwjGqVehVSrRKBRqlonPsqKRQotKY0RpiMFnC6J8WTtbwOMwhOuS2VpJrt+LbvQXf7n241XDmdjsK\nlYaEv9yNKiSkMw+NLS7++dV86kxbUchqbsj8PTdcdBXR0TH85z+LWLz4CyZPnkpUVBQbCut4af5e\n3G1eYuPNPHLVcCJ+MFdwkFpFoqKG/S1eDrZ4qHE4yA4L7lbOJ2PdqWir4rW977Kzbg/BWjOzB83k\n2owrWF+Qj0NjZV9ZHacn53T5jCRJjEyLYO0BK/XWdhxKiNR4uO22m3j++acBmDPnn/zjn4+T51VQ\n4DYQ580lPCSp2/HDYpKxVjnQq8tprTtIZVUoq5YW4fX4GTs5hXFTUlCqTq1m5h87GevNiaJUKcg/\nUNvjk6/JrGXo2ETx5NtX9bUvgs/dTH3xp0iSiqgB12IMHYzBkonP3YRGaSUupoqygmoaG4KISQhF\nkiQ+/vgDHn/8EQYOTGfhoq/IjNPj3LqBGlU0+ftr0Rs0REQHoVZ23IFudhUQEzeA4NxyKnZ8xzdx\nVaD3MyRiMFcMvJiz0kYRHqzv0nz531CqFEREm0gbmkjkaaMJuFxwqIjUCg+SPwBXXkDk4BGd6Q+W\nNvH02k/whOeilvX8ZcQfSI9MBiAnZwj9+yezcOF8li5djDN8ECs2NyB7ZUYNj+WvF2Z1aYYFcLYU\n0FS+mNxACl7U1Lt8jA+2o9J0DcAnU93x2+0U3H4zvq9XsTolwNi40fwh+1rigjrmQh4eM4i1JTtp\nVVXS2qgiK7Z/l8/r1EpSEkLYuN/KumWL+b85t3DwwD7Gjh3PJ58s4IwzpmHS6YnQSuyxeSh2SAyg\niCBz9xnSwmMHUF/ThlZVgddZRm19POdckkXa4Og+N2HG/+JkqjcnmlKpoK3FRV119+k2B2ZF039A\nz8OQ/hsi+J6k+tIXQZYDNBR/is/TTFji+ehMHU8mSpUBgyULrSEWV1sFIeZ6VBwi/0Azdq/Mdddf\njV5vYOnSFURHR6ONjSXE04hm97c0BCVSUmSjvc1NQn8LScHxbLRupdpey4AKFyZHgNgBOVw56WbG\nx40mTG/5VS+wkkqNMSsH46DBNFcUsi1JZnFkHTHGKKIMkSzfVs77++cjRZYSpAjhb2NuI9YU3WUf\nmZmDiIiM5j+LF7Lju5XEpI3h6otH8Lux/budq6utlIKir1jim0Q7RlL0Hi6Sv8DVtBuFSo/GENv5\nmZOh7siyTPu2rVS9/Dyyq2M8daoqiunn3opacaS5Tq/RkKjvx/a6XZS5C4lUJBH3oxWF/PZm3nvl\nAXavnYc/IHH/3x/luWeeJzT0SLpIgwG/30W+XaKqvY0BSiu6oPgu+/F5WsGzA6+7BV/AxKgzziUy\npvuMY6eqk6HenExiE0MoK2zE5ehY/UySICzSyJkzMrus+fy/EsH3JNWXvgitteuxN+3BEJJJcMyk\nLoFFkiTUujDMESPw+5V4nWUY9VXceNvfqa5p5IUXXmXMmHGd6fUD0jDWlxC0fy1t4SlUWl1UFDeR\nlBxG0t4yclbk/z975x1fVX3//+fd+ya5yc0iixBCCISw9xbEgYiKheKsC7e1rdpW22pb236tddWf\nisVVLBVBWgcoU/YmAUISMsne92bcPc/vj0AwTYKohJXzfDx4kHvO+ZxzPp97Pvd9Pp/P6/1+o/QL\n6KdMZegNd6BV9V7CawCFyYR52hWoBg4ku/EoB+oPc6SglX2W3cjCa4lURfPU+AcJU4d2KdvQ6mLV\nUT+BoIq6ot04a7N5/O5bMRo7j2Q9jmqyijbxhX8KTrRMiw7jppREdIY47NYC3G3H8XtaUBsHIJHI\nLviz47M0UfePpVi/XAvBIKorZ9LYWIGp3IrNoCC0f+fEFZHGUHwOLaWufI7UH2d05Ah0KjWCILBy\n5Qpuu20R5SUFJA4exYi5zxCMSmdWZr8uiSf6Gw1U2Wyc8GhxtpWRqHSi1Lavp7vtFTQUL8frakIb\nlkH8kMVotGJc5m9yoZ+bi43dW0ooK7J02uZy+PB5A6La+XLmcukINp+fvxT6ORxMY4jeS4ghHom0\na3QYiUSKNiQRfXgmf3v5AzZsPcSV09O4Zf5YDKZEpDLVyeMk9Js6gZZ9+wgv2QMpQ6hp9FNwsIyw\nnIMYNFJiljxA+Jyru6SE600iNOGkmQZyqO4ozbJypBoH/Q3J/Gz0vei+oa49xeEyCy98lI3L5mXg\n6FHMyIxn0/q1bNjwFfPmzUev1wPgcdaxpXA3m/2jQSJjQf9oJse0j+JrqoNs2RAgPKwVmVBJW/1O\njNFTL9iz42h18cnSHQj/eReqy9AOTqffoz8jfOxErAkmAgeyCeTmoRiWgTrE1KlsWlQ8+WVWmmUV\n7C8rYpAylvvvv4s33vg7crmcP/3pBV7520scqHLR3OCkuNXBpEGdE1RIJBIGhRo4Zm3lRCACTdt+\nzGo5HnsFlrI1CEEfcYPmoY2YjrSbZ7Cvc7n85pwLRLVzH+Zy6QifljdQ5/ISRMZhh4GmxsNEKdxo\nNd0nDDhy9BhP/vp3mCPM/P6JRYTqLbQ2tEc+Uun6IZFI0Ru1SFLSsO/fQ0jpAfwKDc2qSJyh/Zj8\nxE9QJ3QV3JwPQlUhZISns78iH4/FRFTbJMYP7jpCW7OvjA/XHSfgExiaGcXTN2QydfIUfD4fX321\nlk2b1jN37jzkMjefHD/CwUAaWhncNSietNB2o+z3B/hy9TGcDoH4BDdqVXsWpS0bjYSatKg08vO2\njhkIBMk5WMUXq3Jw+yVUGQYxYf5ozD9ahPzkS0SUOYE8SSOheRXU5xzEPGUmUnlntejYxMFsK8gj\nd+cW/vz4sxQXFTJt2lC7ZUoAACAASURBVAw++mgNU6dORyaVMmpgBNuO1VJfYyeokTE4tvMsgUIq\nJdmoI8vSSlkwlsi2TUhsuUjlGszJPya2/5jLol/1BpfLb865QFQ792Euh45Q0ubky8omojRKZseG\nUG13UBEI51CLgM2SQ6xWg0p1Oqely+Vi4cIbsFgs/HP5RwzOvIG8I20YtFYC7lLs1hzkqlBCwmJw\nB2VoB6ZSczCPQtNIBImcafOHEx4bdoY76n0MKj0zEydSnKfhWGkzdVYno05mJvIHgrz8+TF2HahG\nIpMyd/YA7poysENhPXnyVJxOJ+vXr2PDhnW0DEilSpVCpCLAvenJRGtPd9asPRWUFjQydWo9IboT\nSBVR5JfOpLKsjZysavKyqlCqFZije84Z+kPx+xxUlLby1ZpcivMaUCoknAqRrI+PJSax89Rc4sAR\nHC4/gLnMSllFLrHjpnV6QaiuquJfz7/O/v9uR6KQsviRh1n26lJCQk5P2WuVcuJiDezPraewrJn+\niaFEGTu7XCmkUsrtbpo8QfwSFYN0ASJTbkOpjb4s+lVvIbbNaUS1cx/mUu8IvmCQDwprcAeC3D4w\nlsEmI+OjwtFIvFTY3ZT5TRxsasNrKybOGI5cpuT//u95vvpqLUuWPMidd96DVqekX/9UsrP02Fqd\nGPVNuFqO4WgtR6aKwik1sa3SiDcgZebcNAamd82TeyGQSaWMGhRJUWULOaVWLK1uEqMNPLfiEOXl\nrSj1Cu5fMIwrBnUWYEkkEqZNm0Fji5WvN28ib/8hrpg1hftHj0SvOO033NbiYuNn+aSnVRAVXoJC\nHUn0oNtJGRyHYt0HOIIqbBId5cUWkuoPIFWrkYeEnpORsCAEcbUWUF+8mra6TbhacygoiGLoyFiu\nWjCMxLbjlNYHqayykzzIjOYbca8lEglRGaM5cWArprImapVuogZmEAwGee+9ZfzkJ7dSWlLE2EmT\nyfjpVCQpchJUKUQZO6+XR4do8CmlFJVYySqxMGloNBple/sUtzl5v7CaWqeXSLWS61NSiY4Zh0ze\nvr57qfer3kRsm9OIauc+zKXeETZXW8hvcTApKpTR5vapQalEQoLRwPiocPC2UOGCEq+BQ/X1lB/b\nyfNPP018fALvvLMcpbL9R1sulzIgLQar1cSh/Qr0OhcyqrE3ZVGSX0ldvZ7JsweRnhl7IavbBbms\n3QDnl1s5Wmpl86EqnA4fITF6nv7xSFLN3Y9IC5ubOR6ZgsfloWL/dmqzD3H9dafXgAE2f34ck/E4\nKcllyFUmogbejkyhw3U8H9emtXhiB9Is6IlylGPM3kDbju00b/uatu3bUEZFooz8bi8pVo+POlsz\nkpZ9WMs/xWHJRgg6AFAoAgyfMpe0zHjkChn61BQCB3dQEzRRc7ySwWOSOk27KxVqGJiMY+9uZPnF\n5MoDPPjYoyxf/h5arZYXX3yF53//Z3w+PeXeArJr8xkXPQqtsnPwi/R+oeRbbDTU2MmqbGbSkCi+\nqGxkbUUT3kCQaTFhLBwQTYhK1eml41LvV72J2DadiUsKw+vx47R78XkD6I0qBmVEM3HmgHPyIisa\n34uUS7kj1Dk9rDpRT4hSzuKUGOT/s+Ypl0pICTMxxhyCx1VHmVPOsmd+hb2pnif+9DzjM0d3UUTH\nJoQSGmFi9w4ZVquO8LBWwsOsxCSYGTJ69P/ewkWBQt5ugPcWNuBy+YlKM/H7BZmEabpGURIEgT11\nTawutyJIJNw9PZlwtYn1679k06b1XHnlVYSEhHCiqImmij2kp5UiU4QQNfAO5Mp2d5mmT9dgaXCQ\nGzKakDAN8x+cSaNZyXF7GeY6B0GHHdvePSyLKSfXUkBRSylrT2wgSZeCwyFQa3FSVNXCpkNVGCK1\nHGxqZW15LRuqm8myuklxbEJOALUxkx0743A41ESEN6PVaVEbkoD27yo6I4XanftpFEIJWJuIT+uc\nii8k1EyZwsWHqz7l2Xffo7qmmvnzb+TDDz9m3LgJSCQShsQkcvREPa2ySg6cKGFG8ugumYXGDoxg\nR1EjzfUOdjW00KCEaI2S21NjGRFh7JjO/yaXcr/qbcS26YwgCFSeaKa5yYHXE0ChlBEWoSO+v0k0\nvpczl3JHeOqtPTQXNBMRpWdwlBFdD7kvlTIZaRFR5Pz3X6xf8zEDps8h7No7yWuoJFQhJULb2U0o\n1KRlQFoklSccmE0nkMkgYcg8ZN0kqb9YUCpkjBhsplQj4A9VopHLSDJ0XqMMBAU+K6/j67o2NHi4\nKayGMQOnM336FR1rwJ98spL09GFYThwnfVABEqmWqNQ7UKja17gDLhd1H7zLsdgrcEs1zJo3GFOU\nkYNCJev11USoTZhq2sgebSbX6KLOWU+FrYo2r41tx/PZuAF25tRyqLCR8nob2c02auQCTn8QgfYf\nmtjw/gwZOBd9+GCUKgOHD7lISqjD76nBEDEaibR96leqUhEdqaYot54aS5B+MSoMptMj/e3bt/L4\nL59he2kJURotj86bxe/f/CcGQ+fZgHHxg9lWmItTVUtJpY3xSemd9nu8Acqr26i1OAl4A8wdm8jN\nydGEqnoWwlzK/aq3EdumM2JihT7KpdoRKhvsbNxfCUBTZRvbC+qp9HpJMevRyLsa4aqqSu675070\nej0fvvsmrkALFf5QjrR4KLbUEKnVEaI6PVJUqeVEhe4h4G0gLG422tBB561u3xedUs4Qs4G8Fge5\nzQ7kUkmHAXb6AywvquZYi5NwmvlRWBWDBlyFRCLtWAOOiopm3bovWL36I/pFWxmalkTM4J+g1Jg7\nrmHbu5viohYqjWmkZUQz/GSaxj21B6m21TA3ywd+P5OefAFPzUDyDoWg0vgQ1G30848mMiwGt16O\nEBQIeoOkDTBxY0Y/rgp3kNT6KTlCGkGZgVGR7cbeZNZhaXDSYrETHmZBKlOj0p+OKqU2R6CqP0FZ\ns4KqvCrSxyRRW1fDk08+znPP/Ya2tjbuu+8BHh6cxEiHhEJ/HQnpYzq1m0wqIyNyMDsrDtFEOYIz\nhNTI9lH0keImXv74CCdqbcRF6rlnbjrj4kzdjnY7fReXaL86H4htc5oL7WrUtwOdinxnBEHgo81F\nAFw3MZH+CSF4Wzwc2F7BL9/Zx9KdxbR5fJ3KPP30UzidDp577k8MTcnkJ5kTuCvOQ4K0gXKPmreO\n1/JBXgH1Tg8AdksWNstx1Ib+GMzjznsdvy/haiX3DOpHiFLO+ioL22qtNLq8vJlXQanNTZKkikVh\nZfQfcC0SyTez90i44467eP/t1wkP0/LaO9v5/evZeAOdfYebdu2lKGI0crmEOdcPPb3dZSW2yU+w\nsQn9yFHINBpCDSrwK0mJaX97v3PGKBbNTsWQEkrmyfzBSSoVg0P1GEMGEK4LJYomTthc2Hz+jvua\nOieV+qZEfH4ZLXV7CAY7f7eDF1xJf0UjVp+ER267j0mTRrNmzWqGDx/Bhg1b+cMf/kLm40/jVkkx\nrd9P7pGtXdotNiSMW1MXgyDly5pPyS4v4x+f5/Hq6qPYnD7mT+nPb+8YTXpc1yAmIiLfF6fdi73N\n0+0+u82D0967Lymi8RX5ThwuaiK/vJlhA8K5YeoAfrN4FL+9czQp/cPw2Xzs21nBL5bu4e3tRTi8\nPnbs2MaXX37BuHETWLhwMdD+o54SM5T7ho9mUUQ9UZImChxSXsstZ2VBAZVVO5DJNZgSrr/k4vH+\nrwF+Pa8Ci8fPcEke84xVxCbfiETSdXbA1XaCgdElfPDq7WRmDGPtuq+45porOH48HwBvfT25LUZ8\nMg2jJiUREnZ6WtvitjK8vN3/J2TSlPb/T75xt3hb2u9LYyJer8aokFPrbzeuLfbTOW+N0VMYIK1A\nAHKb7R3n1miVTJ49lPLyWAg6sTUe6nTfgiDQYnbw+nv3s2brJ+jUWl577U2++uprhg0bDkBodDyG\n229FFgTXex9S31TVpf7j+w9ivHEWyH28nfNP9uTWkBht4Hd3jmHepP7fO1a3iEhPaPVK9MbuR6Z6\ngwqtvnezX4lPtMhZ4/MHWbmlGKlEwsKZKR3bk6KN/HrhCP5wz1hSB4bjd/nZu7uSn76+g4ce/xkS\niYQ//vEvXQypVKZiWP/JPDA0lXn6YkJp5UiblFW+WcSm3dghMrrU+KYBDgYDzJDuYarRQuSAhR1r\npt/E46iioeTfCAjYPVfwxbrN3H33fRw/ns+0aeO5//672f7RGqpD0jBqIXNsfEdZX8CHw9FK0gk7\ncpMJzaA0AEIN7T8ctkALOoUWjVyNVCIhw6THL2//Hlrtp9/6NcZUBqmdABxtau50f0kDI5DpRuL3\nS7FW7UQI+gkGg3z99WauvXYWj/7iUVweO1PHLuDRRS9y3Yw5XeLi9h83E+fUURjtfnLfegG3v/OI\nw+514NfWAyBRuZg3NY5nbh9FXKQeEZHeQKGQ0T+1e3eipNQIFD3oWM4VovEVOWte3b0CiyqfGSNj\niQnvKoDqF6Hnlzdl8vx94xmUFsGJrI3UVRQRN3Qm+xq12Ny+bs4KSnU44wdfzTUnpxVD5GCOyez2\n2EuFcLWShwdF8mPZ5wySlmGMnIBU1vVN2uuso6F4BQgBjuSkM3zSJFQqFX/+84t8+OFK0tOHsmbN\nKm750y/55KuXSRqq7bQOZXU3k1zpRuELYJwwCclJoxeqUwECbsFGhPq0cCTDpEcilyCVSWhxnJ5W\nk0gkxMaOJZoGyhw+2rz+Tvc5YeYQ6hriaW1r5Pnnfs64ccNZuPAGDh06yLx5N7B7zyEe/dGtCJpw\nvn5vM4K/c3mAzFsexBYfTlxZG1v//RKCIACQ1XCUP+x7kUMNR0gyJvDrcY8yf2IasnMQ2F5E5EyM\nn55MeKSOU+OCU4kVxk9P7vVri0+3yFlR3HyCE/6jKBOPU6xaT0lLWY/HxoRpeWBmIlUHP0Kh0pA2\n5Vb2Hqzm8dd3sXR9Pm2OrussvmCQrxoVSIAFqSmX3HRzd+jUOhISZoBEStOJ1bTV7+4wOAA+dxMN\nJR8SDLg5kpNKbPLITrmOr7zyajZv3sFvH3mOyPAEjuZv5abFV/Lww0vIy8sDoMltJf2ECwDjxMkd\nZUP0SlB4ECRBwjWnI4LF69SEqRRIlTJabJ2/B23oYFKVFkDC0cbGju2CILD/wG7eWLGOa25Zymtv\nvkd9fT0//vGtrF//NcuWfUBCQiITF08jROaikiiO/uuLLu0hkckY8siv8GjkJG4vYPPOf7MsZznv\nHPsQT8DDDSnX8vNRDxJnjPlhDS8icpbs3VqKpcHBqW4pCGBpcLB3a2mvX7vrHJiIyP/gC/r5d8En\nAAh+BQ1U8VLWG8QpB3DLsOtIMHYNfvHKK3/DarXw61//lkV3X8s/dxRTmN/Evuxa9h+pY/SQKBZO\nScZkbI9K9HWNFYvHx6SoUOJ0l08mGn3EKBSaSJpOrKalZhNeZw2mhHkE/Q4aipcT9DvJzR9ImzOR\nqyd0zU/rcftRK4fx0C1/xRhSzFsfL+fjj//Nxx//m9TUQQwdnc6cyma8mUNQRp0OrCGXSdEZvQRp\nTwhxCsnJqecSpZS2Ni/BoNARIEMikTI8OpHtFQIHq6rwFuSyZctGNmz4irKyEwAkJcSyYG4a48fe\nwdRrbuh0r3K5jNmLxrDmwyMcqFTRb38WEWNHdjpGbYog6u57aXn9TUJXbeLIdeEkm/pz6+CbidKa\nERE5X/h8AU4UNnW7r6ywiXHTknt16lk0viLfysbyr6lzNjC13wSmRlzJx/v3c9y7lypDCf934BUS\nlGncPvw6YgztP54FBcdZuvT/ER+fwJIlD6HRqHnymqHUTHGxfHcpRXlNHMip4+CxOoanRTJjdBzb\n65oJVcqZ1e+H+9ZdbKh08UQPupemE6twtuThczciBP0EfDaq69Mpr4zg6ptSuu3oezcX4RNkpHkL\nmP7QQyx68EHWrv2Mzz9fw/r16yksLGANEHHsMHPtbq6+ei6ZmcMJCzOhMXpxABHqztmFMkwGPlPJ\nEASwOb2E6FUIgkBJSTGbN+9k66efcOJoDgFv+8hYq9Vy000/4o477iYzI5X6gjdwOoqpKG0iIbnz\nmpk5PoJRI80cyLaybW0e1yXHo4w4bVTd5WW4PlsHgAIpN/W/mqkDpncJriEi0tucjdr5m8LGc41E\n+OY8WC/R2Ng1dqYImM2Gi75t6hwN/Hn/y+gUOn4z/udo5O0PY1OLi38f2EW+Zw8SrQ2CEhKVQ7k9\n8xruXryIAwf2sXz5SubMubrLOSvanKzYV0ZJfhMBZ/vaoC7RwMNXpzMotH0t+VJom++KEAzQXLMR\ne+N+APzSUaz/UkdiSjjXLMjocnxddSv/WZ6N3mPlqhEyzPOu79hnNhsoK6vjg58sZG9pGftsNpqb\nTwul1Go1SqMBVYSC4QOGk548mOjoGAIBP01NTazdfxxbQxNRhgAOWwtNTY20tLR0lA9LSmHihJHc\nteA2xo4dj0p1WhVaffwTAq5ccgsymDl/Lip154AXgiDwyZvbaGyDzOBxJjx5D4Lfj+XT/9C8aQMI\nAsYJkzD/aBEyw7lPCnE5PjvnCrFtTuPzBfjoH/u7NcAGo4qF9479wSNfcw8hZkEc+YqcgYDPy85P\n3iAQ6+dHQ+d3GF6AiFANj8yeRYt9Mv86sJU8317KpTnc+aePyTqwjzlXz+3W8AIkGLX8cnY6JWOd\nvL+lkOoCKwqHv8PwXq5IpDJMcVeh1ifhddv5dJUHmTzA5FkpXY4NBgV2bGj3p05t2kfopCe7HCOt\nqWGWMYKEGxJ458lXOXBgHxs2fEVpaQm1tTUUlhXRltfIxrwaNrKu23uql0gwmUxERkYxZcp0Zs6c\nxZhJU/ig0YdZYmXi8GHI5J3dMSKTplOTl0d8bCk7NxZxxXWdo1JJJBJm/3gsHy/dyzEhmai3liGp\nLMJvsaAwRxJ52x3o0od832YUETknnFI75xys7rLvfKidReMr0iPFjz/MMLeXDCAuUQHdLMmF6tU8\nNOMq2pzT+H/rV/Gfj95FoVUivyaSv25aze2j5xAV2v3bX7JRg8beHl3mrisubBQrjy9Aq91DiF6F\n6jt0Om/AS6vHRojKgPJ/1MxBjwd/ayvykBCk3xg5akPTsJyw4nQcRSaXkne4hsyx8Wi0p8vnZlfT\nVG8nuq2YfknhKMK7Tse37t4BQO3gKBQKBRMnTmbiN0RXv97yEhZvDQtDbkUrcVJTU41CoSA8PIKc\nOh/bD7cwbFIKT83pOupOtOVR5g6nquYAiQnTOu1TqMPRhqUjkeRSUJRPyfEIBqRFdjomJExL2vBY\njh2u43CtioyWFkzXzMU0dx5SZe/6T4qInC0TZw4A4ERhEw6bB51BRf/UiI7tvYlofEW6xX70MBL3\nySAMQPX//ZngiCEM+PHdKEymLscbtRoKP9uA3+Vl7gM/QWPSUSbdz3N7j5AkGcWtY64g1tTZCB84\n3kBxdSsjU80M7d/1nOeDQLDddzm7sBFrmweTUcWIVDMLZ6ac0dUlEAywpngtRxtzafa0EKYKZZh5\nCDemXItUgMZVH2HPzsJvtSI3mdCPGIn55kVIZO2GPS4pjCmzB5K1p5zsvZUcy6ohY1Q/MsfGEwwK\n7N9+AoU0SIrlIMbrbu96fY8H24H92LRSAsnxXfYDeCQ2pEEd+tAYxg7unOXIUGphX+ERalu9eANB\nlP8TxCIzMpqyCgtHmizEx7qRyjuL4EKip+BqyWXggAq2ry8gJi4Erf5kYA+rk91bSigvtgBgjgsj\n8YFnUcV1f58iIhcaQRAQBDgPq7AdiMZXpAt+Wxv177+LRC5H//PH2F22g8iNWURl51KU8wsUs2cw\nYN4ipIrTa31r137O2rWfMX78RJb97mXsXif/zP6S/GAW5dLd/GHvYRKFUSwePZ2EKANeX4BVXxcj\nl0n40Yzef8vsiZVbitl08HTEJUubp+Pz4lmpPZZbU7yWrVU7Oz5bPc0dn6dl2WjZtLFjn99i6fgc\nuegWoH1qduiofqQNiybvcC3ZeyvI2lNBzqFqQsI0eD0BBjtyUctBP3JUl+tb9uxDcLvJH6IlQtc1\nUIA34MMtOBA8po5IVt8kzNBuKH0eP8dbHAwL7/xilBEewmcVTZQEYrE1HSAkekqn/UpNJJqQNOA4\nem0TW78s5Irr0ji0q5ycQ9UEgwKx8SFMmpVCRNS5X9cVETkX7N5S0mna2WHzdnyePGtgr15blBiK\ndEIQBOo/eI9AWxvhN9xEzMAMbpr9IP2feY78mal4ZQLCl5s5+stHKN+7BUEQaGho4IknHkOlUvHi\ni68ilUoxqvU8POFm/jjpl6RphyNVuajU7ODP+1/hT/9dx782FWBp8zB7dDyRYdpvv7FewOMLkF3Y\n2O2+7MImPL6uAdehfar5aGNut/vy6nKwZWd1u8+enU3Q01ncIVfIGDYmjsX3j2PizAHI5VKa6u2Y\nQuTE1GZhGDOm05T1KRq/3gpAfn91pyAap7C4rQAIHm2nSFanCD05Sg16guQ0dxXgaOUyUowaGgmn\nqv4owUBXA37KIA9Jr6G8xMLyN/Zy5EAVOoOKK+cPYd7i4aLhFblo+TZXI18P/f9cIY58RTrRtnM7\njsPZaNIGEzZ7Tsf2OGM/4hb/muIZ+RSv+oDEnDo8y/7Jvg1f8GJ2Pk1NTfzxj38hNbXz2m2YJoRH\nxi+mwXkl/8r5gmIhj2rJViraTBj045g7Mek81/A0rXYP1h5cDZptblrtnm5fDFo9Npo9Ld2UAm+z\nlYDV2u0+f7MVf2srysjILvsUChmZY+NJHx5LaWEjykOb8SHgra6mZftW9JkjkIeEAOCzWmg5chR3\nnJkWo4QITdcpe4vrtPHtbuSrU8uRyyRI/UEKWpx4AkFU/zP1PMxkpKjNTZE/injLIYyRE07X01mL\nvekQIEGvtWA0BnC5ZYyb1p9hY+KQd5PdSkTkYuJCuxqJxlekg5rCGj7dJRAbNYmrbru+I1ThN0mJ\nGcyAR/5MXv4umj5eyZ7tB9l+9DDDkhO5acEN3Zy1nUhtBI+Pu5Pytkr+evB1ZAYrP5qdiEZ14R7B\nEL0Kk1GFpZsOGGZQE6LvPuh6iMpAmCoUq6e5yz5lmAmZCQIWS5d98jBThwHtCYVSxqCh0Tikw2kq\nO477RCnuE6U0SD5AnTwA/YiR+JubQRCoHRwD1HVrfJs6jK+G1m4iikkkEkJ0KlzeAH5BIL/FzvDw\nzrG008P0/Le8gVIhkdH1O9CZMnG1HMduycLrrAFApgjBYB7L/NtHIpNJUWt6zrMrInIxcSqxQncG\n+HwkVhCNrwgAwWCQjevboxjVGAay6p19TJySQPKUrjGWJRIJQ9InU3iLmdffmYReqeS5AelU/vZp\ncmaOYsy1d6BTdR8Q/5jlOAIC0+InMim19+OnngmVQsaIVHOnNd9TjEiN6FH1rJQpGWYe0mnN9xTp\n0RkYRnRe8z2FfsSIbqeQu0OXPgTd7/6Ar7ER++Es7NlZuIoKcZcUAyBVKilOVIMTTOpujK+73fgr\ngwZae0iNFqpX0lxnwyAI5Fi7Gl8BiFQrqXWFYvVJCOa8BAQBCRpjKvqIkaiNKZ3SI4qIXCqIrkYi\nFwVZeypwOnzExhlQWKopdxpYv6uZ2H2fMmXBGExJnUNI+nw+Hnl4CW6Plzff+AcanwXFtgPErjtA\n9r4jBK6bxYQJ8zu539Q56tlQtoVQVQjXJV91vqvYLQumJ1NQ0UJ1o52gAFIJ9DPrWfAtgdWvT76K\nopZSau11BAkiRUqMPprrk69CngTOggK81VUQDIJUirJfHBE33vyd709hNhM2ew5hs+cQsNmwHz2M\n4+gRzCOGUR/chQQJ7+euIFQdSpgqhNCT/2rsdQAYFSFdYjifIkSvIhhswyyTU9jqxOUP0OT2UdDq\noKjVSZXDzSntp0cWgkwGuvAR6MNHIFeeeQQvInIpMH56MjUVLVgb2+M7SyRgMp+fxAqi8RWhvqaN\ngzvL0BlUXLVgGCr1KKqyjrNjfSE1/hBWrcgjLfII4xdNQ6VvXwN96aUXyM7O4uabF3HTgoUAOGfX\nU/DhUiKPlcL769i0YzvG+fMZP6g9fOCK45/gFwL8KHU+GvnFEb959dZSKhtO568NClDZYGf11tIz\nqp0/Lf2KanvN6XIEqbbX8GnpV0zLsuGtrDh9cDCIt7KCpjWrOtTO3weZwUDIpCmETJqC2Wxg4PY6\nDtYf5khT9+IvtUxNmNZAfWMLa/eUYXf5sDlP/fNSZ21PIZikVtHkdPLnwyfwn3S1kAKJejWpIToG\nheqIVt8OEqk4yhW5rDiVWOEU30ys0NtqZzG85AXkYgj15vMGWPXeQVqbXVy3KJO4pNMZcIKBAEc/\n301Wrh2PTIM64GTM8FBckTLmzbuK2Nh+fP31LozGzqOg5ryjVP7rXdT1LXjlEnKHRxCYNJpdjYcY\nbs7g3ozbvvW+zkfbeHwBnvnH3m7XfMONav5477hup569AS9/2Pu3btd8I+Uh3LrW2v2ab3gESb9/\n/qynns/EqfYRBAGHz0mzp5UWTwstnlZa3K00e1oZEJJE0VEj24/UdimvkEsxaBXEmLTccu1g3iqs\nQiOTMTBES2qIjhSjBvUlKpq6GPrVxYrYNqcRw0uKXFCO7tmIzyOQOWZgJ8MLIJXJGD5/Cmkz7exe\nsY3CZjWbDrXy9vJHCAaDvP760i6GFyAsfRihf3iJ+q0bsP5nDSMONtJcsIHcOdHcnDrvfFXtW7mY\n1M7fF4lEgl6pQ6/UEW/oml0qI9TLoIQwtCo5Bq0Sg1aBQatApZB1Stv4m5EDkJ48n4hIX0BUO4tc\nMNqacjAb9zNjCth9An5fInJFV7Wq2qhn5v3XklFYwZIHH6aptYFJo2+g7ZAVx8AWdBGhXcpIpFKi\nZ15FeOYYTjz9JKH2AD9OuoZQ1cWzVngxqp3PNUadkglDor/1OJlodEX6GBda7Swu4PRRAj4HbbUb\nOj7rFQcpPvAaZkWKpAAAIABJREFUFQXZPZY5VHqMnUe3MjAxhbnjb6DUbuDfb+/jwEdbCPi7d0i3\nfPof8AcIv3ouQ9MmnfN6/BBOqZ2742zUzt3RrnYe2e2+76J2FhER6V1OqZ2743yonWXPPvvss716\nBcDp7N7Voa+j06kuSNsIgoClfA0+Vx2h/Wajj76OumoLOnU9En8hlSUFyNUxaHSn1ysaGhr48Y9v\nJBAIsPo/XzBz7jgCFaXUt0mobpVTuDMXvcxDWPzpGMK2Qwex/Gc1qoREYu5Z0q3fcE+cr7ZJTwrD\n5fHTavfg9gYIN6qYlBHDwpkpSM8wGkwLS8Hl99DmseEOeDCpwhgXM5obU65Fnz6UoNuFv7WVoNuN\nPDwc46TJ7bGdv0MbnIkL9excCoht0zNi23QmLikMr8eP0+7F5w2gN6oYlBHNxJkDzskSjE7X88u2\nOPLtgzgs2bhaC1HpkzCYx6PVhzB04mK0Ubdhc4Rj1NXRVvkOuXs+weNyIggCjz/+EE1NTfzmN8+R\nljYYuUrJxNtns+gnw0lQt2GTGli/3cpnf/uU5opa/C3N1P/zPSQKBdH3LEEiv7hXOL5vYHVBEBAQ\nui0ntJ/wvAZrFxER+e5ciMQKotr5AnIhlIc+j5W640tBIiMmbUkXf81gMEhZ3l789p2oVW48HhWf\nbmnlhVdeZ+rUGXz88X+QdjN6qziQz65NRbRIjEiDfpL9ZcRX7CJq8S2EzZz1ne/zfLXNik2F3QbZ\nmDU67oyuRqsKP+s2yMb0uMldEiucInTW7B/kavRNRNVqz4ht0zNi23Rm56aiboNsZIzud05cjc6k\ndhZHvn2IgCDwu6MW3vQuQGae0W2gBKlUSvLQiSSNeBS7dxg1dfW89uZbGPQafvurp7o1vAAJYwaz\n8MlrGZ8qRUqQYmUKLYOnEjrjit6u1vfmYkisICIicmG40IkVROPbh9hac9oF5q0qPV8VZuH1d7/+\no1SpGTjyWn7/2j7cHj9PPzaLEMkmju1ajr21q8oX2l2TkqaOQlCoUMlhyO3zL2rXlbNxNeq23A90\nNRIREbnwnI2rUW8iGt8+QqXdzdc1VowKGVeYPCgIsL3VwEuH88muKiAYDHYp89JLL5BzLIebb17E\n7GuewuXWY9SeoL7wTY4f/Aq/39fp+EAgyKbP8wkEBKZfNwSDOazLOS8mTrkadcfZuBp1R7urUddY\ny3BhXI1ERES655SrUXeIrkYi5wRvIMjHpXUIwM3J0VwxYCg/z0xmtK4Vu6BmVa2Ut49kUdNS11Hm\nwIF9vPzyX4mPT+DPf/4r8QOHMXDco7iC40EArWw/xftfo6LwcEeZgzvLaKq3k5YRTfKg7l14LiZE\nVyMRkb7LhXY1Eo1vH2BdZSMWj49JUaEMMLZHbNIqtdyYPpoHB4aQIG+hwh/CG0WtfJJ3gMbmRh56\n6D4EQeDvf3+rI4qVTCZn0KgriU57kDZnChq1AxyfcWznPyg6VkT23goMIWomzUq5kNX9TiyYnkx8\npB7pydlxqQTiI88usUI/fSzSk11IipR++liuT76KiBtvRhmfAKfWx6VSlPEJ3yuxgoiISO8xfnoy\n4ZE6Tq2OSSQQHnl+EiuIxvcy53B9C3trW4jWKLkyLrzL/tjQaO7LHMXNMUH0EjeHHKHc/OhPKSs7\nwUMPPcbEiZO7lNEZQxk6aTGayFuwOUwYdbXI3R8RFdnEFdcNRnkBc/R+V04lVgie1Px/M7HCmTiV\nWCFI+3T9NxMrNK1Z1Z5Y4dRU/jcSK4iIiFw8nEqscMrn55uJFXob0fhexnh8AV57L4uGbdW0lLXR\n7PJ1e5xUKmVE3CB+Nnww+pyvyFv/OeHJg9BdeQ3FjeU9nj8ybgCDJz5IUBKDTCaQNlRHTNyls6Yp\nqp1FRPouotpZpNdYs+3021vZsUZ+vWwf7+4uwdNDKMhmSzPL//oSSqWKn/z6SSyycN4t87L86AGs\nzu7Vve62AqRCLUpNDGmjruyVevQWotpZRKTvIqqdRXqFwsoWNh2sJCpMw4sPTmT40EgCbj87t5fz\ns2V7WZ9f2ymaiyAI/Pznj2CxWPjd737Pk/Nu5s5EBWapjXxPKK/m1rChKBvfNxTOfp8Na8UXSCRy\nwpNuQCK9tFLQiWpnEZG+i6h2FjnneHwB3l2XD8Bd1w7GZFTz6NyhPHf3WOLiQ3C1eFj5aT5PLj/A\nsZr2EdzKlSvYsOErpk6dwd13LwEgNTKJR0dkcnW4GxlBtrboeelwLkeq212TrOWfEQy4CO03G4W6\ne9XgxYyodhYR6btcaLXzWSljXnjhBQ4dOoTf72fJkiVkZGTw5JNPEggEMJvN/PWvf0Wp7N23BJGz\nZ822UhqaXVw5Jp6BcadHaPERen5/yygOljaxfGMhlho7Ly3PIsoc5OPnn0KvN/DKK693imIlk8qY\nkpzByFgHX5bkk+00sLJGyp76fUymjkjjAPQRoy9ENc8JC2e2K7OzCxux2jyYDCpGpJo7tvfEjSnX\nAnC0MZdmTwthqlCGmYdwY8q1SAe0H2PPzsJvtSI3mdCPGIn55kW9WhcREZHvxsSZ7Z31RGETDpsH\nnUFF/9SIju29ybeOfPfu3UtRURErV65k2bJl/OlPf+K1115j8eLFrFixgsTERFavXt3rNypydhRX\nt3ZMN98wtXu5/OjkCF65bwLXz05BrpLx+dLnsdnauGLRw5ijuyZkB9CpdSwYMpoHUozEyGxUBCLY\nI4whPHHeRR3F6mwREyuIiPRdLkRihW81vmPGjOHVV18FwGg04nK52LdvH1dc0R6zd8aMGezZs6d3\n71LkrNlbcRRZTAnNdhdf7avA4+1eXCWRSLh+VAKTI8ppOHGIiKTh+A1jeeyNXazNruzxIYwOiUai\nap+qGRc3AJmi58DhlwIrtxSz6WAVVlu7uMJq87LpYBUrtxSfsdya4rVsrdpJs7d92r7Z28LWqp2s\nKV5L46qPaNm0sUN4FbBaadm0kcZVH/VuZURERL4Tu7eUkHOwGsfJ/u+weck5WM3uLSW9fu1vNb4y\nmQyttj0ww+rVq5k6dSoul6tjmjk8PJzGxu7dNUTOL76gnz2uz1HEFyEbso21JZt46p2t7DhSQzDY\n1ZjW1tbw+2efRq838OEH79A/NRyvy88n64v42bK9HC6zdCmzpcZCjdPDqAgjw6L6nY9q9Rqiq5GI\nSN/lQrsanXU0hE2bNrF69WreffddrrzytEvJ2QzTw8K0yOWXlhL2fHGmlFPflfVF2zr+VmkCEF+E\nN1jChwU5bMgbzJI5UxkxKLLjmMcee462tlaWLl3KnKkjmTMV9pU08sZ/j2KtsfPaR0dIHmDiFzeP\nIN6sp8hqZ1ttMxEaJXeO7I+6l7/Tc9k23VHb5MBq69nVSKZUYI7QddlXZ2/83q5GRpkfjfnciNN6\nu30uZcS26RmxbdqxNjmw99D/7TYPaqUCUzf9/1xxVsZ3x44dvPXWWyxbtgyDwYBWq8XtdqNWq6mv\nrycyMvKM5ZubnefkZi83zmVuTV/Axye5X6KQKvj9xF+ikMrZW3uIryt2YYmowUoNz+88QNSOdO4Y\nPwNvSz0fffQRGRmZzJ+/qOM+ko1qXrhtDOtya1i74wSlJVYe+r/NDB8ahSOqXal7U2IktmYnvZkV\n9HzkHQ34ApgMKizd+PqFGdQEvL5u7yEQkBKmCsXq6Zrdqd3VCAKWrrMG8jATbQE59nNQLzEva8+I\nbdMzYtucxucLoDeouvX11RtUuHvo/9+FH5TP12az8cILL7B06VJCQ9uVsxMnTmT9+vUAbNiwgSlT\npvygGxT54eyq3U+Lp5WpcRMwKg1o5BpmxE/m2YlP8PDwe0gxpCLV2Wg07OWvh1/kriceQBAEnnji\nV10EU1KJhLlD+/HSvRMYPykBqUpGdk49xTuqmWQOIdGguUC1PLeIrkYiIn2Xi97VaN26dTQ3N/PT\nn/60Y9tf/vIXnnnmGVauXElsbCzz58/v1ZsUOTO+gI8NZV+jlCqYnTC90z6pRMpgUyqDTalYXFbW\n5H7N9pxNFO07RGj/CPaoSomtz2do5CCkks7vYhq5jPumpDAiNoQ3V+WglEmZFXfp+fOeiQXTkymo\naKG6sT2+s1QC/cxnl1ihqKWUWnsdQYJIkRKjj+b65KuQJ4GzoABvdVV7fGepFGW/ODGxgojIRcb4\n6cnUVLRgbWyP7yyRgMl8fhIrfKvxXbhwIQsXLuyy/b333uuVGxL57uw9thF9ZROjx8zCoNT3eFy4\nxsS9o29i9xv/AQGGXjeNJqGCpbnvYcgPZXb/yUyIHYNWcXpk6/MH+O9J5d+j1w9FKb+84rKcSqxw\nim8mVlg8K7XHcqcSK3SU+0ZihWlZtvbECh07TydWiFx0S6/UQ0RE5LtzKrHCKb6ZWGHyrIG9eu3L\n65e0DyIEg0T9/WMWbG7BvOwzNq1+lTprVY/H5+fnsfaLzxg+fAQf/uJtxshuJGjpR5u/jTUlX/Cr\nnX9kxfFPqLbXAvDfnSeotTi5YmQcaYlh56ta5wVR7Swi0ne5ZNTOIhcnjqNHOv6ObPIi+Sqbxk2H\nyR0UiXnGHIZmTu80nfzyyy8A8MQTv0KrVnDntPHMaxvOx9vzyLJkEYysYFfNPnbV7KOfJp4ThSbC\nQ5K46TxMw5xvziaxQmSYtmu5H5hYQfktAkUREZHe52wSK4SE9Z6+RTS+lzCCIGBd9zkAic89j6BU\nULxxDcF9WcTn1kPuP9kXvhLGjiB91k1YLK189tl/ycjIZNasOR3nMRnV3D93JOV1A/loSwFFbcXI\no8qpphJlSiWzYtJQKy+/R+VUYoWe1M7flljh+6idxcQKIiIXB6cSK/SkdhYTK4j0iKvgOO7SUnTD\nR6Dq1w+1OZKhi+9n2Mtvobr3DlpSogmzegj/ci9VTz7JM0tuJRgM8sgjP+02JGRitIEnfzyKh2fN\nwtQ0GcGrQirIGJ/c89rnpYyodhYR6btc9GpnkYsX67ovADBdM7fTdolUSuK4GSSOm4G9qZb89atp\n3raXrUfzidPpid65nuxgC2mzbkJj7JwaTyKRMDwlghZVAauKPEyPm0KI6vJ1yhcTK4iI9F0uZGIF\n0fheoqz9cB8V3jHED0wkLjKux+P0ETGMueURfnO8Gr8gMG/iKELavMjW7eDE+p3Y0xJImDWXqKGj\nO0bDvoCPjRVbUUoVXJk043xV6YIiJlYQEem7XIjECrJnn3322d6+iNPp7e1LXJLodKrv1TZul49t\nG0sBaENHzoFKbFY7pkgjao2iy/FWq4WHHlpCRISZ5Wu3Ips4hvKgFaGpidCqZjz7DlC5cwMtdiuh\n/RLZZTlMVsMRZsRPIdM89AfX8/vwfdvmu/LR5iI2HazCdTIBhcsboLSmDZfHT0ZyeI/lPin6gq1V\nO3EH3AC4A27K2ipw+T2YN2fRsmkjgssFgOBy4S4tJeh2oRs67Jzc9/lqn0sRsW16RmybzuzaXEzO\nwWp8J/u/zxugocaG1+Mn4Qz9/2zR6XpeZhLXfC9BDu4qAyBdbyHNuh+V18bxPAsrlu7lyw920Vjb\n1un4v//9FZxOBw888DBKpRJzZAJTbnmczBfewHbXDVSmmFC1upCt20LxL36K+/0VmFwSZiVMuwC1\nO3+IrkYiIn0X0dVI5DvRbHGSm1WDMVTN5HtuAJ+H1r17KNiVS3EghrJaE2UfZBGt8zFqxiACOj//\n+MebxMcncOed93Q6l1KuZNTE62Hi9ZTVFlC4+b+YDhSSXOZAH590xoAdlwOiq5GISN/lQrsaiSPf\nS4iA30npkU8RhCATZgxAJpci02gwzZjJhGceYsHtI5gYXk+op4E6h4K1X5Sy5Lb78Hq9PP2r36BW\nq3s8d1LMIGbf8iThplgEiYSRVy4+jzW7MJxyNeqOs3E16o52VyNTt/tEVyMRkYuHU65G3SG6Gol0\nIAgC1TkvYg4rYs4Ve4jt5+5yjKZ/fzLvXcjCp+Yxe5iEtqo9HC7cT1zMIOz5Kg69/znu+voer+HM\nPYavshLDqDFoYy7tXL1ng+hqJCLSdxFdjUTOClvDno6/ZTI/DUXvoQ8fRWjsTKTyzlMjUrWa5Kum\nsPmV3wJw55xbcMqN7K+TcvTt/aSorAydmkbo6FFI5KcfgdOuS9eehxpdHIiuRiIifRfR1UjkjHgc\nVbTUbAGJjgPZY/F5rGSkFwGHsFvzMMVfic40rFPgjNWrV3L4cDY33riAR1/4Ka2NbRz88jDFNVqO\nBQ0UbLKS+PlbpGeYMU+fSsBux1VYgHboMNQJiReushcI0dVIRKTvIroa9THORvYf9LtpKPkQIeAi\nMmURGWOHoQ8J59ixUFpbA5hCLXhsx2lrLEZjjEOm0FFZWcEddyxGKpXw/vsrCAkJQa1TkZyZSPqI\nOHA5aLR6aVJGUWxV0rR1B8KeTci8LqLuvAtF+IVPGyi6Gp0Z0WWkZ8S26RmxbTojuhqJdIsgCBSc\n2ETA24IxegpqQ38kEgn9U83ccNtoho6fS0HZFdQ3mCBQQ03eUoqy/8OSJXfR2trC88+/QHx8Qqdz\nanVKJl47jNsfm8q4KYko1ErKwzLYFTkHyaBhaFMHXaDann9EVyMRkb7LhXY1Eo3vRcz/yyliecsg\nPgzMR2Ka0GmfRCKhX2IYVy2YQFLmHVTWT8DjUbLs3Tc4eHA/M6dNY9HCW3s8t1IlZ+Sk/iy4ezwS\nCci1GhLuv7+3q3RRcTauRt2W+4GuRiIiIhees3E16k1E43uRUtDioMbTvoZrFzS8fLSUPVVl3a5J\nmKMNTLpqNkVNg3n/4/30iw7ht48N48i2tzm6Lx+vx9/jdbL2lCMIMHZKMipDV5/WyxnR1UhEpO8i\nuhqJdKHZ4+Pj0jrkEgn3p0Ywy1CLAHxe6+OtI0docNi6lGloaOCpX/0MuVzOa6/9A4UyDnN4I3rp\nJ2z//GP2by/B9T9rPZZGO/lHagkL15I+IuY81e7iQXQ1EhHpu1xoVyPR+F5k+IJBVhTX4goEuS7R\nTEJIGDPTpvJQipb+skYqfTr+nlfNppJc/MEgAIFAgAceuIfGxgaeeeY5pky/ipQx92OIvhapTEHq\ngGK0/Jcv/rWenRuLsLW6EQSBPVtKEASYMHMAUmnffBQWTE8mPlKP9KRQXCqB+Eg9C6Ynn7Hc9clX\n0U8fi/RkF5IipZ8+luuTryLixptRxifAqTaVSlHGJxBx4829WRUREZHvyPjpyYRH6jjlKCKRQHik\njvHf0v/PBaLa+QLSnfLw8/IGjrc6GRVh5IpYU4f7kE4TyoioGAzecspcEopcKnIbKolVw5uvvMLH\nH69gzpyref75F5BIJEgkEjSGWAzmkfi9TmRCJXGxdbRam9ix2UZNpYPKE83E9w9jzOSkbvP7XkjO\nlypz5ZZiDhc1cWoyXwDaHF7c3sAZ1c5riteS05SLcLKkgIDNa8MT8BK5JRvH4Ww4tUQgCATaWgl6\n3KLa+Twgtk3PiG3Tmd1bSigrsnTa5nL48HkDotq5L/HR7lI++ygXQ1DCvERzF4MolcoZlzyax4b0\nI13VRENAz69XrOWVV14kITGJ119f2qWMTK7F3H8eUQPvRK6OJCGujmmTDuBzFCCRwIQZAy46w3u+\nENXOIiJ9F1HtLAJAs83Dhu1lABR9XcFL6/No9fi6PdaoNXHrsAlMC1aw7W+/RaZUMe0Xv6HW2dDj\n+VX6BGLS7sUQOQGFwsfIEVVcvSCD8MjLO3nCmRDVziIifRdR7SxCMCiw7Is8AKIjtMgUUgqONPDU\nsr18mVfTrcLZ7Xbzwq+fxWO3s/inj6JKzuSfVRL+fXQPdldzj9fy2CsACI+fTuKAHz6tcikjqp1F\nRPouotpZhLV7ysgvb2Z4SgTP3z2OF++fwMAUE16bj1WfHefplVlUtzo7lXn66afIyTnCLbfczt9+\n8RvuSdYTLnWQ44ng1WOVHCo7hCAEO5Vprfkar7MabdhQdKbh57GGFyei2llEpO9yodXOouDqAqLT\nqThc0MA7a/MJM6j42cLhqBQy1Eo5U9KjiYs1kFvRTHODk21HamgWAmTEhfLZp2t4/vlnGTIkg3ff\n/RCFQkGY1sCYqEiC7npK3QrynBoqGo6ToAGtOgRXWzHNVeuQq0yYkxchlV7cYb3PlzAkPSkMl8dP\nq92D2xsg3KhiUkYMC2emID3DWnhaWAouv4c2jw13wINJFca4mNHcmHIt+vShBN0u/K2tBN1u5OHh\nGCdNxnzzIiTnSFUuCmd6RmybnhHbpjNxSWF4PX6cdi8+bwC9UcWgjGgmzjw3WpgzCa4u7l/gy5w2\nh5e3PjsGwJJ5Q9BrFJ32j0qOYNiSCXywvYQ9B6vZtqOcbTsOs2XpI2i1OpYtex+N5nRGI4VMylUp\nQ8i0tfJJSRnFviheL2pjumEbyd6DIJESkXQjUpk4+vpfxMQKIiJ9FzGxQh/jgfVP4DcfR69WcWX6\nMLRqRZdjZFIpI/uHMzzNTE5VExve/hX25jquvOOX/Gje1SjlXUdSBpWa0VFRqAJtlDiCFHpD8AYF\nMuKGoQ0dfD6q9oMREyucGXEE0zNi2/SM2DadERMr9EFymvIQaF+TdYfn8tudL/Kv3bsIBIPdHp8Y\nrkdbtpbW+mLiM2YiMY7iZ2/tZtOxmm6Pl0okTEnoT7qpXRik1sdhMI/tncpcooiuRiIifRfR1agP\n0ua18WH+KuRSOY8Mv48Bqgwkaju73Z/yi7V/J6usvEuZjRu/4q23XmfAgBQ+X/kuKWkR+Nx+Vnxx\nnKc/PEhts7NLmYONrRyx2umnVXFtamaf9eftCdHVSESk7yK6GvUxBEHgX/mrsfscLB52PWmmFH42\n6TYeHvYgukAkXl01y4rf5PmNK7DaHUB73ObHHnsQpVLJ22+/T2yEiV/PH8aShZloTWpqq9p4Ztk+\nlm8rxh9oHzlXO9x8Vt6IRiZlcUoMij4aPvJMiK5GIiJ9F9HVqI+xq2Yfxyz5pIalcE3qzI7tg81J\n/N+snzMn6vr/396dB1RV5o8ff9/9su+ggKCICgpuueGSu6W2qqW5TYuVOZZNY+W0zDSVpmX91Eor\nLWe+mmmplaVlammpuKLigiISCsi+L3fhLr8/UIoBskzuFfm8/vLcc8695/kI98Nzzud5HpQ2LRdV\nR3lx9wLWHNzJk0/+lfz8fF588d/Exv7yzLB3az/eeqg3veJCUSgV/BB/gb9/EM/h1HzWnMvCYrdz\nb0QLfHR1nyULGWokRHPm7KFGknwdKLcynw1nv8JF7cLU6HtRKmqHX6FQcEenfiwY9A8i1d2xq838\n38Y32L59K1179ebhhx+r855alYrpA9vzj/t74B/mSVmJiXc/TeRCUgGDg33p4O3mqOY1SbKwghDN\nV98hbYntEYKHpw6FAjw8dcT2CKHvkLaN/tlS7exA5xfMpfePmRS7KTH6exLVoi1GQ921drUqDXHh\nMWhzdbz3wkLUeg1dZw/gdF4BnYLa4qKp23vyddUyJKYl58sM5ORU4K5V8ejN7Zrsc15ZWOG3SdVq\nwyQ2DZPY1KZQKAiL8CO6azB9B0YS1bUlbdr5X7PvTal2vg6Y83JRp2UCMHRvEe5vf8zid2ZzIrf+\nqtmqqire+OcLWM1VPPTU07h7BJFhP8mLuxfwyZHt2Ox1q6LziwycOZ2PTqNi9p2xvzlJhJBqZyFE\nNY1Gha+/W6Pfav41Sb4OkvfJxwD43T0W175x+JbZiPs+g7IFb7Fh/QJyynNqHb948ZscPXqEe++9\nj5cff4YFg+cQQW/sCiu7i75j9rYFJGSeqTm+ymLjvS9PYjJbmXprB1r6ye3mK5FqZyGEs8gMVw5Q\nfvQIFYnHcImKxnfUbSgUCsy3303elg3Ydu/H79skUuOf58TgnvQdMYXszGwWL36TFi1aMm/e6wC4\n6XX8fchYTl/sy4cJn1PpmsaHZz7k25T2PNJzLNv25nM+p4z+sS2J69TCyS1uGi5XOxfUk4B/T7Vz\noanuAhbV1c5gLSios0+qnYUQl0nPt5HZTCZy134MKhWBE6fUPEvQBgTSdfYztHl1AVXdO+FTaqHV\nF/EcfW4Wjz86BZPJxMsvz8PTs/aXdVRwS14f/RjDvSZApReZ1mT+tfd1vk//iZZ+rkwa3t4ZzWyS\npNpZCOEs0vNtZPGrd6Cs1BE5/BZ0wcF19uuCgug042kqsjJI+vRDTmzbw4Gjx+nSMojOfm7YbbY6\nk/ErFAruuqk7Qyo7sXT3V6SrD6AJO8PDncag0zrumcWNYPyQSACOJOdRWGbC10NHt/YBNa83ZEzk\naAAS805SZCrGR+dN54BOjIkcjfJSoWT5kQQshYWofX1x79adgHsmNGpbhBBNh/R8G1FWejGJea4c\nDR7OwXwfivNKGzzWrWUoHR9+mnfTz6NSKvl7dCyW/67l2PNPkndgT70Tfnu66ggOrS4K6hvQj9Yt\n6p/4QVyZLKwghHAk6fk2EqvVxq6tyTXb54s1XFhxiLZB0OfuXnj4uNc5Z8mSN7mYlcXMmU/S+t5R\npH2xlvCUYoo+WE7Opo2EjbkPj2431dy6TshNZH/2YcI8QrkvZrTD2nYjWfd9CtsPZdRsF5aZa7Yn\nDmv4Fv7GlM3szNhds11kLq7ZHphQRvH2bTX7rIWFNduBEyZd0+sXQjRN0vNtJEf3p1OUX0nHri2Z\nNqMbvYNK0FsqSMlV8sl7+9j13++pLP1lPuazZ5N5553FBAeH8NRTzxAV1Yehz7xJ7l/HkdLaFU12\nAdlL3yH5X3MoP3qEImMxa09vRKPUcH/HCaiUcrv5j5KhRkIIZ5GebyMoLqzk8J40XN219BkUgUav\nofsDdxJTXMKRDbs4maXmVJYryf/6hk7harrd2Ye///0JzGYzc+e+jrt7da9YpVQxoNttlHUaxLYD\nn6H5YR/tz+dw8Z3FlAS44dFNy8C+9xLkFujkFjdNv2eoUaCPa93z/uRQI22g/H8J0dxJz/cas5jL\nuXB8FQqhDpKVAAAgAElEQVSFmf7D2qH71Rq9Wm8vej90BxMf60usbxnY7RxLV/K3h//Jvn17GXnr\naEaPvr3Oe3po3RnT/wG6zHqRneNjON9Ci1deBcNP2RkQ0seRzbuhyMIKQghnkeR7Ddntdi6efAtv\nzxxuGRpPi6Dceott9H7e9H/kdmbOGUSQMp0tP61Gp3Wle8gojm7Yia2qqt73D/MM5eGhTxHsFgRA\nxMixTXb6yOuBDDUSQjiLJN9rqDz/YM2/bTYFBWkbyEz6P6pM9d+G9Gzhz5bk7RjNlUwYNgGdZzDx\nZ2HNgi2c+rL+JFyRcBjNuXRcO8UQ0Kt/o7WluZCFFYQQziDJ9xoxV2ZRlLkNpdoVjd80TqcOIi/f\nB5vpPJknl5Lz83bsttqLKGzatIlNmz6nZ8/eLPjoLe6dFEOYWyVlKk92JcG6BZs4u3kndkv1eTaj\nkbx1n6BQqwmcOFl6vdfA+p2ppOeWY7t0g8Jmh/TcctbvTP3N875M/ZbM8ovYqJ5j24aNzPKLfJn6\nLfkbP8OcfgFsl+bfttkwp18gf+NnjdkUIUQTIsn3GrBZTeSnbQC7Fb/wu2gZFswt4/oTEDGRs2nd\nMJvUmIr3cu7w2xTlVM/HnJ2dxUMPPYRWq+XNN5egVCrxDQti9OOjGHtvB1q6GChW+7H9OGx4bQNp\nW3dR8OXnWIoK8bl1JNogmULyz5JqZyGEs0jy/ZMqqiy8kHCBvZUheATG4eJZPTOSQqEgrK0fQ+66\nDZX3ZC7mhKFRlVF2cR0n967k0UfvJz8/n3//ey5RUdG13jOwbTB3zRrJ7XdG4q8zkqcJ4psEG3uO\nlaP088d35G3OaOoNRxZWEEI4iyTfP8Fqt/Of0z8DkGCPYYexIyZr7aX+FAoFbaND6TViKgblXZSW\nebJ2wzri4+O5uW9vJk96oMH3D40OZdyTtzB8RDgoIMuzHV73TJGinWtEqp2FEM4iyfcq2e12vr6Q\nR6YRvBSV+FFEQmElS46ncL7MUOd4pVJJVNfOFNGN5R/vo0WAJ//6Ww/OHljKqYSjWK111+eF6uRd\nbFAACjp1CyagR5dGblnzIdXOQghnkUk2rlJ8bgn7c0to4aLlkQ7hVObFsyMrmyNVUXxwOp2BQa4M\nbRWC6ldFUQUFBcx8/FEUCgXvLv0PLh45aBXnsNs3cfC7I/i2Gkq7Tq1qFVIVFVRyeO953Ny19B74\n2xW44o+ThRWEEM4gPd+rcLq4gs0X8nBXq5jaLhi9Rotv8EDu6tSPce5JuFHJzhwDyxJPUWCo7gVX\nVVXxyCMPkJV1kTlzXmDAwGHE3TIdz9AJWKweBLdIh/I1fP/5JtLO5l2a6N/Orm/PYLPa6T+8HTq9\n/K3UWGRhBSGEI8m3+R+UnFvG8j0puIa6M6VdMN66X2aw0uj96BZ1B+EFp9h0PpOz5hCWnEjj1iA1\nny1awk8/7eTWW0fz+ON/qznHO6A9Xn4R5J3/EVvRXtq1OUZe2nlOHemKt38IWekltGnnT0SH+m+P\nij9HFlYQQjiD9Hz/AFOVlfkfHaToTBFFx/IoqzDXOUahUODn34mpXfowyisHBTbmLlvF6tX/pVOn\nGJYtW4Hyf9fnVaoJbDOEkE4zUOlaE+BfTHTbXZTl7kWjVdF/RDtHNbFZkaFGQghnkeT7O9ntdlZu\nSarZrsw38tbqBD7cew6rre5tRZVaT//2/WmfdogDHy3G1S+APs+8QmpBMnZ7/cVVGp0vwdFT8Am9\nFZXSTvt26QwZ1QF3DynSaQwy1EgI4SySfH+nLfvOcyApl8hQL96fPZAR/Vtjt9rZ8+N5nv34IBeK\nKuqck5h4lOeefhYXvQtz3liA0j+UT3Lc2ZC4k8ryzAY+yU5l8SkA/MNGEBElK+A0FhlqJIRwlt+V\nfJOTkxk2bBirV68GICsriylTpjBx4kRmzZqF2Vz39uuN5FhKPht3peLjoeOvd8eiUauY0D+Cf97f\nAy9fFwozy3l55UHWHz5fU1yTk5PDlCkTMBgMLFu2gum3jeORdgF4q0wkmFuxLCmTw4lfY7Maa31W\nSfaPmMov4OIdjbv/Tc5obrMhQ42EEM5yxeRbWVnJK6+8QlxcXM1rS5YsYeLEiaxZs4bw8HDWr1/f\nqBfpTFkFFXzw1UnUaiWPj43Fy01bsy880IM3p/WhX89QbFU2tmw7x/NrE8gqLOXBByeTlXWR559/\niVGjqmekCvf2ZVaXjnTzUlCAD8szAtmauIXywhPY7XaMZT9Tmv0jKq0Xfq1ul7mbHUAWVhBCOMMV\nk69Wq2X58uUE/moB8P379zN06FAABg8eTHx8fONdoZMtif8Ek0sWA7sG07qFZ539SqWCh4a25+nJ\n3XHz0pGVVswdEx7k4MH9jBkzjscff7LW8TqVknvaRzIxIhCdSslPllhWp+aTdnYdBWmfA0r8W49F\nqdY7qIXNmyysIIRwhismX7VajV5fOxEYDAa02uoeoJ+fH3l59VeMNnUJuYmUuiaja5/ArvytfLDl\nCAaTpd5jo0O8efPhPlgL9nD+6Hd4BkYQePMjlBvrX5s3xs+Lfw/sTFt3DRfsIawq6URelRLv4MHo\n3EIbs1niEql2FkI4y58e5/t7JhDw8XFFra7/+dn1qtBQzLrdnwOgQIE6MJ2jls9I+vwkfx9xN906\n1F1VaNeuXWxfswhvXz/6TvwnGRcqeXr5Pmbe25XBsSH1fs6suI48v+skZWY92uDBRHTqi0IhdXAA\nAQEejfr+WfkVFJY1XO2s0moI8Hersy+7PO+qq509VRZcAvyv/qJ/pbHj05RJbBomsWmYI2NzVcnX\n1dUVo9GIXq8nJyen1i3p+hQVVV7VxTmLzW5j6bGVlJsrGN/+LvoF9+aH9D18de47zIGJzN2bSqfD\nA5g2cAB6bXUIs7IuMnbsWAD+u3I1nbv3Zsm3pziblM9b/znEt9Hn+evIaFy0v4Tc18+ddw+cpcxs\noXegF9FBkeTn162abo4CAjzIyytr1M+wVlnx9dBRUM9wIx8PPVZzVb3XYLUq8dF5U2gqqrOvutoZ\nrAUFdfapfXwptaopvwbtckR8miqJTcMkNg1rjNj8VjK/qi5W37592bp1KwDfffcdAwYMuLoru079\nmBFPUmEyHf06MCAkDpVSxbDwm3m1/xw6e3dF6VJOkuobnvnmHQ6lnsdms/HEE49RUFDAyy/PIy6u\nH246Nf+4szOT7u6Ixk3NqaQ8Zr8fz7G0X76UPzudwZmSStp7uXJbWIAUWDmYVDsLIZxFYb/CfeMT\nJ06wYMECMjMzUavVBAUFsXDhQubMmYPJZCI4OJjXXnsNjUbT4Hs0pb+0LpZn8/qhJehUOp7r9RRe\nurp/uZwrOs+KI59RSi52q5KCrQX88H/rGDZsBB9//FmdJFpQaWLRllNkplT3lHp2aUFslxZsySwg\n0EXL9KhQ9E3stnxjc9Rf6FabjXXfp9S7sIJK2fDfplablY0pm+tfWMEOeZ+trXdhBYXq2vw/Sw+m\nYRKbhklsGubonu8VbzvHxMSwatWqOq+vXLnyz13VdWrX1pW4qo3c3GVYvYkXoK1POHMHP8XXSXv5\nLP5jdn2yHp2HC3c+Pq3e4/1cdbw8tiufJ2byzc5UDh7L5khKPmFxwfylXbAk3uuALKwghHAk1Usv\nvfRSY39IZWXTmITD+HMqbh9tpGuygdTcZE5oiwjzi0CvrnurUKFQ0NoziLdnv0ZeTi69Hx9GUWAR\n8WlJRPqG46X3qHN8dAtPIsO92JuYhc1sY/qIaELcZUhRfdzcdA75uVm74yzbD2VgMFdXNhvMVlIv\nlmIwWYiN8GvwvA1nv2Znxm6MlyZJMVqNpJVewGAxEbAjgeLt27BfWtHKbjBgTE3FZjTgFtP5mly3\no+LTFElsGiaxaVhjxMbNreHHTFJWe4ndZiP3k9U12zedNtB5+Q62vvsc3yd9i8VWd4jR/Pmvcjrp\nFFOm3M+csfNQlQdRRCYLDi3io6Prqawy1DreYrXxxY5zYIe7BrShb7ugRm+XaJgMNRJCOIsk30tK\n9/yEMTUVj569iFy2HP+Jk1C6udH1VBlBi9ay+Z1nOXX+SM3xx44dYenSJbRpE8G//z2PPpGRLLjl\nCdpbhmMzuXC48ADP/fQaP2bsw2a3YbfbWf1dMikZJfSKDuT2vq2d11gByMIKQgjnkfV8AWt5OXkb\nPkOh0+N/730oNRp8hwzHe8BA8nZuJ2/zJqITCzCfWsK2LqHE3P0gzz77FHa7nYULF+Pu7g6Ai07D\nrBHDSUztwocHNmP2S2Zd8kZ2XYgnSt2fH4+VERbkzgOjoqWy+TpweWGFhoYaXWlhhasZaiQLKwgh\nQHq+AOR/vh5beTl+d9yJxsen5nWlRkvQ8FF0fGMJ2rtvw6ZVE344nf/+5QESEg5z++jbGTBgYJ33\n6xwRyGt3TaGzeRyW/GCyjVnsLP8Mt9BMHh/TucEhLMKxZKiREMJZmn3yTfgukY2Zrcls1QfvIcPq\nPUap0dJ69Dg6vfEOOQN7sPzkCVxUaqbYrCSuehdLed3ydFe9mumjb2J6t0koyqu/4Pt3DsLPSwqs\nrieysIIQwhmadfKtMlvZn1D9fO60LopPFn9PyqFzDQ4NUel0fHH0LGVmM+NvH4a3hyv6XQc58/Qs\nUtf9B2tF3dmpqjzSsbvn0cqtFeNihjZqe8QfJwsrCCGcoVkn34O7fwYgPEhFiOUipVVatm1P59O3\nvuXC8Z/rHJ+QcIjVq/9DVFQ0c9/9mJC5c0np35YqlR3Ltp0kPz2LixvXYa2sTsIFhiI+Tf4CnUrL\nQ7ETUSnldvP1RKqdhRDO0mwLrvKyy0g8mIGnt54Rk3uiUinI2HWAA3sukEsgmzefJ2jbKfqOiqVF\nVBhVVVU89dQT2O125s9/E41GQ4BXS0bd/yJJt5zgyFer6XAsh/It31C6Ywe+w2/h06AsDBYjk6Lu\nIcC14TGjwjl+T7VzoI9r3fP+ZLWz9gpzoQshbnzNMvlarVXs+jYJux0G3toB9aXCmlaD+xA6sBc/\n79jPwQNZ5Jh9+fyLVEL1iZwsPsSpUyeYNGkqffv2r/V+0S1jaD9tLj+m7iTxu6/ofLKE4q+/4maN\nAu/xvYhr2cMZzRRXINXOQghnaXa3ne02C5mJr9Gry7fc1MtMSLh3rf0KpZKI4XHcM+dOhnTR4Gkt\nITG7jCXvv4OnmyezHphR7/uqlCoGRw7lrmmvcOrh4Rh0CvRVdkaFDpJhRdcpqXYWQjhLs+v5FmV+\nV/PvFj77yDtXgG/YaNRaz1rHKVUqOozsR+RwC6OHDsFiNXPLoFls/foikT+epdfdffAIqTtDlafW\ng1FFQeSa7Oh69cA3MrrR2ySu3vghkQD1LqzwW8ZEjgaof2GFttXH1LewghBCQDPr+VYUJlKefwiL\n3Ye9B3qSX+CNsewsmSffpTT3UL1Vzus3fEpC0lGGDhnOg7cNREsVyeVerP3PMXYt/ZzK7NoFO5bS\nUvI/34DSxYWQ8ZMd1TTxJ8nCCkIIR2o2CyuYDTnkp65DodQQEv0X2sVGcSHDnwtpZny9C6mqSKYk\nNwVXrzBUmuoim4yMdB54YBJKpYpPPllPVJ/OxPQMh9xMcoss5JjdSTp0AeOp4wSEB6B2cyX341UY\nU8/hf8943KLrvzV5mUxy3jBZWOG3yc9OwyQ2DZPYNMzRCys0i9vONquR/J8/w2634N96DBq9Hxqg\n/7D2lJWEcWRvEnrFXloEXeTiqfdQu/fBP7wfDz00haKiIt54YxGtWoUBoNFr6X3vzXSpNHHw830k\nXdBwrNiF5Pfi6ehThtfR3ehbtcJ70BDnNlpc0ZWGGo0d2Lbe575XGmrU/Uj91c7lR47gf/c4ee4r\nhLjxbzvb7XZeSEjnnYpb0Pj1xdU7qtZ+Dy89N4/sRmSP+0nP6Y25SoWtci+PP3IbR44kcO+99zF1\n6gN13lfvqmPApIFM/ms/2gcrMKrdOFweTLJ/bwInTb1mi6aLxiMLKwghnOWGT74/Zf8yHOTDnCCO\nZJyu9zhffzf63XoLnqEPsfbLLL789iCRbQKYdHs/igvrTh95maunC0OnDiS6azAAPl1jcIlsd20b\nIRrF5aFG9fk9Q43qUz3UyLfefTLUSAhx2Q2dfM+VVrI1owA3tZKb3CswouGzLBUrjx2kuLL+HkhB\nSS7vrtyIu7s7c5+9l5DANLKS3mffjt2Ul9XfE8rNKiUpMRsvHxf6jO3bmE0S15AMNRJCOMsNm3xL\nzBbWnstGoYDJkcGMje7KjHY+tFSVcNbszeKTGexNO4Ht8vy7QGlpCQ8+OBmDwcDSpSu4+Y6XsKpi\ncXM1EOz7PUd2rmLfD6cxGqpqzrFabez85sylCTva10zYIZoGWVhBCOEMN2TytdrsfHIuiwqLlZGh\n/oR7uAAQ7B3EjK7dGeFbiQ0FX+fp+OBYAnllBdhsNmbOnM7PP6fyxBNPceuto1CpdbTpfDeB7e7H\nhjfhoRfx0X3B1k+/5vCeNKrMFhIPZlCQW0FUbAtCwn2ucGXieiMLKwghnOGGTL6rDqfxc0EFsb7u\n9A2q/WxOpVQyqG0XHo9uQbi6mAsWL94+ncvf/v0s3367mQEDBjJnzgu1znHxCCO8ywzcAweg11vo\n1vk45uJv+PTDnzi0Ow29q4a4IW0d2URxDcjCCkIIZ7nhku+ptEJ+3PEzebsvkp9ehslqq/c4f3df\nHu5yE3cEmsk6doC17y/Hw9+flxbMR62uOwJLoVTjGzKYltGPoNEHExKcR+/u+9Bpy+k/LBK9i6ax\nmyauMal2FkI4yw2VfMsqzXy4Oalm+8i+DGav3M++83UnuQdQKpWEa3346c2XUCgUDJrzBuuKVGw5\nc5gqi6Xec7QugQS2m4hCqUOrrWLobW1p17HuNJPi+ifVzkIIZ7lhkq/dbufDzUkUlZkYc3MErz7S\nm5bBHlQWGPlg3THmfXWcEmNVrXPMZjPTpv2FwoICXn3lNR4fGoMLZnaXerLk2HFS8y/U+zmFFzZh\nt5nwDOpPSEQHRzVRXGNS7SyEcJYbZoar7w6mk3iugE6tfRgVF45SoeDVKT3Yfvwi679PIeVkHs/8\nXMTtgyIYHRuCQqFg3ryXOXhwP3ffPZaHHnoUhUJB+4BKvko+yTGDNx/+bOCm3EOMioxBr9UDUJqz\nB0NJMjr3Nni1HOTcRos/TRZWEEI4ww2RfJMzClm/MwVPNy3Tbu+E8tISfgqFguGdQ4hrH8h7W09z\nKimPjVuS2XM8m1jXTJYuXULbtpG8+eaSmmX/XLWujI/pSZecVL5Mr+BQhRfJiWe4I9SdCDcFJVk/\noNJ44t96DArFDXPjoNmThRWEEI7U5JNvoaGIxcnz0faAkQGT8XLT1jnGXa9h9p2xJHYrZPmWJNJO\n/cz/rX4StUbLsvc+wt3do845UUERtPEz8c3Z4xws92B1uo1oZSoDlEqC2oxDpXFzRPNEI1v3fQrb\nD2XUbBeWmWu2Jw5r3+B5G1M2szNjd812kbm4ZntgQhnF27fV7LMWFtZsB06YdE2vXwjRNDXprpvF\nZuHDkx/XbG/KXc27+z7FZKm/SrVzmC8LH+hJ6u53qTKUETXgfj7aV0nihfqrU3VqHXdF9+DBNq4o\nsJFki8AaeCs6t9BGaY9wLBlqJIRwliadfDemfE1a6QVuCuxKL+0d2M2unKo8xDPfL2Df+fq/HBct\neoOfkxIYMmI0PW8bT3mRkUVrjrLwy+NU/E9B1mWnKnTYURLrpSUiuP5iGtH0yFAjIYSzNNnkezD7\nCLsy9hLs1oJJ0eP4S//+PN/7b3hXRlOlKmfVuf8yb+dKSozlNefs2vUDb731OmFh4bz/7jLmT+rB\n3aPao3FVcyopj6fe28u2xMxaz+iOFZQRn1tCoIuWsW1b1TwbFk2fDDUSQjhLk0y+F8uzWXN6PXqV\njmmxU9Cpqp/zhvh68ero+7k9YBIKoweZtiSe//F1Np/cT2ZmBtOnP4hareaDD1bi5eWNQqHg9s6h\nvP5IHJEd/akyWflkyxleWHWIrMIKcgwmNqbloFMqmRzZEq2qSYZLNECGGgkhnKXJZROb3caKE6sw\n26qYFH0PQa61vzwVCgUjO3fhtcFPE2a7CZvSxNeZnzJi3C0UFBTw6qsL6N69R61zvPQanrujM49M\n6Iyrn56si2W8sOIA/++bU5itNsa2CcJfX7eQSzR9srCCEMIZmlzytdismKxmALaf30VmeVa9x3m4\n6Hl22HimtXuUxJUJ5J1LJ6xfB4gKx2qrf8rJPuH+LHygNz3iqguqcpOLiFJoiPF1b5zGCKeThRWE\nEM7Q5JKvVqXhHz2fpGdQd86XpTP/4GK+Tt1Kla3+6SBTDx7k7I7DBIW34qYHB3LIsI2nv13E8fT0\neo/Xq1XEtfTBbrPj7aXnni6tGrM5womk2lkI4SxNLvkCuGvduL/TBGZ0eRAvrSffpO1g/oFFpJak\n1TouPf0Cs2fPwsPDky/WfsGcvk/jbgnGpM9m2emlvLnjcyqM5lrnFJQY+WhLEhq1kqfGdcZV2+SH\nQosGSLWzEMJZmmTyvayTXxQv9H6Km0P6kl2Zy1uHl/Fp8pcYL43zLS8vx98/kKVLl9O2bTva+AUx\nf/gshviPRoGSVEU8z25/ix0nkrDb7VisNt7fdJIKo4WJw9oRGiC3m29kUu0shHCWJt+t06v1jO9w\nFzcFdWHN6fXsytjD8fxT3NdhDB2jO3LoUGKt4xUKBWM7D2RwZRfe2b+OHNdzbMj+D7vSYonQdCcl\ns4Re0YHc3CXYSS0SjnK52vnXM1xd9nuqnX89w9Vl1dXOtWe4ukyqnYUQl6leeumllxr7QyorzVc+\n6E/y1fvQ1zsGyss5WZHGgZwECgyFRHpHoFXVXWvXRaNnYJseuNl9OVN4jgpdJhnGVHwtbXlyXFc0\n6vq/eK8lNzedQ2LTFDkqNh1b+2AwWSgpN2E0W/Hz1NEvtiXjh0TWzBFenyifSAwWE6WmMoxWE746\nH3q37MGYyNG4d4zBZjRgKSnBZjSi9vPDs19/Au6ZgEJ5bW42yc9OwyQ2DZPYNKwxYuPm1vAf2036\ntnMNiwW3F54laGA/Hhj9GHP/34+El8L+7MO8sm8hCbmJDU5uPyjiJp7o8RcAVC4GHr4jGhddk78h\nIP4gWVhBCOFIN0TP1+2f/8D1g2UoS0tQ2O34ZuYxdPNhVF16cMLXxqGco2SUZxHp3Qa9Wl/rXIPF\nwLLElVRaDDzSeTIdg1o36rXWum75K7RBjorN2h1n2X4oA4O5urLZYLaSerEUg8lCbIRfg+dtOPs1\nOzN2Y7QaATBajaSVXsBgMRGwI4Hi7duwGwwA2A0GjKmp2IwG3GI6X5Prlp+dhklsGiaxaZj0fP+o\nykp032yu87LKZufu97/hudjHaOcdQWL+SV7d/yZ7Lu6v6YnY7XZWnfqUPEMBw8MG0SUgxtFXL5xI\nhhoJIZylySdfZU42ysy6BTMAyosZtCit4olujzChwxjsdlhzegNLjnxAXmUB2y/s4lj+Sdp7t+X2\niFscfOXC2WSokRDCWZr8w01bUAtsIaGo0i/U3Rccii2oBUqFkgEhfYjxi2Ltmc85UZDE3ANvYbFZ\n8NJ68kDMRFTKxi+wEteXy0ONCupJwL9nqFGhqajOvuqhRmAtKKizT4YaCSEua/I9X1xdMY0cXe8u\n08hR4Opas+2j92Z65/t5oNNEdCotSoWSabGT8dR6OOpqxXVEFlYQQjhLk+/5AlS8NBcA3TdbUF7M\nwBYcimnkqJrXf02hUNAjqCud/DpQWWXAz6X+CRFE8zBuUARnLhSTmVc9v7NSASEBv29hhbPFqWSV\nZ2PDhhIlLd1bcGfErahbQ+WZM5gzM6rnd1Yq0YaEysIKQogaTb/nC6BWU/HqAgp/2k/h3sMU/rSf\nilcXgLrhvy1c1C6SeIUsrCCEcIobI/le5uqKrU1ErVvNQjREqp2FEM5yYyVfIf4AqXYWQjiLJF/R\nbMnCCkIIZ5HkK5otqXYWQjjLDVHtLMTVGj8kEoAjyXkUlpnw9dDRrX1AzesNGRNZPbwtMe8kRaZi\nfHTedA7oxJjI0SjbVh9TfiQBS2Ehal9f3Lt1J+CeCY3aFiFE0yE9XyGQhRWEEI4lPV/RrK37PqXW\ner6FZeaa7YnD2jd43saUzbXW8y0yF9dsD0yovZ6vtbCwZjtwwqRrev1CiKZJer6i2ZKhRkIIZ5Hk\nK5otGWokhHAWSb6i2ZKhRkIIZ5HkK5otGWokhHCWq06+8+bNY/z48UyYMIHExMRreU1COMy4QRG0\nCnRHqajeViqgVeDvW1ghxD0Y5aVfISVKQtyDuTPiVvzH3IO2VRgoL/16KZVoW4XJwgpCiBpXlXwP\nHDjA+fPnWbduHXPnzmXu3LqrBwnRFMjCCkIIZ7iq5BsfH8+wYcMAaNu2LSUlJZSXl1/TCxOisUm1\nsxDCWa5qnG9+fj6dOv3yzMvX15e8vDzc3d3rPd7HxxW1uv7nZ81dQICHsy/hutXYscnKr6CwrOFq\nZ5VWQ4C/W5192eV5V13t7Kmy4BLgf/UX/Svys9MwiU3DJDYNc2RsrskkG1eawaeoqPJafMwNJyDA\ng7y8MmdfxnXJEbGxVlnx9dBRUM9wIx8PPVZzVb3XYLUq8dF5U2gqqrOvutoZrAUFdfapfXwptaop\nvwbtkp+dhklsGiaxaVhjxOa3kvlV3XYODAwkPz+/Zjs3N5eAgPqrRoW4Xkm1sxDCWa6q59uvXz/e\nfvttJkyYwMmTJwkMDGzwlrMQ17NfFlbIp6jMiI+Hnm7t/X/3wgrH809SaCzGV+9NrP//LqxwBEtR\nIWofX9y7dZOFFYQQNRT2q5z1feHChRw6dAiFQsG//vUvoqKiGjxWbnPUT24BNczRsTFVWSkpN+Hl\nrmuwx1sfs9VMiakML50HWpW21j6byYSlpAS1l9c17/HKz07DJDYNk9g0zNG3na/6me/s2bOv9lQh\nrvi5BnoAAATFSURBVDs6jYpAH9c/fJ5WpSXA1a/efUqdDm1g4J+9NCHEDUhmuBJCCCEcTJKvEEII\n4WCSfIUQQggHk+QrhBBCOJgkXyGEEMLBJPkKIYQQDibJVwghhHAwSb5CCCGEg0nyFUIIIRxMkq8Q\nQgjhYFc9t7MQQgghro70fIUQQggHk+QrhBBCOJgkXyGEEMLBJPkKIYQQDibJVwghhHAwSb5CCCGE\ng6mdfQHNSXJyMjNmzOD+++9n8uTJZGVl8cwzz2C1WgkICOCNN95Aq9U6+zKd4vXXX+fw4cNYLBYe\nffRRYmNjJTaAwWBgzpw5FBQUYDKZmDFjBlFRURKbXzEajdx2223MmDGDuLg4ic0l+/fvZ9asWbRr\n1w6A9u3bM23aNInPJZs2bWLFihWo1WqeeOIJOnTo4NDYSM/XQSorK3nllVeIi4ureW3JkiVMnDiR\nNWvWEB4ezvr16514hc6zb98+zp49y7p161ixYgXz5s2T2Fzyww8/EBMTw+rVq1m0aBHz58+X2PyP\nZcuW4eXlBcjv1P/q1asXq1atYtWqVbz44osSn0uKiop49913WbNmDe+99x47duxweGwk+TqIVqtl\n+fLlBAYG1ry2f/9+hg4dCsDgwYOJj4931uU5Vc+ePVm8eDEAnp6eGAwGic0lo0aN4uGHHwYgKyuL\noKAgic2vnDt3jpSUFAYNGgTI79SVSHyqxcfHExcXh7u7O4GBgbzyyisOj40kXwdRq9Xo9fparxkM\nhprbGn5+fuTl5Tnj0pxOpVLh6uoKwPr167n55pslNv9jwoQJzJ49m+eee05i8ysLFixgzpw5NdsS\nm9pSUlKYPn069913H3v27JH4XJKRkYHRaGT69OlMnDiR+Ph4h8dGnvleJ2SWT9i+fTvr16/no48+\nYsSIETWvS2xg7dq1JCUl8fTTT9eKR3OOzRdffEHXrl1p1apVvfubc2wAWrduzcyZMxk5ciTp6elM\nnToVq9Vas7+5x6e4uJh33nmHixcvMnXqVIf/XknydSJXV1eMRiN6vZ6cnJxat6Sbm59++on33nuP\nFStW4OHhIbG55MSJE/j5+dGyZUuio6OxWq24ublJbICdO3eSnp7Ozp07yc7ORqvVys/NrwQFBTFq\n1CgAwsLC8Pf35/jx4xIfqnu23bp1Q61WExYWhpubGyqVyqGxkdvOTtS3b1+2bt0KwHfffceAAQOc\nfEXOUVZWxuuvv87777+Pt7c3ILG57NChQ3z00UcA5OfnU1lZKbG5ZNGiRWzYsIFPP/2Ue+65hxkz\nZkhsfmXTpk18+OGHAOTl5VFQUMCYMWMkPkD//v3Zt28fNpuNoqIip/xeyapGDnLixAkWLFhAZmYm\narWaoKAgFi5cyJw5czCZTAQHB/Paa6+h0WicfakOt27dOt5++23atGlT89r8+fN54YUXmn1sjEYj\nzz//PFlZWRiNRmbOnElMTAzPPvtss4/Nr7399tuEhITQv39/ic0l5eXlzJ49m9LSUqqqqpg5cybR\n0dESn0vWrl1bU9H82GOPERsb69DYSPIVQgghHExuOwshhBAOJslXCCGEcDBJvkIIIYSDSfIVQggh\nHEySrxBCCOFgknyFEEIIB5PkK4QQQjiYJF8hhBDCwf4/tlAre0ndmbwAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f8ce1d5e350>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "eTYGet7FXRgX",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}