{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/vimalrajayyappan/Path_Planning/blob/master/ReedSheeps)"
      ]
    },
    {
      "metadata": {
        "id": "_dG8Sd6eqDCW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2035
        },
        "outputId": "ce38aeaa-a703-4b9b-fabd-8bb2b2e0a62b"
      },
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Reeds Shepp path planner sample code\n",
        "author Atsushi Sakai(@Atsushi_twi)\n",
        "\"\"\"\n",
        "import numpy as np\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "show_animation = True\n",
        "\n",
        "\n",
        "class Path:\n",
        "\n",
        "    def __init__(self):\n",
        "        self.lengths = []\n",
        "        self.ctypes = []\n",
        "        self.L = 0.0\n",
        "        self.x = []\n",
        "        self.y = []\n",
        "        self.yaw = []\n",
        "        self.directions = []\n",
        "\n",
        "\n",
        "def plot_arrow(x, y, yaw, length=1.0, width=0.5, fc=\"r\", ec=\"k\"):\n",
        "    \"\"\"\n",
        "    Plot arrow\n",
        "    \"\"\"\n",
        "\n",
        "    if not isinstance(x, float):\n",
        "        for (ix, iy, iyaw) in zip(x, y, yaw):\n",
        "            plot_arrow(ix, iy, iyaw)\n",
        "    else:\n",
        "        plt.arrow(x, y, length * math.cos(yaw), length * math.sin(yaw),\n",
        "                  fc=fc, ec=ec, head_width=width, head_length=width)\n",
        "        plt.plot(x, y)\n",
        "\n",
        "\n",
        "def mod2pi(x):\n",
        "    v = np.mod(x, 2.0 * math.pi)\n",
        "    if v < -math.pi:\n",
        "        v += 2.0 * math.pi\n",
        "    else:\n",
        "        if v > math.pi:\n",
        "            v -= 2.0 * math.pi\n",
        "    return v\n",
        "\n",
        "\n",
        "def SLS(x, y, phi):\n",
        "    phi = mod2pi(phi)\n",
        "    if y > 0.0 and phi > 0.0 and phi < math.pi * 0.99:\n",
        "        xd = - y / math.tan(phi) + x\n",
        "        t = xd - math.tan(phi / 2.0)\n",
        "        u = phi\n",
        "        v = math.sqrt((x - xd) ** 2 + y ** 2) - math.tan(phi / 2.0)\n",
        "        return True, t, u, v\n",
        "    elif y < 0.0 and phi > 0.0 and phi < math.pi * 0.99:\n",
        "        xd = - y / math.tan(phi) + x\n",
        "        t = xd - math.tan(phi / 2.0)\n",
        "        u = phi\n",
        "        v = -math.sqrt((x - xd) ** 2 + y ** 2) - math.tan(phi / 2.0)\n",
        "        return True, t, u, v\n",
        "\n",
        "    return False, 0.0, 0.0, 0.0\n",
        "\n",
        "\n",
        "def set_path(paths, lengths, ctypes):\n",
        "\n",
        "    path = Path()\n",
        "    path.ctypes = ctypes\n",
        "    path.lengths = lengths\n",
        "\n",
        "    # check same path exist\n",
        "    for tpath in paths:\n",
        "        typeissame = (tpath.ctypes == path.ctypes)\n",
        "        if typeissame:\n",
        "            if sum(tpath.lengths) - sum(path.lengths) <= 0.01:\n",
        "                return paths  # not insert path\n",
        "\n",
        "    path.L = sum([abs(i) for i in lengths])\n",
        "\n",
        "    # Base.Test.@test path.L >= 0.01\n",
        "    if path.L >= 0.01:\n",
        "        paths.append(path)\n",
        "\n",
        "    return paths\n",
        "\n",
        "\n",
        "def SCS(x, y, phi, paths):\n",
        "    flag, t, u, v = SLS(x, y, phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [t, u, v], [\"S\", \"L\", \"S\"])\n",
        "\n",
        "    flag, t, u, v = SLS(x, -y, -phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [t, u, v], [\"S\", \"R\", \"S\"])\n",
        "\n",
        "    return paths\n",
        "\n",
        "\n",
        "def polar(x, y):\n",
        "    r = math.sqrt(x ** 2 + y ** 2)\n",
        "    theta = math.atan2(y, x)\n",
        "    return r, theta\n",
        "\n",
        "\n",
        "def LSL(x, y, phi):\n",
        "    u, t = polar(x - math.sin(phi), y - 1.0 + math.cos(phi))\n",
        "    if t >= 0.0:\n",
        "        v = mod2pi(phi - t)\n",
        "        if v >= 0.0:\n",
        "            return True, t, u, v\n",
        "\n",
        "    return False, 0.0, 0.0, 0.0\n",
        "\n",
        "\n",
        "def LRL(x, y, phi):\n",
        "    u1, t1 = polar(x - math.sin(phi), y - 1.0 + math.cos(phi))\n",
        "\n",
        "    if u1 <= 4.0:\n",
        "        u = -2.0 * math.asin(0.25 * u1)\n",
        "        t = mod2pi(t1 + 0.5 * u + math.pi)\n",
        "        v = mod2pi(phi - t + u)\n",
        "\n",
        "        if t >= 0.0 and u <= 0.0:\n",
        "            return True, t, u, v\n",
        "\n",
        "    return False, 0.0, 0.0, 0.0\n",
        "\n",
        "\n",
        "def CCC(x, y, phi, paths):\n",
        "\n",
        "    flag, t, u, v = LRL(x, y, phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [t, u, v], [\"L\", \"R\", \"L\"])\n",
        "\n",
        "    flag, t, u, v = LRL(-x, y, -phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [-t, -u, -v], [\"L\", \"R\", \"L\"])\n",
        "\n",
        "    flag, t, u, v = LRL(x, -y, -phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [t, u, v], [\"R\", \"L\", \"R\"])\n",
        "\n",
        "    flag, t, u, v = LRL(-x, -y, phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [-t, -u, -v], [\"R\", \"L\", \"R\"])\n",
        "\n",
        "    # backwards\n",
        "    xb = x * math.cos(phi) + y * math.sin(phi)\n",
        "    yb = x * math.sin(phi) - y * math.cos(phi)\n",
        "    # println(xb, \",\", yb,\",\",x,\",\",y)\n",
        "\n",
        "    flag, t, u, v = LRL(xb, yb, phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [v, u, t], [\"L\", \"R\", \"L\"])\n",
        "\n",
        "    flag, t, u, v = LRL(-xb, yb, -phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [-v, -u, -t], [\"L\", \"R\", \"L\"])\n",
        "\n",
        "    flag, t, u, v = LRL(xb, -yb, -phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [v, u, t], [\"R\", \"L\", \"R\"])\n",
        "\n",
        "    flag, t, u, v = LRL(-xb, -yb, phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [-v, -u, -t], [\"R\", \"L\", \"R\"])\n",
        "\n",
        "    return paths\n",
        "\n",
        "\n",
        "def CSC(x, y, phi, paths):\n",
        "    flag, t, u, v = LSL(x, y, phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [t, u, v], [\"L\", \"S\", \"L\"])\n",
        "\n",
        "    flag, t, u, v = LSL(-x, y, -phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [-t, -u, -v], [\"L\", \"S\", \"L\"])\n",
        "\n",
        "    flag, t, u, v = LSL(x, -y, -phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [t, u, v], [\"R\", \"S\", \"R\"])\n",
        "\n",
        "    flag, t, u, v = LSL(-x, -y, phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [-t, -u, -v], [\"R\", \"S\", \"R\"])\n",
        "\n",
        "    flag, t, u, v = LSR(x, y, phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [t, u, v], [\"L\", \"S\", \"R\"])\n",
        "\n",
        "    flag, t, u, v = LSR(-x, y, -phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [-t, -u, -v], [\"L\", \"S\", \"R\"])\n",
        "\n",
        "    flag, t, u, v = LSR(x, -y, -phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [t, u, v], [\"R\", \"S\", \"L\"])\n",
        "\n",
        "    flag, t, u, v = LSR(-x, -y, phi)\n",
        "    if flag:\n",
        "        paths = set_path(paths, [-t, -u, -v], [\"R\", \"S\", \"L\"])\n",
        "\n",
        "    return paths\n",
        "\n",
        "\n",
        "def LSR(x, y, phi):\n",
        "    u1, t1 = polar(x + math.sin(phi), y - 1.0 - math.cos(phi))\n",
        "    u1 = u1 ** 2\n",
        "    if u1 >= 4.0:\n",
        "        u = math.sqrt(u1 - 4.0)\n",
        "        theta = math.atan2(2.0, u)\n",
        "        t = mod2pi(t1 + theta)\n",
        "        v = mod2pi(t - phi)\n",
        "\n",
        "        if t >= 0.0 and v >= 0.0:\n",
        "            return True, t, u, v\n",
        "\n",
        "    return False, 0.0, 0.0, 0.0\n",
        "\n",
        "\n",
        "def generate_path(q0, q1, maxc):\n",
        "    dx = q1[0] - q0[0]\n",
        "    dy = q1[1] - q0[1]\n",
        "    dth = q1[2] - q0[2]\n",
        "    c = math.cos(q0[2])\n",
        "    s = math.sin(q0[2])\n",
        "    x = (c * dx + s * dy) * maxc\n",
        "    y = (-s * dx + c * dy) * maxc\n",
        "\n",
        "    paths = []\n",
        "    paths = SCS(x, y, dth, paths)\n",
        "    paths = CSC(x, y, dth, paths)\n",
        "    paths = CCC(x, y, dth, paths)\n",
        "\n",
        "    return paths\n",
        "\n",
        "\n",
        "def interpolate(ind, l, m, maxc, ox, oy, oyaw, px, py, pyaw, directions):\n",
        "\n",
        "    if m == \"S\":\n",
        "        px[ind] = ox + l / maxc * math.cos(oyaw)\n",
        "        py[ind] = oy + l / maxc * math.sin(oyaw)\n",
        "        pyaw[ind] = oyaw\n",
        "    else:  # curve\n",
        "        ldx = math.sin(l) / maxc\n",
        "        if m == \"L\":  # left turn\n",
        "            ldy = (1.0 - math.cos(l)) / maxc\n",
        "        elif m == \"R\":  # right turn\n",
        "            ldy = (1.0 - math.cos(l)) / -maxc\n",
        "        gdx = math.cos(-oyaw) * ldx + math.sin(-oyaw) * ldy\n",
        "        gdy = -math.sin(-oyaw) * ldx + math.cos(-oyaw) * ldy\n",
        "        px[ind] = ox + gdx\n",
        "        py[ind] = oy + gdy\n",
        "\n",
        "    if m == \"L\":  # left turn\n",
        "        pyaw[ind] = oyaw + l\n",
        "    elif m == \"R\":  # right turn\n",
        "        pyaw[ind] = oyaw - l\n",
        "\n",
        "    if l > 0.0:\n",
        "        directions[ind] = 1\n",
        "    else:\n",
        "        directions[ind] = -1\n",
        "\n",
        "    return px, py, pyaw, directions\n",
        "\n",
        "\n",
        "def generate_local_course(L, lengths, mode, maxc, step_size):\n",
        "    npoint = math.trunc(L / step_size) + len(lengths) + 4\n",
        "\n",
        "    px = [0.0 for i in range(npoint)]\n",
        "    py = [0.0 for i in range(npoint)]\n",
        "    pyaw = [0.0 for i in range(npoint)]\n",
        "    directions = [0.0 for i in range(npoint)]\n",
        "    ind = 1\n",
        "\n",
        "    if lengths[0] > 0.0:\n",
        "        directions[0] = 1\n",
        "    else:\n",
        "        directions[0] = -1\n",
        "\n",
        "    if lengths[0] > 0.0:\n",
        "        d = step_size\n",
        "    else:\n",
        "        d = -step_size\n",
        "\n",
        "    pd = d\n",
        "    ll = 0.0\n",
        "\n",
        "    for (m, l, i) in zip(mode, lengths, range(len(mode))):\n",
        "        if l > 0.0:\n",
        "            d = step_size\n",
        "        else:\n",
        "            d = -step_size\n",
        "\n",
        "        # set origin state\n",
        "        ox, oy, oyaw = px[ind], py[ind], pyaw[ind]\n",
        "\n",
        "        ind -= 1\n",
        "        if i >= 1 and (lengths[i - 1] * lengths[i]) > 0:\n",
        "            pd = - d - ll\n",
        "        else:\n",
        "            pd = d - ll\n",
        "\n",
        "        while abs(pd) <= abs(l):\n",
        "            ind += 1\n",
        "            px, py, pyaw, directions = interpolate(\n",
        "                ind, pd, m, maxc, ox, oy, oyaw, px, py, pyaw, directions)\n",
        "            pd += d\n",
        "\n",
        "        ll = l - pd - d  # calc remain length\n",
        "\n",
        "        ind += 1\n",
        "        px, py, pyaw, directions = interpolate(\n",
        "            ind, l, m, maxc, ox, oy, oyaw, px, py, pyaw, directions)\n",
        "\n",
        "    # remove unused data\n",
        "    while px[-1] == 0.0:\n",
        "        px.pop()\n",
        "        py.pop()\n",
        "        pyaw.pop()\n",
        "        directions.pop()\n",
        "\n",
        "    return px, py, pyaw, directions\n",
        "\n",
        "\n",
        "def pi_2_pi(angle):\n",
        "    return (angle + math.pi) % (2*math.pi) - math.pi\n",
        "\n",
        "\n",
        "def calc_paths(sx, sy, syaw, gx, gy, gyaw, maxc, step_size):\n",
        "    q0 = [sx, sy, syaw]\n",
        "    q1 = [gx, gy, gyaw]\n",
        "\n",
        "    paths = generate_path(q0, q1, maxc)\n",
        "    for path in paths:\n",
        "        x, y, yaw, directions = generate_local_course(\n",
        "            path.L, path.lengths, path.ctypes, maxc, step_size * maxc)\n",
        "\n",
        "        # convert global coordinate\n",
        "        path.x = [math.cos(-q0[2]) * ix + math.sin(-q0[2])\n",
        "                  * iy + q0[0] for (ix, iy) in zip(x, y)]\n",
        "        path.y = [-math.sin(-q0[2]) * ix + math.cos(-q0[2])\n",
        "                  * iy + q0[1] for (ix, iy) in zip(x, y)]\n",
        "        path.yaw = [pi_2_pi(iyaw + q0[2]) for iyaw in yaw]\n",
        "        path.directions = directions\n",
        "        path.lengths = [l / maxc for l in path.lengths]\n",
        "        path.L = path.L / maxc\n",
        "\n",
        "    #  print(paths)\n",
        "\n",
        "    return paths\n",
        "\n",
        "\n",
        "def reeds_shepp_path_planning(sx, sy, syaw,\n",
        "                              gx, gy, gyaw, maxc, step_size):\n",
        "\n",
        "    paths = calc_paths(sx, sy, syaw, gx, gy, gyaw, maxc, step_size)\n",
        "\n",
        "    if len(paths) == 0:\n",
        "        #  print(\"No path\")\n",
        "        #  print(sx, sy, syaw, gx, gy, gyaw)\n",
        "        return None, None, None, None, None\n",
        "\n",
        "    minL = float(\"Inf\")\n",
        "    best_path_index = -1\n",
        "    for i in range(len(paths)):\n",
        "        if paths[i].L <= minL:\n",
        "            minL = paths[i].L\n",
        "            best_path_index = i\n",
        "\n",
        "    bpath = paths[best_path_index]\n",
        "\n",
        "    return bpath.x, bpath.y, bpath.yaw, bpath.ctypes, bpath.lengths\n",
        "\n",
        "\n",
        "def test():\n",
        "\n",
        "    NTEST = 5\n",
        "\n",
        "    for i in range(NTEST):\n",
        "        start_x = (np.random.rand() - 0.5) * 10.0  # [m]\n",
        "        start_y = (np.random.rand() - 0.5) * 10.0  # [m]\n",
        "        start_yaw = math.radians((np.random.rand() - 0.5) * 180.0)  # [rad]\n",
        "\n",
        "        end_x = (np.random.rand() - 0.5) * 10.0  # [m]\n",
        "        end_y = (np.random.rand() - 0.5) * 10.0  # [m]\n",
        "        end_yaw = math.radians((np.random.rand() - 0.5) * 180.0)  # [rad]\n",
        "\n",
        "        curvature = 1.0 / (np.random.rand() * 20.0)\n",
        "        step_size = 0.1\n",
        "\n",
        "        px, py, pyaw, mode, clen = reeds_shepp_path_planning(\n",
        "            start_x, start_y, start_yaw, end_x, end_y, end_yaw, curvature, step_size)\n",
        "\n",
        "        if show_animation:\n",
        "            plt.cla()\n",
        "            plt.plot(px, py, label=\"final course \" + str(mode))\n",
        "\n",
        "            #  plotting\n",
        "            plot_arrow(start_x, start_y, start_yaw)\n",
        "            plot_arrow(end_x, end_y, end_yaw)\n",
        "\n",
        "            plt.legend()\n",
        "            plt.grid(True)\n",
        "            plt.axis(\"equal\")\n",
        "            plt.xlim(-10, 10)\n",
        "            plt.ylim(-10, 10)\n",
        "            plt.pause(1.0)\n",
        "\n",
        "            #  plt.show()\n",
        "\n",
        "    print(\"Test done\")\n",
        "\n",
        "\n",
        "def main():\n",
        "    print(\"Reeds Shepp path planner sample start!!\")\n",
        "\n",
        "    start_x = -1.0  # [m]\n",
        "    start_y = -4.0  # [m]\n",
        "    start_yaw = math.radians(-20.0)  # [rad]\n",
        "\n",
        "    end_x = 5.0  # [m]\n",
        "    end_y = 5.0  # [m]\n",
        "    end_yaw = math.radians(25.0)  # [rad]\n",
        "\n",
        "    curvature = 1.0\n",
        "    step_size = 0.1\n",
        "\n",
        "    px, py, pyaw, mode, clen = reeds_shepp_path_planning(\n",
        "        start_x, start_y, start_yaw, end_x, end_y, end_yaw, curvature, step_size)\n",
        "\n",
        "    if show_animation:\n",
        "        plt.cla()\n",
        "        plt.plot(px, py, label=\"final course \" + str(mode))\n",
        "\n",
        "        # plotting\n",
        "        plot_arrow(start_x, start_y, start_yaw)\n",
        "        plot_arrow(end_x, end_y, end_yaw)\n",
        "\n",
        "        plt.legend()\n",
        "        plt.grid(True)\n",
        "        plt.axis(\"equal\")\n",
        "        plt.show()\n",
        "\n",
        "    if not px:\n",
        "        assert False, \"No path\"\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    test()\n",
        "    main()"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fad42b9e7f0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nMyCRSLBy5Upj10VERGT1Wr1P+plnnjFmHURERPQnHHGMiIhIpBjSREREIsWQJiIiEimGNBERkUgx\npImIiESKIU1ERCRSDGkiIiKRYkgTERGJFEOaiIhIpBjSREREIsWQJiIiEimGNBERkUgxpImIiESK\nIU1ERCRSDGkiIiKRYkgTERGJFEOaiIhIpBjSREREIsWQJiIiEimGNBERkUgxpImIiESKIU1ERCRS\nDGkiIiKRYkgTERGJFEOaiIhIpBjSREREIsWQJiIiEimGNBERkUgxpImIiESKIU1ERCRSDGkiIiKR\nYkgTERGJFEOaiIhIpBjSREREIsWQJiIiEil5a+6k1Wrx/PPPIyMjAzqdDsuWLUN0dLSxayMiIrJq\nrQrp77//HnZ2dvj222+RnJyM5557Dlu2bDF2bURERFatVSE9efJkTJw4EQDg5uaG0tJSoxZFRERE\nrQxpGxsbw88bN240BDYREREZj0QQBOFWM8TFxSEuLq7RtEWLFmHYsGH45ptvsH//fqxbt65RcBMR\nEVHb3TakWxIXF4ddu3bh448/hq2t7R3dp6CgojVPJXpqtcpiewPYn7ljf+bNkvuz5N6Ahv7aqlWb\nuzMzM7Fp0yZ8/fXXdxzQREREdHdaFdJxcXEoLS3F3LlzDdPWr18PhUJhtMKIiIisXatCesmSJViy\nZImxayEiIqKbcMQxIiIikWJIExERiRRDmoiISKQY0kRERCLFkCYiIhIphjQREZFIMaSJiIhEiiFN\nREQkUgxpIiIikWJIExERiRRDmoiISKQY0kRERCLFkCYiIhIphjQREZFIMaSJiIhEiiFNREQkUgxp\nIiIikWJIExERiRRDmoiISKQY0kRERCLFkCYiIhIphjQREZFIMaSJiIhEiiFNREQkUgxpIiIikWJI\nExERiRRDmoiISKQY0kRERCLFkCYiIhIphjQREZFIMaSJiIhEiiFNREQkUgxpIiIikWJIExERiRRD\nmoiISKQY0kRERCLVppAuLCxEv379cPz4cWPVQ0RERDe0KaTffvttBAQEGKsWIiIiukmrQ/ro0aNw\ncHBAt27djFkPERER3dCqkNZoNPjoo4/w9NNPG7seIiIiukF+uxni4uIQFxfXaFpMTAxiY2Ph5OR0\nV0+mVqvurjozYsm9AezP3LE/82bJ/Vlyb8YgEQRBuNs7zZgxA3q9HgCQkZEBNzc3rFmzBl27dr3l\n/QoKKlpXpcip1SqL7Q1gf+aO/Zk3S+7PknsDjPMF5LZr0s3ZtGmT4efly5djypQptw1oIiIiujs8\nT5qIiEikWrUmfbM333zTGHUQERHRn3BNmoiISKQY0kRERCLFkCYiIhIphjQREZFIMaSJiIhEiiFN\nREQkUgxpIiIikWJIExERiRRDmoiISKQY0kRERCLFkCYiIhIphjQREZFIMaSJiIhEiiFNREQkUgxp\nIiIikWJIExERiRRDmoiISKQY0kRERCLFkCYiIhIphjQREZFIMaSJiIhEiiFNREQkUgxpIiIikWJI\nExERiRRDmoiISKQY0kRERCLFkCYiIhIphjQREZFIMaSJiIhEiiFNREQkUgxpIiIikWJIExERiRRD\nmoiISKQY0kRERCLFkCYiIhIphjQREZFItTqk169fj/vvvx/Tpk3DuXPnjFkTERERAZC35k7Jycn4\n6aefsHXrVly5cgX79u1DRESEsWsjIiKyaq0K6QMHDmD8+PGQy+UICwtDWFiYsesiIiKyehJBEIS7\nvdPKlSshk8mQnp4OrVaL5557Dt27d2+P+oiIiKzWbdek4+LiEBcX12haYWEhhg0bhs8//xynT5/G\n888/j61bt972yQoKKlpfqYip1SqL7Q1gf+aO/Zk3S+7PknsDGvprq9uGdGxsLGJjYxtNe//99xES\nEgKJRILo6GhkZ2e3uRAiIiJqrFVHd8fExODXX38FAKSmpsLHx8eoRREREVErDxyLjIzEoUOHMH36\ndADASy+9ZNSiiIiIqJUhDQCLFy/G4sWLjVkLERER3YQjjhEREYkUQ5qIiEikGNJEREQixZAmIiIS\nKYY0ERGRSDGkiYiIRIohTUREJFIMaSIiIpFiSBMREYkUQ5qIiEikWnU9aSIiImp/XJMmIiISKYY0\nERGRSDGkiYiIRIohTUREJFIMaSIiIpFiSBMREYmU3JgPduLECTz55JN4/fXXMXLkSADA5cuXsWrV\nKgBAaGgoXn755Ub3qa+vx/Lly5GTkwOZTIY33ngDAQEBxizL6NauXYsjR44AAPR6PQoLC7F7927D\n7VlZWZg0aRLCw8MBAK6urnj//fdNUmtrbNu2DWvWrEFgYCAAYPDgwZg/f36jeX744Qds3LgRUqkU\nDz30EGJjY01RaqtotVo8//zzyMjIgE6nw7JlyxAdHd1onrCwMERFRRl+37BhA2QyWUeXeldef/11\n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\n1P8H3KWt9KMsWEQAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fad42b6aac8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fad40aeb7b8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAe0AAAFOCAYAAACrPEW7AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3Xd8FHX+P/DXlmw2PdlkNz2kEiAQ\nCBCqdFBE4USIlBMbd1gAUbEfX9FTsBz6OzkVFfHsgEFURBQQAT0IBEjohBBCKim76Zu+5fdHMGcu\nQpZkktlJXs/Hw8exM7Pzeedzm7x2PjPzGZnVarWCiIiI7J5c7AKIiIjINgxtIiIiiWBoExERSQRD\nm4iISCIY2kRERBLB0CYiIpKIDoV2eno6Jk+ejM8++wwAUFBQgAULFmD+/PlYtmwZGhoaWr1n9erV\nmDNnDubOnYuTJ092pHkiIqIepd2hXVNTgxdffBEjR45sXrZ27VrMnz8fX3zxBXr16oUtW7a0eE9y\ncjKys7OxefNmrFq1CqtWrWp/5URERD1Mu0NbpVJh/fr10Ol0zcsOHz6MSZMmAQAmTJiApKSkFu9J\nSkrC5MmTAQARERGoqKiA0WhsbwlEREQ9SrtDW6lUQq1Wt1hWW1sLlUoFAPD29oZer2+x3mAwwMvL\nq/m1RqNptQ0RERH9sU67EM2W2VFt2cZkMgtRDhERkeQphdyZs7Mz6urqoFarUVRU1GLoHAB0Oh0M\nBkPz6+LiYmi12mvus6ysRsgSuyWt1g16fZXYZUgC+8p27Cvbsa9sw36yjVbrdtV1gh5pjxo1Cjt3\n7gQA7Nq1C2PGjGmxfvTo0c3rz5w5A51OB1dXVyFLICIi6rbafaR9+vRpvPrqq8jPz4dSqcTOnTux\nZs0aPP3009i8eTMCAgJw2223AQAeffRRvPzyyxg8eDBiYmIwd+5cyGQyrFy5UrAfhIiIqLuT2fuj\nOTmU0jYOOdmOfWU79pXt2Fe2YT/ZpsuGx4mIiKjzMLSJiIgkgqFNREQkEQxtIiIiiWBoExF1cyaT\nCX/969146aWV2LHjO+zfv/e63p+SchQrVjzZSdW134YN72Hu3Jn46qvNWLJkEQBgyZJFyMzMaLVd\nSsrRP9xHSspRbNjwHgoKLmPKlLFYsmQRlixZhPvvvxevvroKZrO5eZur+a3t2bOno6am5dwiq1Y9\nj7S0c1i06B4sXLigIz8uAIEnVyEiIvtjMBjQ2NiIFSteELsUwSUkzMWsWXOwd++eDu8rJKQX3nrr\n/ebXq1Y9j927f4RO59uh/Xp4eOCFF1ZjxYqnOloiQ5uIqLv7179eR35+HlavfgG+vn7w9PREWFgE\ntm79EjKZHNnZlzB+/CTcd98iHDlyGB988C4cHBzg5uaGv//9lavu95//XIOzZ09DoVDgiSeeQXh4\nJN55502cOnUCJpMZs2bdgalTb8GSJYvw2GNPQquNw1dfbUZ5eTni4oZg06bPUFNTgyVLHsWPP25H\nWto5mM1mzJw5G9OmTcf+/T9j06bPoFAoER3dF0uXPnrVWlas+PtV182aNafVszJ+069ff4SHR6K2\ntvXsm/369UdeXi7Gj5+E8PDIdrV9//1L4OnpCb2++KrbXA+GNhFRF/ry5wwcSRPmD/hv4vvocMfE\nq4fKkiWPYsWKp/DssytbDPOePXsGX3zxFSwWCxISpuO++xahqqoKK1e+hICAQLz44nM4fDgJzs7O\nrfZ55MhhFBcX4f33P8Lx4ynYs2c3KisrkZl5EevWfYja2lrcffdcjB07/qp1XbyYgY0bt6KurhYH\nD/4HX375LUwmE3bs+A41NTX4+OMNePfdf0OlUuH//u9pnDx5HLGxg/5wX35+fldtx9PT86rr1Go1\n1Gp1q9A2mUz49df9uO22Wc3bXM212vbx8bnquvZgaBMR9VDR0X1ahZGnpydeffUlmM1mXL6cjyFD\n4v8wtNPT0zBgwEAAwKBBgzFo0GBs2vQZBg0aDABwcnJCaGg4cnNzr9p+ZGQUVCoVVCoVgoN74emn\nH8OECZMxdeotuHAhHUVFhXjssSUAgOpqIwoLCxEbK9RP31pOTnbz+emLFzPw5z/fdc0vHWJgaBMR\ndaE7JkZe86i4KykUilbLXn75RfzjH/9EaGgY3njj1au+Vy5XwGq1tFgmk8nw+zk2TaZGyOUyyGSy\n3y0zNf/bwcGh+d+vv74W58+nYffuH/Hjj9/jwQeXIjq6L9544632/Gjt8vtz2itWPIng4F5d1rat\nePU4ERE1q642wtfXD1VVVUhJOYbGxsY/3K5v337NV2Snp6fh9ddfRZ8+MUhNPQYAqKmpQX5+HoKC\nQuDi4oKSkqYnPJ46daLVvgoKLiMxcROio/tgyZJHUFFRgZCQUGRlXUJZWSmApivAhTovbIuHHlqG\nd9/9F+rq6rqsTVvwSJuIiJrdfnsCHnxwIYKDQ/DnP9+FDz98H4sWPdRqu0GDBuPXX/fjoYf+AgBY\nvvxpREREIjq6DxYv/itMJhMeeGAJnJycMGPG7Xj99dfwzTeJ0Gpbn//18dHi9OkT2LNnFxwcHHDL\nLTOgVquxbNlyPP74MqhUDoiKioaPz7Uf5fyb1av/3jzsP2RIPO69968AgEOHDqKg4DJmzpzd5j4C\nAgIxfvwkfPzxBtx//2IAQEmJARs2vIcnn/zbVd/3+OMPQy5vOh6eMmUq/vSn222q2VZ8YEg3wEn4\nbce+sh37ynbsK9sI3U8bNrwHT09PzJo1x6bta2pqsHnz580h3h5vv/0mFi9edt3vKyi4jBUrnsKG\nDZ+2ue21HhjCI20iIpKsxMRNAGBTcJeUGDBp0pR2t9XY2Ij4+OHX/b60tHPXvD7gevBIuxvgt3zb\nsa9sx76yHfvKNuwn2/DRnERERN0AQ5uIiEgiGNpEREQSwdAmIiKSCIY2ERGRRDC0iYiIJIKhTURE\nJBEMbSIiIolgaBMREUkEQ5uIiEgiGNpEREQSwdAmIiKSCIY2ERGRRDC0iYiIJELQ52knJiZi27Zt\nza9Pnz6N1NTU5tcxMTEYPHhw8+uPPvoICoVCyBKIiIi6LUFDOyEhAQkJCQCA5ORk/PDDDy3Wu7q6\n4tNPPxWySSIioh6j04bH3377bTz00EOdtXsiIqIeR9Aj7d+cPHkS/v7+0Gq1LZY3NDRg+fLlyM/P\nx0033YR77723zX15eTlDqeQQelu0WjexS5AM9pXt2Fe2Y1/Zhv3UMZ0S2lu2bMHMmTNbLX/yyScx\nY8YMyGQy3HnnnRg6dCgGDBhwzX2VldV0RondilbrBr2+SuwyJIF9ZTv2le3YV7ZhP9nmWl9sOmV4\n/PDhw4iLi2u1fN68eXBxcYGzszNGjBiB9PT0zmieiIioWxI8tIuKiuDi4gKVStVieWZmJpYvXw6r\n1QqTyYSUlBRERUUJ3TwREVG3JfjwuF6vh0ajaX79/vvvIz4+HnFxcfDz88Ps2bMhl8sxceJExMbG\nCt08ERFRtyWzWq1WsYu4Fp7/aBvPE9mOfWU79pXt2Fe2YT/ZpsvPaRMREZHwGNpEREQSwdAmIiKS\nCIY2ERGRRDC0iYiIJIKhTUREJBEMbSIiIolgaBMREUkEQ5uIiEgiGNpEREQSwdAmIiKSCIY2ERGR\nRDC0iYiIJIKhTUREJBEMbSIiIolgaBMREUkEQ5uIiEgiGNpEREQSwdAmIiKSCIY2ERGRRDC0iYiI\nJIKhTUREJBEMbSIiIolgaBMREUkEQ5uIiEgiGNpEREQSwdAmIiKSCIY2ERGRRCiF3Nnhw4exbNky\nREVFAQB69+6N//u//2tef/DgQbzxxhtQKBQYO3YsFi9eLGTzRERE3ZqgoQ0Aw4YNw9q1a/9w3Usv\nvYQNGzbA19cXd955J2666SZERkYKXQIREVG31GXD47m5ufDw8IC/vz/kcjnGjRuHpKSkrmqeiIhI\n8gQP7YyMDDzwwAOYN28eDhw40Lxcr9dDo9E0v9ZoNNDr9UI3T0RE1G0JOjweGhqKJUuW4Oabb0Zu\nbi7uuusu7Nq1CyqVqt379PJyhlKpELDK7kmrdRO7BMlgX9mOfWU79pVt2E8dI2ho+/r6Ytq0aQCA\nkJAQ+Pj4oKioCMHBwdDpdDAYDM3bFhUVQafTtbnPsrIaIUvslrRaN+j1VWKXIQnsK9uxr2zHvrIN\n+8k21/piI+jw+LZt27BhwwYATcPhJSUl8PX1BQAEBQXBaDQiLy8PJpMJe/fuxejRo4VsnoiIqFsT\n9Eh74sSJePzxx7Fnzx40Njbi+eefx/bt2+Hm5oYpU6bg+eefx/LlywEA06ZNQ1hYmJDNExERdWsy\nq9VqFbuIa+FQSts45GQ79pXt2Fe2Y1/Zhv1kmy4bHiciIqLOw9AmIiKSCIY2ERGRRDC0iYiIJIKh\nTUREJBEMbSIiIolgaBMREUkEQ5uIiEgiGNpEREQSwdAmIiKSCIY2ERGRRDC0iYiIJIKhTUREJBEM\nbSIiIolgaBMREUkEQ5uIiEgiGNpEREQSwdAmIiKSCIY2ERGRRDC0iYiIJIKhTUREJBEMbSIiIolg\naBMREUkEQ5uIiEgiGNpEREQSwdAmIiKSCIY2ERGRRDC0iYiIJEIp9A5fe+01HDt2DCaTCffffz9u\nvPHG5nUTJ06En58fFAoFAGDNmjXw9fUVugQiIqJuSdDQPnToEC5cuIDNmzejrKwMM2fObBHaALB+\n/Xq4uLgI2SwREVGPIGhox8fHIzY2FgDg7u6O2tpamM3m5iNrIiIiaj9BQ1uhUMDZ2RkAsGXLFowd\nO7ZVYK9cuRL5+fkYMmQIli9fDplMJmQJRERE3ZbMarVahd7pTz/9hPfeew8ffvgh3Nzcmpd/8803\nGDNmDDw8PLB48WLMnDkTU6dOvea+TCYzlEoeqRMREQke2r/++ivefPNNfPDBB/D09Lzqdp9//jlK\nSkrw8MMPX3N/en2VkOV1S1qtG/vJRuwr27GvbMe+sg37yTZardtV1wl6y1dVVRVee+01vPfee60C\nu6qqCgsXLkRDQwMA4MiRI4iKihKyeSIiom5N0HPaO3bsQFlZGR555JHmZcOHD0d0dDSmTJmCsWPH\nYs6cOXB0dES/fv3aHBonIiKi/+qUc9pC4lBK2zjkZDv2le3YV7ZjX9mG/WSbLhseJyIios7D0CYi\nIpIIhjYREZFEMLSJiIgkgqFNRGSjnPNp+OqVl8Qug3owhjYRURuK8vOw/ZHFqJsxFZqLF8Quh3ow\nwR/NSUTUXZSXluLAP1YjePu3uKeoCDIAmwKCxC6LejCGNhHR/6g2GvHLP9fA5+uvcFdudvOQpAWA\nJSBQzNKoh2NoExH9j8+feRwLv9wIv/+ZeyoLQED8MFFqIgJ4TpuIqJW/rl2HfSuexwGtrsXyNK0v\nIvr1F6kqIoY2EVErMpkMk5Y+iqq338O9Ib3QcGV5bUAA1Gq1qLVRz8bQJiK6itfffQfP7t6PT++6\nFxfUTrAG8nw2iYvntImI/sD/e/1V3P/AYnh6aTBjzZs4MuoG1GZdErss6uEY2kRE/+PUiVSUlpVi\n3PiJzcvib08QsSKiJgxtIqLfMZvNeP6F57Dlq21il0LUCs9pExH9ziPLHsLate9AJpOJXQpRKwxt\nIqIrvkrchGHxwxEYFCx2KUR/iKFNRATAoNfjhx++x4K77xO7FKKr4jltIiIAS5YswsefbBK7DKJr\n4pE2EfV4r778Ih555HE4OjqKXQrRNTG0iahHO3Y0GSaTCSNGjha7FKI2cXiciHqs4lIjXnnlJSRu\n4e1dJA0MbSLqkZJOF2L99rP4y/J/iF0Kkc04PE5EPU5RaQ0+2XUeapUCQ/qGiF0Okc0Y2kTUozQ0\nmvHON6dR32DGXVOj4ePpJHZJRDZjaBNRj7JpzwXkFhsxblAARvTzE7scouvC0CaiHuPQ2ULsO34Z\nQVpXzJsUJXY5RNeNoU1EPUJhaQ0+/vE8HFUKPDSzP1QOCrFLIrpuDG0i6vYaGs145+um89h3T42G\nn8ZZ7JKI2kXw0F69ejXmzJmDuXPn4uTJky3WHTx4ELNnz8acOXPw9ttvC900EVErVqsVn+9OR57e\niPE8j00SJ2hoJycnIzs7G5s3b8aqVauwatWqFutfeukl/Otf/8LGjRtx4MABZGRkCNk8EVEr+45f\nxq8nCxDi64q5PI9NEidoaCclJWHy5MkAgIiICFRUVMBoNAIAcnNz4eHhAX9/f8jlcowbNw5JSUlC\nNk9E1MKFvHJ8sTsdrk4OWHL7AJ7HJskTdEY0g8GAmJiY5tcajQZ6vR6urq7Q6/XQaDQt1uXm5ra5\nTy8vZyiV/EVri1brJnYJksG+sp2U+6qkohbrvj0DK4Bn7olH30htp7Yn5b7qSuynjunUaUytVmuH\n91FWViNAJd2bVusGvb5K7DIkgX1lOyn3VaPJgle/SEF5VT3mToyEv4e6U38WKfdVV2I/2eZaX2wE\nHR7X6XQwGAzNr4uLi6HVav9wXVFREXQ6nZDNExFdufDsPDIvV2JEjC+mxAeLXRKRYAQN7dGjR2Pn\nzp0AgDNnzkCn08HV1RUAEBQUBKPRiLy8PJhMJuzduxejR/NReEQkrJ9T8vHLiaYLz+6e2gcymUzs\nkogEI+jw+ODBgxETE4O5c+dCJpNh5cqV2Lp1K9zc3DBlyhQ8//zzWL58OQBg2rRpCAsLE7J5Iurh\nTl404Iuf0uHu3HThmSMvPKNuRmYV4sRzJ+L5j7bxPJHt2Fe2k1pf5RYbsfqzY7BYrHhyfhwiAjy6\nrG2p9ZVY2E+26bJz2kREYig31uPNLSdQ32DGX27t16WBTdSVGNpEJGn1jWas3XISpZX1mDUuHPF9\neIErdV8MbSKSLIvVig+2n0VWYRVGD/DDtBG9xC6JqFMxtIlIkqxWKzb+dAHHzusRHezJK8WpR2Bo\nE5Ek7TiUjT3H8hCodcGSWQOgVPDPGXV//JQTkeT8euIyvtqfCW93Rzx2xyC4qB3ELomoSzC0iUhS\njl8w4OMfz8NFrcRjcwbBy81R7JKIugxDm4gkIyOvAuu+PQ2lUoZH7hgIf28XsUsi6lIMbSKShNxi\nI97ccgJmsxUP3TaA92JTj8TQJiK7V1BSjTWbUlFdZ8K90/ogNsJb7JKIRMHQJiK7VlxWg39sTEVV\nTSMW3BSN0QP8xS6JSDQMbSKyWyUVdfjHxlSUGxswd2IkJsQFil0SkagY2kRkl8qq6vGPjakoqazH\n7WPDceOwELFLIhIdQ5uI7E5ldQPWbEpFcXktbh3VC7eOChW7JCK7IOjztImIOqrc2HSEXVBSgxvj\ngzFzTLjYJRHZDYY2EdmNsqp6vLYxFUWlTYE9Z2Ik5xMn+h2GNhHZhd8uOisur8XNI0Iwe1wEA5vo\nfzC0iUh0+vJa/GNjKgwVdZg+KhS3jQljYBP9AYY2EYmq6Mp92KWV9bhtTBhmjA4TuyQiu8XQJiLR\n5BRV4Y0vT6CyugGzx0dg2oheYpdEZNcY2kQkivTccry55SRq602YPzkKk4cGi10Skd1jaBNRlzue\nYcC6b07DYrHir9P7YWSMn9glEUkCQ5uIutSBUwX49440KBUyLJ0Vy4d/EF0HhjYRdZldR3Kxac8F\nODsq8UjCQEQG8fGaRNeDoU1Enc5iseLLvRnYdSQXHq4qLL9jEIJ0rmKXRSQ5DG0i6lT1jWas/+4s\nUtL18Pd2xiMJA6H1dBK7LCJJYmgTUaepqG7A2i0ncamgEn1CPLH49gFwUTuIXRaRZDG0iahTXDZU\n45+JJ2CoqMOo/n645+Y+UCr4YEGijhAstE0mE/72t78hJycHZrMZTz75JIYOHdpim5iYGAwePLj5\n9UcffQSFQiFUCURkJ85ll+HtradQU2/CbTeEYfroUE5LSiQAwUL722+/hZOTEzZu3IgLFy7gmWee\nwZYtW1ps4+rqik8//VSoJonIzlitVuxLzccXP10AAPzl1r4Y1d9f5KqIug/BQnvGjBm49dZbAQAa\njQbl5eVC7ZqIJMBktuDz3enYf/wy3Jwd8NBt/REd4iV2WUTdimCh7eDw34tLPv744+YA/72GhgYs\nX74c+fn5uOmmm3DvvfcK1TyRaBoazdhzLA+jBvjDw0UldjmiqKhuwNtfn0JGXgVCdK5YMmsAfDx4\nhTiR0NoV2omJiUhMTGyxbOnSpRgzZgw+//xznDlzBu+++26r9z355JOYMWMGZDIZ7rzzTgwdOhQD\nBgy4ZlteXs5QKnneuy1arZvYJUiG0H2Vcr4Yifsuwt3dCbeNixB032Kzpa8ycsux6pOjMFTUYcyg\nQDw8ZxDUqp53jSt/B23DfuqYdv1mJSQkICEhodXyxMRE/Pzzz3jnnXdaHHn/Zt68ec3/HjFiBNLT\n09sM7bKymvaU2KNotW7Q66vELkMSOqOvKsqbPqNl5TXd6v8HW/oq6XQhPvoxDSaTBbPGhWPaiF6o\nqqhF9+kF2/B30DbsJ9tc64uNYPdf5ObmYtOmTXjrrbfg6OjYan1mZiaWL18Oq9UKk8mElJQUREVF\nCdU8kWgU8qaros0Wq8iVdJ1Gkxkf/5iG9dvPQqmQ4eHZsbhlJK8QJ+psgo1hJSYmory8HIsWLWpe\ntmHDBnz00UeIj49HXFwc/Pz8MHv2bMjlckycOBGxsbFCNU8kGsWVe49NZovIlXSN4vJavPP1KeQU\nGRGkdcXimf3hq3EWuyyiHkFmtVrt+vCAQylt45CT7Tqjry5ersCqT45h6vAQ3DEhUtB9i+mP+iol\nXY8N359Dbb0JY2L98ecpvaFy4DUn/B20DfvJNtcaHu95V4sQCUwpbzrSNpvt+vtvh5jMFny1/yJ2\nJudCpZTjvml9cUMs778m6moMbaIO+u857e45PF5cXov1287g4uVK+Ho5YfHMAXxCF5FIGNpEHaRQ\nNIW2qRseaSedLsSnu86jrsGMYX11uHtqHzg58s8GkVj420fUQY5Xzuk2NJpFrkQ4NXUmrPnsGPan\n5sFRpcDCW/piVH8/Xh1OJDKGNlEHqVVNoV3X0D1COyOvAu9/dwaGijqEB7hj0fR+0Hnx6nAie8DQ\nJuqg32b/qmswiVxJx5jMFnx3IAvbk7IAAHMm98akuAA+TpPIjjC0iTpILpcBVhNqJXyknVNUhQ3f\nn0NusRHe7o746/QYjB4czNtziOwMQ5tIADKLCXX10jvSNpkt2JGUje8OZsFssWLsQH/MmRjFi82I\n7BR/M4kEILOaJHdOO6/YiA++P4ucIiO83Bxx78190D/cW+yyiOgaGNpEApBSaJvMFvxwKBvbDjQd\nXd8wwB9zJ0XCWd36IT9EZF8Y2kTtYCguxpY5tyHGCgBWuA25B+UOntg/diTM5kbU3r0Qtyx6UOwy\nW0nPLccnO8/jsqEaHq4q3DO1DwZG+ohdFhHZiKFN1A4+Oh1Covvi9q1Nz5VPDyvGAW0UJuXkY1+g\nDiPvvFvkCluqrmvEln0Xsf/4ZcgATIgLxKxx4Ty6JpIYhjZRO/VZ+iiO/Lwb8eXl8KitAACUOHug\nevptcHK2j/uarVYrks8VY+OeC6isbkCg1gV3T+2DyEAPsUsjonZgaBO1U3hMf+yYfBPit2yGR20l\nAGB3RF9MW/qoyJU1KSqtwec/peN0ZikclHLMGheOm4aF8L5rIgljaBN1QL+HH8Ohn3bBo6bpSLt0\n5Dg4u7iIWlNtvQnbk7KwKzkXZosVMaFeWHBTNGc1I+oGGNpEHRDapy923DQV4ak5AICg8TeJVovV\nasWhM0X4cl8GKowN8HZ3xJyJURgSreWc4UTdBEObqIP6L30MZxctAwA0mMUZes4qrMTnu9NxMb8S\nDko5/nRDGKYOD2l+mAkRdQ8MbaIOCukdje9vGAUAqKxp7NK2Syvr8M1/LuHAyQJYAQyN1uKOiZHw\n8XDq0jqIqGswtIkEsOBvz+DIm7+ivKq+S9qrqTPhh8PZ2HUkF40mCwK1Lpg/KQp9QzVd0j4RiYOh\nTSQAF7USKgc5SivrOrWdRpMF+1Lz8d3BLBhrG+Hl5ojbxoRhdH//pgeXEFG3xtAmEoBMJoPGTY3S\nTjrStlitSD5XhK37M2GoqIOTowKzxoVj8tBgnrcm6kEY2kQC8XJzRGFpDRoazVAJFKQWqxUp5/X4\n9sAl5OuroZDLMHloEKaPCoWbs0qQNohIOhjaRALRuDsCAMqq6uGr6dg90VarFakXDPj2P5eQW2yE\nTAaMjPHDn8aEQefJi8yIeiqGNpFANG5qAE1XdLc3tK1WK05klODb/1xCdlEVZABGxPhi+qhQ+HuL\nO2kLEYmPoU0kkN+OtNtzXttisSIlXY/vD2Uju7AprIf11WH66DAE+jCsiagJQ5tIIN4eTUfa+vJa\nm9/TaLIg6Uwhfjicg6LSGsjQdK/1jBvCEKR17aRKiUiqGNpEAvG9Mrd3cVnboV1bb8L+45ex60gO\nyo0NUMhlGBPrj6nDQzgMTkRXxdAmEoi3uxpKhQxF1wjt0so6/JySj32p+aipN8FRpcBNw4JxY3wI\nvNwcu7BaIpIiwUJ769atePPNNxESEgIAGDVqFB588MEW22zbtg0ff/wx5HI57rjjDiQkJAjVPJHo\n5HIZtJ5OKC6rabHcarUiI78Cu4/mIeW8HharFa5ODpg5JgwTBgfB1clBpIqJSGoEPdKeNm0annrq\nqT9cV1NTg7fffhtbtmyBg4MDZs+ejSlTpsDT01PIEohEpfN0QkFJDYy1jXB0UCD5XBF+OpaH7MIq\nAECQ1hVThgZheD9fwe7lJqKeo8uGx0+cOIEBAwbAzc0NADB48GCkpKRg4sSJXVUCUafz1TgDF0uw\n7pvTyNcbUVnTCJkMGNJbi8lDg9A72JOPySSidhM0tJOTk7Fw4UKYTCY89dRT6NevX/M6g8EAjea/\nDzPQaDTQ6/VCNk8kGpPZgpR0PXYdyQUAnMsug7OjElOHhWDi4ED4cEIUIhJAu0I7MTERiYmJLZbd\ncsstWLp0KcaPH4/U1FQ89dRT+O677666D6vValNbXl7OUCo5jNgWrdZN7BIkQ8i+ytcbsfNQNn4+\nmoMKY0Pzcp3GGe88OVHy84Lzc2U79pVt2E8d067QTkhIuOZFZHFxcSgtLYXZbIZC0fRHS6fTwWAw\nNG9TXFyMQYMGtdlW2f9c1EMJuGdRAAAYEklEQVStabVu0OurxC5DEoToK2NtI46cK0LSmSJk5FcA\nAFydHHBjfDAGRfrgtY2pCPR2RmW5tD+7/FzZjn1lG/aTba71xUaw4fH169fD398ft956K9LT06HR\naJoDGwAGDhyIFStWoLKyEgqFAikpKXj22WeFap6oUzWazDiRUYKkM4U4ebEEZosVMgD9Qr0wdmAA\n4qK0cFDKYb1yZXi+vlrskomoGxIstKdPn44nnngCmzZtgslkwqpVqwAA77//PuLj4xEXF4fly5dj\n4cKFkMlkWLx4cfNFaUT2yGyx4HxOOZLPFeFImh619SYAQLDOFSNj/DC8n2+re6tlMhmCtC44n1OO\n+gYzHFXSHh4nIvsis9p6clkkHEppG4ecbNdWX5nMFpzLLsPRtGKkXjDAWNsIoOmxmyP6+WJkjB+C\ndNeeXvTz3enYcywPK+4aivAAd0Hr70r8XNmOfWUb9pNtumR4nEiqGk1mnLlUhqPni3H8ggE1V46o\nPVxUmDg4EEOidYgO9oRcbtutWkHapmlI8/VGSYc2Edkfhjb1SKWVdTh5sQQnMgw4l12GBpMFQNMR\n9agBfhgarUNkkAfk7bin+rcHfeTxvDYRCYyhTT2CxWLFxcsV+OFILpJOFiBPb2xe5+/tjIGRPhgS\nrUWYv3u7gvr3Aq48SvP3bRARCYGhTd2S1WrFZUM1zmWX4Vx2GdJyypsvJFMq5OgfrsHACB/ERnhD\nK/DEJ06OSui8nJBTVAWr1coZ0IhIMAxt6hasViv0FXVIyy5D2pWgrqj+72QnWk81hvfVYczgYAR4\nqjv9qu4wf3ccPluE4vLa5kd2EhF1FEObJMlktiC7qAoZeRXIyK9ARl5Fi5D2cFFhRD9f9O3lhb69\nvJqnEe2qq1fD/Nxw+GwRLhVUMrSJSDAMbbJ7vx1F5xRW4VJhJS7mVeBSYRUar1w8BgAerioMjdYi\nKtgT/Xp5IcDHRdRh6VD/pqvGswqqMKKfn2h1EFH3wtAmu2KxWFFUVoPsoirkFBqRVViJnCJj821Y\nACCTAcFaV0QEeSAq0AORgR7w9lDb1bnjXr5ukMmASwWVYpdCRN0IQ5tEYbZYUFxWi8uGGlwuqUaB\noRqXDdUoKK1pcQQNND3usn+4BqF+7ujl64pQf3c4Odr3R9dRpUCAjwuyi6pgtligkMvFLomIugH7\n/stHktbQaIahog768lroy2tRXF4LQ3nT66KyGpjMLSfjUynlCPB2QYCPC3r5uSHUzw3BOle7D+ir\nCfNzR76+GgWGmjZnUSMisoU0/xpKmMVixcufH8PF/KZhU4VchshAD0QGeSAi0AP+3s5wc3KAk6PS\nroZ7f89ssaC6zoSq6gaUGetRXtWAcmP9lX/Xo9zYgLKqOpT/7lGVv+fkqECwzrU5oH/7z9tD3eF7\npO1JeIA7/nOqABmXKxjaRCQIhnYXs1itzYENAGaLFedzy3E+t/yq73FRKxEW4A53ZxXUKgXUKiXU\nKgUcVQqoVQpovV1RbayHQiGDUi6DQi6DQiG/8r8yWK1N7VotV/7XaoXFYoUFgNlsQX2jBfUNZjSY\nzKhvNKOh0YL6RjPqG8yormtEdZ0J1bWNMNY2/bv2d+eX/4hSIYOnqyP69vKC1lMNradTi/9c1Pb7\nhURIUUEeAIALueUYPyhQ5GqIqDtgaHcxpUKOD5+eiApjPTLyK3Ex/8otS1eey/xHqutMOJ1Z2oVV\ntqZSyuHi5ABvdzVcnZRwUTvAzdkBnm6O8HJ1hKebIzxdHeHl5thjQrkt/j4ucFErkZ579f9viYiu\nB0NbJB6ujhgSrcWQaG2rdWaLBSUVdSgqq0VhaQ3y9UZczK9EvuHqc1nLAAT7uiLE1w0aN0dYrFaY\nzdam5z7Lmh4ZKZfJIJcDMsggl8sglwEKhRyODgqolHI4qhRQKRVwdJBDpVLAUamAi5MDXNRKqBz4\niMnrJZfJEBXkieMZBpRW1kHjrha7JCKSOIa2HVLI5dB5OUPn5YwB4d7Ny61WK8qq6pGnNyK32Ih8\nfTVy9UYUlNTAYrEip8iInCJj03C6vzvC/N0RFeyOqCAPuKgdRPyJeq7ewU2hnZ5bjhExvF+biDqG\noS0hMpkMGnc1NO5qxEb4NC93c3fCsTMFyCqoRGZBJbIKqnD6UilOX2oaUpcBCNS6IjrYE71DPNE7\nyAMero4i/RQ9S1Rw03nt9LwKhjYRdRhDuxtQOyrRO9gTvYM9m5cZaxtxqaDpnHl6bjkuXq5Ent6I\nPSl5AJrufY4O9kDfXhr0C/WCm7NKrPK7tV6+blA5yJF+jQsNiYhsxdDuplydHDAg3Lt5eL3RZEF2\nYRXO55YhPbcCF/LK8cuJAvxyogAyAL383BATpkH/MA0iAj2gVHAyECEoFXJEBHjgXHYZKqsb4O7C\nL0dE1H4M7R7CQSlHZFDT/eC3jGy6Xzy7qApns0px5lIpLuRVIKuwCt8nZcNRpUDfEC8MiPDGoEgf\neLlxKL0j+oV64Vx2Gc5ml3IeciLqEIZ2DyWXy5ovVrtlZChq6004n1uOM5eaQvx4hgHHMwz4dOd5\nhPq5IS7KB3FRWgRqxX0QhxTFhGnw1f5MnL1UxtAmog5haBMAwMlRiUGRPhgU2XSBm6G8FsczDEi9\n0HTlc1ZhFb7+9RJ8PNQYFOWDIb2bnqjVnWYw6ywhvm5wdXLAmaxSWK1WfukhonZjaNMf8vF0wuSh\nwZg8NBg1dY04mVmC4xcMOJVZgp+O5uGno3nwdFVhaB8dhvf1RXiAO8PoKuQyGfqFeiH5XDEKSmoQ\n4OMidklEJFEMbWqTs9oBI/r5YUQ/P5jMFqTllOFoWjGOndc3B7i3uxrxfXUY1ld35bGUDPDf6xeq\nQfK5Ypy5VMrQJqJ2Y2jTdVEq5Ogf5o3+Yd6488ZonM0qxeGzxUi9oMePh3Pw4+Ec+GqcccMAP4yM\n8eMsYFfEhGoAAGeySjElPljkaohIqhja1G5KhRyxET6IjfBBo8mMU5mlOHy2CMczDPhqfya2/pKJ\nmFANRg/wR1yUT4+eCtXbQw0/jTPO55Sj0WSGg7Ln9gURtR9DmwThoFRgcG8tBvfWoqauEclpxThw\nqqB5ZjYnRyWG99XhhtgAhPn3zOHz2Ahv7DqSi7Sc8hbT0xIR2YqhTYJzVjtg/KBAjB8UiIKSahw8\nXYiDpwux7/hl7Dt+Gb183TBhcCCG9/WFo6rnHHHGRflg15FcHL9gYGgTUbswtKlT+Xu7YNa4CMwc\nE46zWaXYd/wyUi/o8dEPadj8cwZG9ffDhLjAHnFxVmSQB1zUShzPMODOG3v3yNEGIuoYhjZ1Cblc\nhv7h3ugf7o3Syjr8cuIy9p+4jD3H8rDnWB76hHhi4uAgDO6thVzePcNMIZcjNsIbSWeKkFNkRC8/\nN7FLIiKJESy0161bh4MHDwIALBYLDAYDdu7c2bw+Ly8P06dPR//+/QEAXl5eWLt2rVDNk4Ro3NW4\nbUw4bh0ViuMXDNibmo9z2WVIyymHj4caU4YG44ZYfzg5dr/vlAMjfZB0puliPYY2EV0vwf4qPvjg\ng3jwwQcBAF9//TVKSkpabRMWFoZPP/1UqCZJ4pQKOYb20WFoHx0KSqqx+0guDpwuxMY9F/DNfy5h\n3KAATB4S1K1uG+sf5g2FXIbjFwz40w1hYpdDRBIj+KGMyWTCxo0b8cknnwi9a+rG/L1dcNfUPpg5\nNhx7U/Px87E8/Hg4B7uP5CK+jw5Th4cgxFf6R6bOaiX6hHjiTFYZSirq4O3Rfb6QEFHnk1mtVquQ\nO9yxYwcyMjLw8MMPt1iel5eH+fPnY9CgQSguLsb8+fMxY8aMNvdnMpmh5D2tPU5Doxn7U/LwzS8X\nkVNYBQAY1s8Pd0yOQnQvjcjVdcyOg5ew7quTWDijP24bFyF2OUQkIe060k5MTERiYmKLZUuXLsWY\nMWPw1Vdf4YUXXmj1Hk9PTyxbtgwzZsxAVVUVEhISMGLECOh0umu2VVZW054SexSt1g16fZXYZQhu\nULgGA8O8cCqzFNuTspB8thDJZwsRE+qFW0eFIjrE67r3aQ99FR3gDpkM2Hs0B6P7XfvzLyZ76Cup\nYF/Zhv1kG6326qOK7QrthIQEJCQktFpeU1ODwsJCBAUFtVrn6uqKWbNmAQA0Gg369++PzMzMNkOb\nejaZTIbYCG8MCNfgfE45vjuYhTNZZTiTVYaoIA9MHxWKmDCNpG6fcndRoU9I0zO2DeW18PF0Ersk\nIpIIuZA7S0tLQ3h4+B+uO3ToEF5++WUATeGelpaGsDBeiEO2kclk6NPLC0/Mi8OzC4YgNsIbF/Iq\n8MaXJ/DyZyk4n1MmdonXZVjfpi+rR84Xi1wJEUmJoKGt1+uh0bQ837hq1Srk5uZi6NChqKiowJw5\nc3DXXXdh0aJF8PX1FbJ56iEiAz3wSMJArLwnHnFRPsjIr8CrX6Ti9c3HcamgUuzybDIkWge5TIYj\n5xjaRGQ7wS9EExrPf7Stp58nuni5Al//komzWU1H24N7azFzTBgCta6ttrWnvnpj83GcvlSKVx4Y\nCZ0dDpHbU1/ZO/aVbdhPtrnWOW1Bj7SJxBAR4IHH58bhiXlxiAh0R0q6Hs9tSMYH28+itLJO7PKu\nKv63IfJzRSJXQkRSwdCmbqNvLy88e+cQPDw7FkE6Vxw8XYhn3z+Er3/JRF2DSezyWhnSWwulQo6D\npwth5wNeRGQnGNrUrchkMgyK9MHKe+Jx37S+cFIr8d3BLDzz3iH8euIyzBb7CUdntQPionxQUFKD\nSwUcMiSitjG0qVuSy2W4IdYfrywaiRmjQ1HbYMK/f0jDo/9vH85mlYpdXrPRA/wAAAdOF4hcCRFJ\nAUObujVHlQK3jQnHy4tGYvQAP2QVVGLNpuN4a+spGCpqxS4PMWEaeLiokHy2CI0mi9jlEJGdY2hT\nj+Dl5oiFt/TDG4+MQ1SQB1LS9Vix/jC+T8oSNSwVcjlGxvihus6EExkG0eogImlgaFOPEhnkiaf/\nPBh/ubUv1CoFvtqfiec+TMYZEYfMR/02RH6KQ+REdG0MbepxZDIZRvX3x+pFIzBpSBCKy2rw+qbj\neOeb06LcIhakdUUvPzecyixFhbG+y9snIulgaFOP5ax2wJ+n9MbKe+IREeiOo2nFWPHBYfyckgdL\nF9+CNSbWHxarFb+e5NE2EV0dQ5t6vBBfNzxz5xDcc3MfyGUyfLYrHa9+noKCkuouq2FkjB8cHRTY\nf/wyLHZ0WxoR2ReGNhEAuUyGsQMDsOqvwzE0WosLeRVY+eERbD+YBZO58y9Uc3JUYng/X5RU1uFU\nZkmnt0dE0sTQJvodD1dHPDRzABbPHAAXJyW2/pKJFz8+2iUPIpkQFwgA2Jea3+ltEZE0MbSJ/sCQ\naC1W/WU4xg70R26xEas+OYavf8ns1KPuXn5uCPN3x8mLJXZxDzkR2R+GNtFVOKsdcM/NffHEvDh4\nuTniu4NZWPXJMeQbOu9c9/i4AFgB/HKCF6QRUWsMbaI29O3lhb8vHIYbBvgju6gKL/z7CHYl53TK\nFebD+vrC2VGJX09c7pJz6UQkLQxtIhs4OSpx3y19sfT2AXByVGDTzxlYszFV8GFsRwcFboj1R0V1\nA5L5yE4i+h8MbaLrENdbixcXDkdclA/Scsrx3IZkHDpbKGgbk4cEQSYDdiXn8pGdRNQCQ5voOrm7\nqLDk9gG4b1pfWAG8v+0sPtxxDvUNZkH27+PphCHROuQUG5GWUy7IPomoe2BoE7WDTNb06M/n74lH\nL183/OdkAf7+8RHkFRsF2f9N8cEAgN1HcgXZHxF1Dwxtog7w1Tjj2QVDMHloEApKavDiJ0exNzW/\nw8PaEYEeiAhwx/EMAwpLawSqloikjqFN1EEOSjnmT+6NpbMGQKWU49Od57Hum9OoqTN1aL83DgsB\nwKNtIvovhjaRQOKitHjhvmHoHeSBo+f1ePHjI8jTt3+4fHBvH3i7q3HgVAEqaxoErJSIpIqhTSQg\njbsaT8yPw83DQ1BUVouXPjmKw2fbd+uWQi7HjcOC0WCy8GibiAAwtIkEp5DLkTAhEg/d1h8ymQzv\nbTuDjT9daNdkKWMHBsDN2QE/p+Shpq6xE6olIilhaBN1kqF9dHju7qHw93bG7qO5WLMxFRXG+uva\nh6ODAjcNC0FtvRl7UvggEaKejqFN1In8vV2w4q6hGNpHh/S8Cjz/0RFcvFxxXfuYEBcIZ0cldh/J\nFexecCKSJoY2USdzclTiwT/F4I4JkaisbsCrn6de1yxqTo5KTB4aBGNtI/Yf59E2UU/G0CbqAjKZ\nDFOHh2DZ7IFwUMrw/raz2PpLps0PHZk8NBiODgr8mJyDRhMfJELUU7U7tJOTkzFy5Ejs3bu3eVla\nWhrmzp2LuXPnYuXKla3e09jYiOXLl2PevHm48847kZvLK2KpZ4mN8MazC4ZC66nG9oNZWPfNaZuG\nvF2dHDAhLhDlxgb8cuJyF1RKRPaoXaGdk5ODf//73xg8eHCL5atWrcKzzz6LTZs2wWg0Yv/+/S3W\nb9++He7u7ti4cSMeeOABvP766+2vnEiiAn2aznP3DvbEsfN6vPJ5Ckor69p839ThIXB0UGD7wSzU\nN/LcNlFP1K7Q1mq1eOutt+Dm5ta8rKGhAfn5+YiNjQUATJgwAUlJSS3el5SUhClTpgAARo0ahZSU\nlPbWTSRpbs4qPD53EMbENj2j+8VPjiKnqOqa73F3UWFKfBAqqhvwc0peF1VKRPakXaHt5OQEhULR\nYllZWRnc3d2bX3t7e0Ov17fYxmAwQKPRNDUsl0Mmk6GhgTM9Uc+kVMhxz819mi5QMzbglc9TcCar\n9JrvmTosBM6OSuxIykZtfcemSSUi6VG2tUFiYiISExNbLFu6dCnGjBlzzffZ8sAEW7bRat3a3IbY\nT9fD3vpqwa0xWHBrjM3bb159SydW05K99ZU9Y1/Zhv3UMW2GdkJCAhISEtrckUajQXn5f5/9W1RU\nBJ1O12IbnU4HvV6PPn36oLGxEVarFSqVqh1lExER9TyC3fLl4OCA8PBwHD16FACwa9euVkfjo0eP\nxo8//ggA2Lt3L4YPHy5U80RERN2ezNqOB//u27cPGzZsQGZmJjQaDbRaLT788ENkZGTgueeeg8Vi\nwcCBA/HMM88AAB588EGsW7cOZrMZK1asQFZWFlQqFV555RX4+/sL/kMRERF1R+0KbSIiIup6nBGN\niIhIIhjaREREEsHQlrD2TCXb023duhXjxo3DggULsGDBAqxbt07skuzO6tWrMWfOHMydOxcnT54U\nuxy7dfjwYYwYMaL5s/Tiiy+KXZLdSU9Px+TJk/HZZ58BAAoKCrBgwQLMnz8fy5Yt4zwd7dDmLV9k\nn9qaSjY2NhbLly/H/v37MW7cOJGqtE/Tpk3DU089JXYZdik5ORnZ2dnYvHkzLl68iGeffRabN28W\nuyy7NWzYMKxdu1bsMuxSTU0NXnzxRYwcObJ52dq1azF//nzcfPPNeOONN7BlyxbMnz9fxCqlh0fa\nEtXeqWSJriUpKQmTJ08GAERERKCiogJGo1HkqkiKVCoV1q9f32K+jsOHD2PSpEkA+PepvRjaEtXe\nqWSp6Why4cKFuPvuu3H27Fmxy7ErBoMBXl5eza81Gg0/Q9eQkZGBBx54APPmzcOBAwfELseuKJVK\nqNXqFstqa2ubJ9Ti36f24fC4BHTmVLLd2R/12y233IKlS5di/PjxSE1NxVNPPYXvvvtOpArtX0//\nDF1LaGgolixZgptvvhm5ubm46667sGvXLs7yaCN+ttqHoS0BQk4l25O01W9xcXEoLS2F2WxuNWrR\nU+l0OhgMhubXxcXF0Gq1IlZkv3x9fTFt2jQAQEhICHx8fFBUVITg4GCRK7Nfzs7OqKurg1qt7vF/\nn9qLw+PdiC1TyfZ069evx/bt2wE0Xdmq0WgY2L8zevRo7Ny5EwBw5swZ6HQ6uLq6ilyVfdq2bRs2\nbNgAANDr9SgpKYGvr6/IVdm3UaNGNX+++PepfTgjmkRd71Sy1KSwsBBPPPEErFYrTCZT85X29F9r\n1qzB0aNHIZPJsHLlSvTp00fskuyS0WjE448/jsrKSjQ2NmLJkiW8U+N3Tp8+jVdffRX5+flQKpXw\n9fXFmjVr8PTTT6O+vh4BAQF4+eWX4eDgIHapksLQJiIikggOjxMREUkEQ5uIiEgiGNpEREQSwdAm\nIiKSCIY2ERGRRDC0iYiIJIKhTUREJBEMbSIiIon4/09zoKHX4gEOAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fad40a7b7b8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAekAAAFKCAYAAAA5RqfXAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3Xl0VPX9//HXzGSSEBJIApNAIOx7\nWEIAUZYIKKiAVEQgtFSrtKCyWMUiohWsBRWXFkVBASutCxjgp6B8AWVxYxNQwCCERSAJAokkkJVk\nkvv7g5oSISyTIXNn8nycwznJvXPnvt+53HnN/cy9dyyGYRgCAACmY/V0AQAA4OIIaQAATIqQBgDA\npAhpAABMipAGAMCkCGkAAEzKr7JW5HQWKzMzr7JWV6nCwoJ8tjeJ/rwd/Xk3X+7Pl3uTJIcjpMLP\nUWlH0n5+tspaVaXz5d4k+vN29OfdfLk/X+7NXRjuBgDApAhpAABMipAGAMCkCGkAAEyKkAYAwKQI\naQAATIqQBgDApCrtZiYAANc4nU498MAoNWzYSHFxnVW9erBuvLH3FS+/Y8c2LVv2gf7+95nXsMqr\n9+qrr+rDDz/S0KEJWr9+rWbPflPjxo1WQUGBAgMDSx83ceJkNW7cROPGjdbs2W9e9LmmT5+m++4b\nrZUrVyg0NFRDhgwvnbdjxzZ9++12jRo15qLL/vK8d911uyIiImW1WmUYhgICAjVlylOqXduhceNG\nq0uXrlqx4kONGDGyzPNfS4Q0AJhcRkaGioqK9OSTT3u6FLcbOjRBQ4YM1/r1a0unTZnylJo0aSbp\nXMD+858vaNasOZVSz4svvqKgoCBJ0sqVKzRv3hw9/vhTkqR77hklp9NZKXX8gpAGAJN79dWXlJaW\nqhkznlZkZB2FhoaqceOmWrbsA1ksVh058qN69bpJ9903Wt98s0Xz58+V3W5XSEiI/va358p93n/+\n80Xt2fO9bDab/vKXx9WkSTO9/vos7d69U05nsYYMGaZbbx2gceNG65FHJqlJk2ZaunSxsrKy1LFj\nJy1a9I7y8vI0btzDWrXqY+3d+4OKi4s1ePBd6t//dn3++TotWvSObDY/tWzZWuPHP1xuLU8++beL\nTo+JaauUlKOXfIwkjRkzTqGhoRed16ZN29LQv5p1t2nTVp98svyy676WKhTSy5cv1/z58+Xn56cJ\n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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fad409fcf60>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Test done\n",
            "Reeds Shepp path planner sample start!!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\ni7fZNPqvb+izsDBd9+R0l80NwLcRvvAal6VcqctSrpRhGPrXh+/pwQd+oeCgYD3y2JPq1j1Zlf9Z\nrtizXO6C+noNmft/+iosXFdNfdjlcwPwPYQvvI6fn58m33anJt92p2pra/XKS7O1d+8e3bllU5OX\n6VZbq9qXXtS68HAN+8X/uHBaAL6o9V+aBNxYSEiInpr+v/r5FVfqxvyjzZ63T2Wlkn//rDYu/MBF\n0wHwVYQvfIKxZpVCzuN8/cvK1GHm09r28VKnzwTAdxG+8Hq5B3KUtPn8O6dTio4rYvpvtHPl506c\nCoAvI3zh9Xb8810NKitr0WWG5h+V3xMPa/eGdU6aCoAvI3zh1QzDUOCGdWrpITTqJHU9fFifPzpV\nuQdynDAZAF9mV6sRAACwH3u+AAC4GOELAICLEb4AALgY4QsAgIsRvgAAuBjhCwCAixG+zSgsLFRK\nSoo2bjz/oyN5IovFoqeeeko///nPdeutt2rLli1mj+QUs2bN0uTJk5WWlqYdO3aYPY5LzJkzR5Mn\nT9akSZP02WefmT2O09XU1Gj06NFavHix2aO4xLJlyzR+/HhNnDhRq1atMnscp6qsrNTUqVN15513\nKi0tTWvXrjV7pFah1agZc+bMUWJiotljON3SpUsVGhqqDz/8UHv37tVvf/tbZWRkmD2WQ23atEkH\nDhzQwoULlZWVpenTp2vhwoVmj+VUX3/9tfbu3auFCxequLhYEyZM0HXXXWf2WE71xhtvqG3btmaP\n4RLFxcV67bXXtGjRIlVVVWnu3LkaNWqU2WM5zUcffaRu3brp8ccfV35+vu6++26tWLHC7LHsRvg2\nITMzU+Hh4erVq5fZozjd+PHjNW7cOElSbGysSkpKTJ7I8TIzMzV69GhJUnJyskpLS1VRUaGIiAiT\nJ3OelJQU9e/fX5IUFRWl6upqWa1WBQQEmDyZc2RlZWnfvn1eHUCnyszM1ODBgxUREaGIiAg9//zz\nZo/kVDExMfrxxx8lSWVlZYqJiTF5otbhZeezqKur02uvvaZHH33U7FFcIigoSCEhDZ0/f//73xuD\n2JsUFhaedmeNjY1VQUGBiRM5X0BAgMLCwiRJGRkZGjFihNcGryTNnj1b06ZNM3sMlzl8+LBqamr0\ny1/+UrfddpsyMzPNHsmpbrjhBuXm5uraa6/VHXfcoaeeesrskVrF5/d809PTlZ6eftppI0aMUGpq\nqqKiokyaynnOtt6HHnpIw4cP1/vvv69du3Zp3rx5Jk3nOr50VNUvvvhCGRkZeuedd8wexWmWLFmi\nAQMG+MTbRKcqKSnRX/7yF+Xm5uquu+7SV199JT+/lh7J3DMsXbpUnTp10vz587V7925Nnz7do9/b\n9/nwTU1NVWpq6mmnpaWlyWaz6f3339fBgwe1Y8cOvfrqq+rZs6dJUzrO2dYrNYTyypUr9frrryso\nKMiEyZwrPj5ehYWFjT8fO3ZMcXFxJk7kGmvXrtW8efP09ttvKzIy0uxxnGbVqlU6dOiQVq1apaNH\njyo4OFgJCQkaMmSI2aM5Tbt27XTppZcqMDBQXbp0UXh4uIqKitSuXTuzR3OKbdu2adiwYZKkPn36\n6NixYx79NorPh+/ZLFiwoPHf06ZN04QJE7wieJty6NAhLViwQO+9917jy8/eZujQoZo7d67S0tK0\na9cuxcfHe/X7vZJUXl6uOXPm6N1331V0dLTZ4zjVK6+80vjvuXPnqnPnzl4dvJI0bNgwTZs2Tfff\nf79KS0tVVVXl8e+DNqdr167avn27rr/+eh05ckTh4eEeG7wS4Qs17PWWlJRoypQpjafNnz9fwcHB\nJk7lWAMHDlS/fv2UlpYmPz8/zZw50+yRnG758uUqLi7WI4880nja7Nmz1alTJxOngqN06NBB119/\nvW699VZJ0owZM+Tv770f45k8ebKmT5+uO+64QxaLRc8++6zZI7UKlYIAALiY9z5NAgDATRG+AAC4\nGOELAICLEb4AALgY4QsAgIsRvgAAuBjhCwCAixG+AAC42P8HokXN2y/4q/0AAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fad409b82b0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}